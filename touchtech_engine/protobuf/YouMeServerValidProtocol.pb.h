// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YouMeServerValidProtocol.proto

#ifndef PROTOBUF_YouMeServerValidProtocol_2eproto__INCLUDED
#define PROTOBUF_YouMeServerValidProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace YouMeProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
void protobuf_AssignDesc_YouMeServerValidProtocol_2eproto();
void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto();

class GetRedirectRequest;
class GetRedirectResponse;
class RedirectInfo;
class ServerValid;
class ServerValidResponse;

enum Bussiness {
  Bussiness_AV = 1,
  Bussiness_IM = 2
};
bool Bussiness_IsValid(int value);
const Bussiness Bussiness_MIN = Bussiness_AV;
const Bussiness Bussiness_MAX = Bussiness_IM;
const int Bussiness_ARRAYSIZE = Bussiness_MAX + 1;

// ===================================================================

class ServerValid : public ::youmecommon::protobuf::MessageLite {
 public:
  ServerValid();
  virtual ~ServerValid();

  ServerValid(const ServerValid& from);

  inline ServerValid& operator=(const ServerValid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ServerValid& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerValid* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerValid* other);

  // implements Message ----------------------------------------------

  inline ServerValid* New() const { return New(NULL); }

  ServerValid* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const ServerValid& from);
  void MergeFrom(const ServerValid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerValid* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required .YouMeProtocol.Bussiness bussines = 3;
  bool has_bussines() const;
  void clear_bussines();
  static const int kBussinesFieldNumber = 3;
  ::YouMeProtocol::Bussiness bussines() const;
  void set_bussines(::YouMeProtocol::Bussiness value);

  // optional uint32 idc = 4;
  bool has_idc() const;
  void clear_idc();
  static const int kIdcFieldNumber = 4;
  ::youmecommon::protobuf::uint32 idc() const;
  void set_idc(::youmecommon::protobuf::uint32 value);

  // optional string idc_area = 5;
  bool has_idc_area() const;
  void clear_idc_area();
  static const int kIdcAreaFieldNumber = 5;
  const ::std::string& idc_area() const;
  void set_idc_area(const ::std::string& value);
  void set_idc_area(const char* value);
  void set_idc_area(const char* value, size_t size);
  ::std::string* mutable_idc_area();
  ::std::string* release_idc_area();
  void set_allocated_idc_area(::std::string* idc_area);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.ServerValid)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_bussines();
  inline void clear_has_bussines();
  inline void set_has_idc();
  inline void clear_has_idc();
  inline void set_has_idc_area();
  inline void clear_has_idc_area();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr data_;
  int bussines_;
  ::youmecommon::protobuf::uint32 idc_;
  ::youmecommon::protobuf::internal::ArenaStringPtr idc_area_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
  #endif
  friend void protobuf_AssignDesc_YouMeServerValidProtocol_2eproto();
  friend void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto();

  void InitAsDefaultInstance();
  static ServerValid* default_instance_;
};
// -------------------------------------------------------------------

class RedirectInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  RedirectInfo();
  virtual ~RedirectInfo();

  RedirectInfo(const RedirectInfo& from);

  inline RedirectInfo& operator=(const RedirectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const RedirectInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RedirectInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RedirectInfo* other);

  // implements Message ----------------------------------------------

  inline RedirectInfo* New() const { return New(NULL); }

  RedirectInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const RedirectInfo& from);
  void MergeFrom(const RedirectInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedirectInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string host = 1;
  bool has_host() const;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::youmecommon::protobuf::uint32 port() const;
  void set_port(::youmecommon::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.RedirectInfo)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr host_;
  ::youmecommon::protobuf::uint32 port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
  #endif
  friend void protobuf_AssignDesc_YouMeServerValidProtocol_2eproto();
  friend void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto();

  void InitAsDefaultInstance();
  static RedirectInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerValidResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  ServerValidResponse();
  virtual ~ServerValidResponse();

  ServerValidResponse(const ServerValidResponse& from);

  inline ServerValidResponse& operator=(const ServerValidResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const ServerValidResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerValidResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerValidResponse* other);

  // implements Message ----------------------------------------------

  inline ServerValidResponse* New() const { return New(NULL); }

  ServerValidResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const ServerValidResponse& from);
  void MergeFrom(const ServerValidResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerValidResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // repeated .YouMeProtocol.NameValue configurations = 3;
  int configurations_size() const;
  void clear_configurations();
  static const int kConfigurationsFieldNumber = 3;
  const ::YouMeProtocol::NameValue& configurations(int index) const;
  ::YouMeProtocol::NameValue* mutable_configurations(int index);
  ::YouMeProtocol::NameValue* add_configurations();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue >*
      mutable_configurations();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue >&
      configurations() const;

  // optional int32 timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  ::youmecommon::protobuf::int32 timeout() const;
  void set_timeout(::youmecommon::protobuf::int32 value);

  // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 5;
  int redirect_info_list_size() const;
  void clear_redirect_info_list();
  static const int kRedirectInfoListFieldNumber = 5;
  const ::YouMeProtocol::RedirectInfo& redirect_info_list(int index) const;
  ::YouMeProtocol::RedirectInfo* mutable_redirect_info_list(int index);
  ::YouMeProtocol::RedirectInfo* add_redirect_info_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >*
      mutable_redirect_info_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >&
      redirect_info_list() const;

  // optional int32 get_redirect_flag = 6;
  bool has_get_redirect_flag() const;
  void clear_get_redirect_flag();
  static const int kGetRedirectFlagFieldNumber = 6;
  ::youmecommon::protobuf::int32 get_redirect_flag() const;
  void set_get_redirect_flag(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.ServerValidResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_get_redirect_flag();
  inline void clear_has_get_redirect_flag();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr data_;
  ::youmecommon::protobuf::int32 status_;
  ::youmecommon::protobuf::int32 timeout_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue > configurations_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo > redirect_info_list_;
  ::youmecommon::protobuf::int32 get_redirect_flag_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
  #endif
  friend void protobuf_AssignDesc_YouMeServerValidProtocol_2eproto();
  friend void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto();

  void InitAsDefaultInstance();
  static ServerValidResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRedirectRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  GetRedirectRequest();
  virtual ~GetRedirectRequest();

  GetRedirectRequest(const GetRedirectRequest& from);

  inline GetRedirectRequest& operator=(const GetRedirectRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const GetRedirectRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetRedirectRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetRedirectRequest* other);

  // implements Message ----------------------------------------------

  inline GetRedirectRequest* New() const { return New(NULL); }

  GetRedirectRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const GetRedirectRequest& from);
  void MergeFrom(const GetRedirectRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRedirectRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // repeated string idc_area = 2;
  int idc_area_size() const;
  void clear_idc_area();
  static const int kIdcAreaFieldNumber = 2;
  const ::std::string& idc_area(int index) const;
  ::std::string* mutable_idc_area(int index);
  void set_idc_area(int index, const ::std::string& value);
  void set_idc_area(int index, const char* value);
  void set_idc_area(int index, const char* value, size_t size);
  ::std::string* add_idc_area();
  void add_idc_area(const ::std::string& value);
  void add_idc_area(const char* value);
  void add_idc_area(const char* value, size_t size);
  const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>& idc_area() const;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string>* mutable_idc_area();

  // @@protoc_insertion_point(class_scope:YouMeProtocol.GetRedirectRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string> idc_area_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
  #endif
  friend void protobuf_AssignDesc_YouMeServerValidProtocol_2eproto();
  friend void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetRedirectRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetRedirectResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  GetRedirectResponse();
  virtual ~GetRedirectResponse();

  GetRedirectResponse(const GetRedirectResponse& from);

  inline GetRedirectResponse& operator=(const GetRedirectResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const GetRedirectResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GetRedirectResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GetRedirectResponse* other);

  // implements Message ----------------------------------------------

  inline GetRedirectResponse* New() const { return New(NULL); }

  GetRedirectResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const GetRedirectResponse& from);
  void MergeFrom(const GetRedirectResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRedirectResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 2;
  int redirect_info_list_size() const;
  void clear_redirect_info_list();
  static const int kRedirectInfoListFieldNumber = 2;
  const ::YouMeProtocol::RedirectInfo& redirect_info_list(int index) const;
  ::YouMeProtocol::RedirectInfo* mutable_redirect_info_list(int index);
  ::YouMeProtocol::RedirectInfo* add_redirect_info_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >*
      mutable_redirect_info_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >&
      redirect_info_list() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.GetRedirectResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo > redirect_info_list_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
  #endif
  friend void protobuf_AssignDesc_YouMeServerValidProtocol_2eproto();
  friend void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetRedirectResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerValid

// required .YouMeProtocol.PacketHead head = 1;
inline bool ServerValid::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerValid::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerValid::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerValid::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& ServerValid::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* ServerValid::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValid.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* ServerValid::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void ServerValid::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValid.head)
}

// required bytes data = 2;
inline bool ServerValid::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerValid::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerValid::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerValid::clear_data() {
  data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ServerValid::data() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.data)
  return data_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerValid::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.data)
}
inline void ServerValid::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.ServerValid.data)
}
inline void ServerValid::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.ServerValid.data)
}
inline ::std::string* ServerValid::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValid.data)
  return data_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerValid::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerValid::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValid.data)
}

// required .YouMeProtocol.Bussiness bussines = 3;
inline bool ServerValid::has_bussines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerValid::set_has_bussines() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerValid::clear_has_bussines() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerValid::clear_bussines() {
  bussines_ = 1;
  clear_has_bussines();
}
inline ::YouMeProtocol::Bussiness ServerValid::bussines() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.bussines)
  return static_cast< ::YouMeProtocol::Bussiness >(bussines_);
}
inline void ServerValid::set_bussines(::YouMeProtocol::Bussiness value) {
  assert(::YouMeProtocol::Bussiness_IsValid(value));
  set_has_bussines();
  bussines_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.bussines)
}

// optional uint32 idc = 4;
inline bool ServerValid::has_idc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerValid::set_has_idc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerValid::clear_has_idc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerValid::clear_idc() {
  idc_ = 0u;
  clear_has_idc();
}
inline ::youmecommon::protobuf::uint32 ServerValid::idc() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.idc)
  return idc_;
}
inline void ServerValid::set_idc(::youmecommon::protobuf::uint32 value) {
  set_has_idc();
  idc_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.idc)
}

// optional string idc_area = 5;
inline bool ServerValid::has_idc_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerValid::set_has_idc_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerValid::clear_has_idc_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerValid::clear_idc_area() {
  idc_area_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idc_area();
}
inline const ::std::string& ServerValid::idc_area() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.idc_area)
  return idc_area_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerValid::set_idc_area(const ::std::string& value) {
  set_has_idc_area();
  idc_area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.idc_area)
}
inline void ServerValid::set_idc_area(const char* value) {
  set_has_idc_area();
  idc_area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.ServerValid.idc_area)
}
inline void ServerValid::set_idc_area(const char* value, size_t size) {
  set_has_idc_area();
  idc_area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.ServerValid.idc_area)
}
inline ::std::string* ServerValid::mutable_idc_area() {
  set_has_idc_area();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValid.idc_area)
  return idc_area_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerValid::release_idc_area() {
  clear_has_idc_area();
  return idc_area_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerValid::set_allocated_idc_area(::std::string* idc_area) {
  if (idc_area != NULL) {
    set_has_idc_area();
  } else {
    clear_has_idc_area();
  }
  idc_area_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), idc_area);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValid.idc_area)
}

// -------------------------------------------------------------------

// RedirectInfo

// required string host = 1;
inline bool RedirectInfo::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedirectInfo::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedirectInfo::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedirectInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
inline const ::std::string& RedirectInfo::host() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.RedirectInfo.host)
  return host_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedirectInfo::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.RedirectInfo.host)
}
inline void RedirectInfo::set_host(const char* value) {
  set_has_host();
  host_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.RedirectInfo.host)
}
inline void RedirectInfo::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.RedirectInfo.host)
}
inline ::std::string* RedirectInfo::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.RedirectInfo.host)
  return host_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedirectInfo::release_host() {
  clear_has_host();
  return host_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedirectInfo::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.RedirectInfo.host)
}

// required uint32 port = 2;
inline bool RedirectInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedirectInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedirectInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedirectInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::youmecommon::protobuf::uint32 RedirectInfo::port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.RedirectInfo.port)
  return port_;
}
inline void RedirectInfo::set_port(::youmecommon::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.RedirectInfo.port)
}

// -------------------------------------------------------------------

// ServerValidResponse

// required int32 status = 1;
inline bool ServerValidResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerValidResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerValidResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerValidResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 ServerValidResponse::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.status)
  return status_;
}
inline void ServerValidResponse::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.status)
}

// required bytes data = 2;
inline bool ServerValidResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerValidResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerValidResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerValidResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ServerValidResponse::data() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.data)
  return data_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerValidResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.data)
}
inline void ServerValidResponse::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.ServerValidResponse.data)
}
inline void ServerValidResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.ServerValidResponse.data)
}
inline ::std::string* ServerValidResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValidResponse.data)
  return data_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerValidResponse::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerValidResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValidResponse.data)
}

// repeated .YouMeProtocol.NameValue configurations = 3;
inline int ServerValidResponse::configurations_size() const {
  return configurations_.size();
}
inline void ServerValidResponse::clear_configurations() {
  configurations_.Clear();
}
inline const ::YouMeProtocol::NameValue& ServerValidResponse::configurations(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_.Get(index);
}
inline ::YouMeProtocol::NameValue* ServerValidResponse::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_.Mutable(index);
}
inline ::YouMeProtocol::NameValue* ServerValidResponse::add_configurations() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue >*
ServerValidResponse::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.ServerValidResponse.configurations)
  return &configurations_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue >&
ServerValidResponse::configurations() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_;
}

// optional int32 timeout = 4;
inline bool ServerValidResponse::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerValidResponse::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerValidResponse::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerValidResponse::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::youmecommon::protobuf::int32 ServerValidResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.timeout)
  return timeout_;
}
inline void ServerValidResponse::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.timeout)
}

// repeated .YouMeProtocol.RedirectInfo redirect_info_list = 5;
inline int ServerValidResponse::redirect_info_list_size() const {
  return redirect_info_list_.size();
}
inline void ServerValidResponse::clear_redirect_info_list() {
  redirect_info_list_.Clear();
}
inline const ::YouMeProtocol::RedirectInfo& ServerValidResponse::redirect_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_.Get(index);
}
inline ::YouMeProtocol::RedirectInfo* ServerValidResponse::mutable_redirect_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_.Mutable(index);
}
inline ::YouMeProtocol::RedirectInfo* ServerValidResponse::add_redirect_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >*
ServerValidResponse::mutable_redirect_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return &redirect_info_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >&
ServerValidResponse::redirect_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_;
}

// optional int32 get_redirect_flag = 6;
inline bool ServerValidResponse::has_get_redirect_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerValidResponse::set_has_get_redirect_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerValidResponse::clear_has_get_redirect_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerValidResponse::clear_get_redirect_flag() {
  get_redirect_flag_ = 0;
  clear_has_get_redirect_flag();
}
inline ::youmecommon::protobuf::int32 ServerValidResponse::get_redirect_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.get_redirect_flag)
  return get_redirect_flag_;
}
inline void ServerValidResponse::set_get_redirect_flag(::youmecommon::protobuf::int32 value) {
  set_has_get_redirect_flag();
  get_redirect_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.get_redirect_flag)
}

// -------------------------------------------------------------------

// GetRedirectRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool GetRedirectRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRedirectRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRedirectRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRedirectRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& GetRedirectRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* GetRedirectRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.GetRedirectRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* GetRedirectRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void GetRedirectRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.GetRedirectRequest.head)
}

// repeated string idc_area = 2;
inline int GetRedirectRequest::idc_area_size() const {
  return idc_area_.size();
}
inline void GetRedirectRequest::clear_idc_area() {
  idc_area_.Clear();
}
inline const ::std::string& GetRedirectRequest::idc_area(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectRequest.idc_area)
  return idc_area_.Get(index);
}
inline ::std::string* GetRedirectRequest::mutable_idc_area(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.GetRedirectRequest.idc_area)
  return idc_area_.Mutable(index);
}
inline void GetRedirectRequest::set_idc_area(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.GetRedirectRequest.idc_area)
  idc_area_.Mutable(index)->assign(value);
}
inline void GetRedirectRequest::set_idc_area(int index, const char* value) {
  idc_area_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.GetRedirectRequest.idc_area)
}
inline void GetRedirectRequest::set_idc_area(int index, const char* value, size_t size) {
  idc_area_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.GetRedirectRequest.idc_area)
}
inline ::std::string* GetRedirectRequest::add_idc_area() {
  return idc_area_.Add();
}
inline void GetRedirectRequest::add_idc_area(const ::std::string& value) {
  idc_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.GetRedirectRequest.idc_area)
}
inline void GetRedirectRequest::add_idc_area(const char* value) {
  idc_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.GetRedirectRequest.idc_area)
}
inline void GetRedirectRequest::add_idc_area(const char* value, size_t size) {
  idc_area_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.GetRedirectRequest.idc_area)
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
GetRedirectRequest::idc_area() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.GetRedirectRequest.idc_area)
  return idc_area_;
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
GetRedirectRequest::mutable_idc_area() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.GetRedirectRequest.idc_area)
  return &idc_area_;
}

// -------------------------------------------------------------------

// GetRedirectResponse

// required int32 status = 1;
inline bool GetRedirectResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRedirectResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRedirectResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRedirectResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 GetRedirectResponse::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectResponse.status)
  return status_;
}
inline void GetRedirectResponse::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.GetRedirectResponse.status)
}

// repeated .YouMeProtocol.RedirectInfo redirect_info_list = 2;
inline int GetRedirectResponse::redirect_info_list_size() const {
  return redirect_info_list_.size();
}
inline void GetRedirectResponse::clear_redirect_info_list() {
  redirect_info_list_.Clear();
}
inline const ::YouMeProtocol::RedirectInfo& GetRedirectResponse::redirect_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_.Get(index);
}
inline ::YouMeProtocol::RedirectInfo* GetRedirectResponse::mutable_redirect_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_.Mutable(index);
}
inline ::YouMeProtocol::RedirectInfo* GetRedirectResponse::add_redirect_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >*
GetRedirectResponse::mutable_redirect_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return &redirect_info_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >&
GetRedirectResponse::redirect_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YouMeProtocol::Bussiness> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace youmecommon
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_YouMeServerValidProtocol_2eproto__INCLUDED
