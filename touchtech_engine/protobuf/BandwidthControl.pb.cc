// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BandwidthControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BandwidthControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YmBwCtrlProto {

void protobuf_ShutdownFile_BandwidthControl_2eproto() {
  delete CtrlMsgServer::default_instance_;
  delete CtrlMsgClient::default_instance_;
  delete CtrlMsgMain::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BandwidthControl_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BandwidthControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CtrlMsgServer::default_instance_ = new CtrlMsgServer();
  CtrlMsgClient::default_instance_ = new CtrlMsgClient();
  CtrlMsgMain::default_instance_ = new CtrlMsgMain();
  CtrlMsgServer::default_instance_->InitAsDefaultInstance();
  CtrlMsgClient::default_instance_->InitAsDefaultInstance();
  CtrlMsgMain::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BandwidthControl_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BandwidthControl_2eproto_once_);
void protobuf_AddDesc_BandwidthControl_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_BandwidthControl_2eproto_once_,
                 &protobuf_AddDesc_BandwidthControl_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BandwidthControl_2eproto {
  StaticDescriptorInitializer_BandwidthControl_2eproto() {
    protobuf_AddDesc_BandwidthControl_2eproto();
  }
} static_descriptor_initializer_BandwidthControl_2eproto_;
#endif
bool CtrlMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool FecType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CtrlMsgServer::kFecToUseFieldNumber;
const int CtrlMsgServer::kRedunantPercentFieldNumber;
const int CtrlMsgServer::kRedunantGroupSizeFieldNumber;
const int CtrlMsgServer::kTargetBitrateBpsFieldNumber;
const int CtrlMsgServer::kOriginalTimestampFieldNumber;
const int CtrlMsgServer::kLoopbackTimestampFieldNumber;
#endif  // !_MSC_VER

CtrlMsgServer::CtrlMsgServer()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YmBwCtrlProto.CtrlMsgServer)
}

void CtrlMsgServer::InitAsDefaultInstance() {
}

CtrlMsgServer::CtrlMsgServer(const CtrlMsgServer& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YmBwCtrlProto.CtrlMsgServer)
}

void CtrlMsgServer::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  fectouse_ = 0;
  redunantpercent_ = 0;
  redunantgroupsize_ = 0;
  targetbitratebps_ = 0;
  originaltimestamp_ = 0;
  loopbacktimestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlMsgServer::~CtrlMsgServer() {
  // @@protoc_insertion_point(destructor:YmBwCtrlProto.CtrlMsgServer)
  SharedDtor();
}

void CtrlMsgServer::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CtrlMsgServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CtrlMsgServer& CtrlMsgServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BandwidthControl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BandwidthControl_2eproto();
#endif
  return *default_instance_;
}

CtrlMsgServer* CtrlMsgServer::default_instance_ = NULL;

CtrlMsgServer* CtrlMsgServer::New(::youmecommon::protobuf::Arena* arena) const {
  CtrlMsgServer* n = new CtrlMsgServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlMsgServer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlMsgServer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(fectouse_, loopbacktimestamp_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CtrlMsgServer::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YmBwCtrlProto.CtrlMsgServer)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .YmBwCtrlProto.FecType fecToUse = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YmBwCtrlProto::FecType_IsValid(value)) {
            set_fectouse(static_cast< ::YmBwCtrlProto::FecType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_redunantPercent;
        break;
      }

      // optional int32 redunantPercent = 2;
      case 2: {
        if (tag == 16) {
         parse_redunantPercent:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redunantpercent_)));
          set_has_redunantpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_redunantGroupSize;
        break;
      }

      // optional int32 redunantGroupSize = 3;
      case 3: {
        if (tag == 24) {
         parse_redunantGroupSize:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redunantgroupsize_)));
          set_has_redunantgroupsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetBitrateBps;
        break;
      }

      // optional int32 targetBitrateBps = 4;
      case 4: {
        if (tag == 32) {
         parse_targetBitrateBps:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetbitratebps_)));
          set_has_targetbitratebps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_originalTimestamp;
        break;
      }

      // optional int32 originalTimestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_originalTimestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originaltimestamp_)));
          set_has_originaltimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_loopbackTimestamp;
        break;
      }

      // optional int32 loopbackTimestamp = 6;
      case 6: {
        if (tag == 48) {
         parse_loopbackTimestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loopbacktimestamp_)));
          set_has_loopbacktimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YmBwCtrlProto.CtrlMsgServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YmBwCtrlProto.CtrlMsgServer)
  return false;
#undef DO_
}

void CtrlMsgServer::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YmBwCtrlProto.CtrlMsgServer)
  // optional .YmBwCtrlProto.FecType fecToUse = 1;
  if (has_fectouse()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fectouse(), output);
  }

  // optional int32 redunantPercent = 2;
  if (has_redunantpercent()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->redunantpercent(), output);
  }

  // optional int32 redunantGroupSize = 3;
  if (has_redunantgroupsize()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->redunantgroupsize(), output);
  }

  // optional int32 targetBitrateBps = 4;
  if (has_targetbitratebps()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetbitratebps(), output);
  }

  // optional int32 originalTimestamp = 5;
  if (has_originaltimestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->originaltimestamp(), output);
  }

  // optional int32 loopbackTimestamp = 6;
  if (has_loopbacktimestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->loopbacktimestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YmBwCtrlProto.CtrlMsgServer)
}

int CtrlMsgServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional .YmBwCtrlProto.FecType fecToUse = 1;
    if (has_fectouse()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->fectouse());
    }

    // optional int32 redunantPercent = 2;
    if (has_redunantpercent()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->redunantpercent());
    }

    // optional int32 redunantGroupSize = 3;
    if (has_redunantgroupsize()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->redunantgroupsize());
    }

    // optional int32 targetBitrateBps = 4;
    if (has_targetbitratebps()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->targetbitratebps());
    }

    // optional int32 originalTimestamp = 5;
    if (has_originaltimestamp()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->originaltimestamp());
    }

    // optional int32 loopbackTimestamp = 6;
    if (has_loopbacktimestamp()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->loopbacktimestamp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlMsgServer::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CtrlMsgServer*>(&from));
}

void CtrlMsgServer::MergeFrom(const CtrlMsgServer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fectouse()) {
      set_fectouse(from.fectouse());
    }
    if (from.has_redunantpercent()) {
      set_redunantpercent(from.redunantpercent());
    }
    if (from.has_redunantgroupsize()) {
      set_redunantgroupsize(from.redunantgroupsize());
    }
    if (from.has_targetbitratebps()) {
      set_targetbitratebps(from.targetbitratebps());
    }
    if (from.has_originaltimestamp()) {
      set_originaltimestamp(from.originaltimestamp());
    }
    if (from.has_loopbacktimestamp()) {
      set_loopbacktimestamp(from.loopbacktimestamp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CtrlMsgServer::CopyFrom(const CtrlMsgServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlMsgServer::IsInitialized() const {

  return true;
}

void CtrlMsgServer::Swap(CtrlMsgServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlMsgServer::InternalSwap(CtrlMsgServer* other) {
  std::swap(fectouse_, other->fectouse_);
  std::swap(redunantpercent_, other->redunantpercent_);
  std::swap(redunantgroupsize_, other->redunantgroupsize_);
  std::swap(targetbitratebps_, other->targetbitratebps_);
  std::swap(originaltimestamp_, other->originaltimestamp_);
  std::swap(loopbacktimestamp_, other->loopbacktimestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CtrlMsgServer::GetTypeName() const {
  return "YmBwCtrlProto.CtrlMsgServer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlMsgServer

// optional .YmBwCtrlProto.FecType fecToUse = 1;
bool CtrlMsgServer::has_fectouse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlMsgServer::set_has_fectouse() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlMsgServer::clear_has_fectouse() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlMsgServer::clear_fectouse() {
  fectouse_ = 0;
  clear_has_fectouse();
}
 ::YmBwCtrlProto::FecType CtrlMsgServer::fectouse() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgServer.fecToUse)
  return static_cast< ::YmBwCtrlProto::FecType >(fectouse_);
}
 void CtrlMsgServer::set_fectouse(::YmBwCtrlProto::FecType value) {
  assert(::YmBwCtrlProto::FecType_IsValid(value));
  set_has_fectouse();
  fectouse_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgServer.fecToUse)
}

// optional int32 redunantPercent = 2;
bool CtrlMsgServer::has_redunantpercent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlMsgServer::set_has_redunantpercent() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlMsgServer::clear_has_redunantpercent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlMsgServer::clear_redunantpercent() {
  redunantpercent_ = 0;
  clear_has_redunantpercent();
}
 ::youmecommon::protobuf::int32 CtrlMsgServer::redunantpercent() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgServer.redunantPercent)
  return redunantpercent_;
}
 void CtrlMsgServer::set_redunantpercent(::youmecommon::protobuf::int32 value) {
  set_has_redunantpercent();
  redunantpercent_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgServer.redunantPercent)
}

// optional int32 redunantGroupSize = 3;
bool CtrlMsgServer::has_redunantgroupsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlMsgServer::set_has_redunantgroupsize() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlMsgServer::clear_has_redunantgroupsize() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlMsgServer::clear_redunantgroupsize() {
  redunantgroupsize_ = 0;
  clear_has_redunantgroupsize();
}
 ::youmecommon::protobuf::int32 CtrlMsgServer::redunantgroupsize() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgServer.redunantGroupSize)
  return redunantgroupsize_;
}
 void CtrlMsgServer::set_redunantgroupsize(::youmecommon::protobuf::int32 value) {
  set_has_redunantgroupsize();
  redunantgroupsize_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgServer.redunantGroupSize)
}

// optional int32 targetBitrateBps = 4;
bool CtrlMsgServer::has_targetbitratebps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CtrlMsgServer::set_has_targetbitratebps() {
  _has_bits_[0] |= 0x00000008u;
}
void CtrlMsgServer::clear_has_targetbitratebps() {
  _has_bits_[0] &= ~0x00000008u;
}
void CtrlMsgServer::clear_targetbitratebps() {
  targetbitratebps_ = 0;
  clear_has_targetbitratebps();
}
 ::youmecommon::protobuf::int32 CtrlMsgServer::targetbitratebps() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgServer.targetBitrateBps)
  return targetbitratebps_;
}
 void CtrlMsgServer::set_targetbitratebps(::youmecommon::protobuf::int32 value) {
  set_has_targetbitratebps();
  targetbitratebps_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgServer.targetBitrateBps)
}

// optional int32 originalTimestamp = 5;
bool CtrlMsgServer::has_originaltimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CtrlMsgServer::set_has_originaltimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CtrlMsgServer::clear_has_originaltimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CtrlMsgServer::clear_originaltimestamp() {
  originaltimestamp_ = 0;
  clear_has_originaltimestamp();
}
 ::youmecommon::protobuf::int32 CtrlMsgServer::originaltimestamp() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgServer.originalTimestamp)
  return originaltimestamp_;
}
 void CtrlMsgServer::set_originaltimestamp(::youmecommon::protobuf::int32 value) {
  set_has_originaltimestamp();
  originaltimestamp_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgServer.originalTimestamp)
}

// optional int32 loopbackTimestamp = 6;
bool CtrlMsgServer::has_loopbacktimestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CtrlMsgServer::set_has_loopbacktimestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void CtrlMsgServer::clear_has_loopbacktimestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void CtrlMsgServer::clear_loopbacktimestamp() {
  loopbacktimestamp_ = 0;
  clear_has_loopbacktimestamp();
}
 ::youmecommon::protobuf::int32 CtrlMsgServer::loopbacktimestamp() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgServer.loopbackTimestamp)
  return loopbacktimestamp_;
}
 void CtrlMsgServer::set_loopbacktimestamp(::youmecommon::protobuf::int32 value) {
  set_has_loopbacktimestamp();
  loopbacktimestamp_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgServer.loopbackTimestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CtrlMsgClient::kForSessionIdFieldNumber;
const int CtrlMsgClient::kPacketLossRateQ8FieldNumber;
const int CtrlMsgClient::kPacketLossRateAfterFecQ8FieldNumber;
const int CtrlMsgClient::kMaxConsecutiveLostPacketsFieldNumber;
const int CtrlMsgClient::kLoopbackTimestampFieldNumber;
const int CtrlMsgClient::kHighestFecSupportedFieldNumber;
const int CtrlMsgClient::kOriginalTimestampFieldNumber;
#endif  // !_MSC_VER

CtrlMsgClient::CtrlMsgClient()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YmBwCtrlProto.CtrlMsgClient)
}

void CtrlMsgClient::InitAsDefaultInstance() {
}

CtrlMsgClient::CtrlMsgClient(const CtrlMsgClient& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YmBwCtrlProto.CtrlMsgClient)
}

void CtrlMsgClient::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  forsessionid_ = 0;
  packetlossrateq8_ = 0;
  packetlossrateafterfecq8_ = 0;
  maxconsecutivelostpackets_ = 0;
  loopbacktimestamp_ = 0;
  highestfecsupported_ = 0;
  originaltimestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlMsgClient::~CtrlMsgClient() {
  // @@protoc_insertion_point(destructor:YmBwCtrlProto.CtrlMsgClient)
  SharedDtor();
}

void CtrlMsgClient::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CtrlMsgClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CtrlMsgClient& CtrlMsgClient::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BandwidthControl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BandwidthControl_2eproto();
#endif
  return *default_instance_;
}

CtrlMsgClient* CtrlMsgClient::default_instance_ = NULL;

CtrlMsgClient* CtrlMsgClient::New(::youmecommon::protobuf::Arena* arena) const {
  CtrlMsgClient* n = new CtrlMsgClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlMsgClient::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlMsgClient*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(forsessionid_, originaltimestamp_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CtrlMsgClient::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YmBwCtrlProto.CtrlMsgClient)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 forSessionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forsessionid_)));
          set_has_forsessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_packetLossRateQ8;
        break;
      }

      // optional int32 packetLossRateQ8 = 2;
      case 2: {
        if (tag == 16) {
         parse_packetLossRateQ8:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetlossrateq8_)));
          set_has_packetlossrateq8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_packetLossRateAfterFecQ8;
        break;
      }

      // optional int32 packetLossRateAfterFecQ8 = 3;
      case 3: {
        if (tag == 24) {
         parse_packetLossRateAfterFecQ8:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetlossrateafterfecq8_)));
          set_has_packetlossrateafterfecq8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxConsecutiveLostPackets;
        break;
      }

      // optional int32 maxConsecutiveLostPackets = 4;
      case 4: {
        if (tag == 32) {
         parse_maxConsecutiveLostPackets:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconsecutivelostpackets_)));
          set_has_maxconsecutivelostpackets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loopbackTimestamp;
        break;
      }

      // optional int32 loopbackTimestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_loopbackTimestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loopbacktimestamp_)));
          set_has_loopbacktimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_highestFecSupported;
        break;
      }

      // optional .YmBwCtrlProto.FecType highestFecSupported = 6;
      case 6: {
        if (tag == 48) {
         parse_highestFecSupported:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YmBwCtrlProto::FecType_IsValid(value)) {
            set_highestfecsupported(static_cast< ::YmBwCtrlProto::FecType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_originalTimestamp;
        break;
      }

      // optional int32 originalTimestamp = 7;
      case 7: {
        if (tag == 56) {
         parse_originalTimestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originaltimestamp_)));
          set_has_originaltimestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YmBwCtrlProto.CtrlMsgClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YmBwCtrlProto.CtrlMsgClient)
  return false;
#undef DO_
}

void CtrlMsgClient::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YmBwCtrlProto.CtrlMsgClient)
  // optional int32 forSessionId = 1;
  if (has_forsessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->forsessionid(), output);
  }

  // optional int32 packetLossRateQ8 = 2;
  if (has_packetlossrateq8()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->packetlossrateq8(), output);
  }

  // optional int32 packetLossRateAfterFecQ8 = 3;
  if (has_packetlossrateafterfecq8()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->packetlossrateafterfecq8(), output);
  }

  // optional int32 maxConsecutiveLostPackets = 4;
  if (has_maxconsecutivelostpackets()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxconsecutivelostpackets(), output);
  }

  // optional int32 loopbackTimestamp = 5;
  if (has_loopbacktimestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->loopbacktimestamp(), output);
  }

  // optional .YmBwCtrlProto.FecType highestFecSupported = 6;
  if (has_highestfecsupported()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->highestfecsupported(), output);
  }

  // optional int32 originalTimestamp = 7;
  if (has_originaltimestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->originaltimestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YmBwCtrlProto.CtrlMsgClient)
}

int CtrlMsgClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 forSessionId = 1;
    if (has_forsessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->forsessionid());
    }

    // optional int32 packetLossRateQ8 = 2;
    if (has_packetlossrateq8()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->packetlossrateq8());
    }

    // optional int32 packetLossRateAfterFecQ8 = 3;
    if (has_packetlossrateafterfecq8()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->packetlossrateafterfecq8());
    }

    // optional int32 maxConsecutiveLostPackets = 4;
    if (has_maxconsecutivelostpackets()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->maxconsecutivelostpackets());
    }

    // optional int32 loopbackTimestamp = 5;
    if (has_loopbacktimestamp()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->loopbacktimestamp());
    }

    // optional .YmBwCtrlProto.FecType highestFecSupported = 6;
    if (has_highestfecsupported()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->highestfecsupported());
    }

    // optional int32 originalTimestamp = 7;
    if (has_originaltimestamp()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->originaltimestamp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlMsgClient::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CtrlMsgClient*>(&from));
}

void CtrlMsgClient::MergeFrom(const CtrlMsgClient& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_forsessionid()) {
      set_forsessionid(from.forsessionid());
    }
    if (from.has_packetlossrateq8()) {
      set_packetlossrateq8(from.packetlossrateq8());
    }
    if (from.has_packetlossrateafterfecq8()) {
      set_packetlossrateafterfecq8(from.packetlossrateafterfecq8());
    }
    if (from.has_maxconsecutivelostpackets()) {
      set_maxconsecutivelostpackets(from.maxconsecutivelostpackets());
    }
    if (from.has_loopbacktimestamp()) {
      set_loopbacktimestamp(from.loopbacktimestamp());
    }
    if (from.has_highestfecsupported()) {
      set_highestfecsupported(from.highestfecsupported());
    }
    if (from.has_originaltimestamp()) {
      set_originaltimestamp(from.originaltimestamp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CtrlMsgClient::CopyFrom(const CtrlMsgClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlMsgClient::IsInitialized() const {

  return true;
}

void CtrlMsgClient::Swap(CtrlMsgClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlMsgClient::InternalSwap(CtrlMsgClient* other) {
  std::swap(forsessionid_, other->forsessionid_);
  std::swap(packetlossrateq8_, other->packetlossrateq8_);
  std::swap(packetlossrateafterfecq8_, other->packetlossrateafterfecq8_);
  std::swap(maxconsecutivelostpackets_, other->maxconsecutivelostpackets_);
  std::swap(loopbacktimestamp_, other->loopbacktimestamp_);
  std::swap(highestfecsupported_, other->highestfecsupported_);
  std::swap(originaltimestamp_, other->originaltimestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CtrlMsgClient::GetTypeName() const {
  return "YmBwCtrlProto.CtrlMsgClient";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlMsgClient

// optional int32 forSessionId = 1;
bool CtrlMsgClient::has_forsessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlMsgClient::set_has_forsessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlMsgClient::clear_has_forsessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlMsgClient::clear_forsessionid() {
  forsessionid_ = 0;
  clear_has_forsessionid();
}
 ::youmecommon::protobuf::int32 CtrlMsgClient::forsessionid() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.forSessionId)
  return forsessionid_;
}
 void CtrlMsgClient::set_forsessionid(::youmecommon::protobuf::int32 value) {
  set_has_forsessionid();
  forsessionid_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.forSessionId)
}

// optional int32 packetLossRateQ8 = 2;
bool CtrlMsgClient::has_packetlossrateq8() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlMsgClient::set_has_packetlossrateq8() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlMsgClient::clear_has_packetlossrateq8() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlMsgClient::clear_packetlossrateq8() {
  packetlossrateq8_ = 0;
  clear_has_packetlossrateq8();
}
 ::youmecommon::protobuf::int32 CtrlMsgClient::packetlossrateq8() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.packetLossRateQ8)
  return packetlossrateq8_;
}
 void CtrlMsgClient::set_packetlossrateq8(::youmecommon::protobuf::int32 value) {
  set_has_packetlossrateq8();
  packetlossrateq8_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.packetLossRateQ8)
}

// optional int32 packetLossRateAfterFecQ8 = 3;
bool CtrlMsgClient::has_packetlossrateafterfecq8() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlMsgClient::set_has_packetlossrateafterfecq8() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlMsgClient::clear_has_packetlossrateafterfecq8() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlMsgClient::clear_packetlossrateafterfecq8() {
  packetlossrateafterfecq8_ = 0;
  clear_has_packetlossrateafterfecq8();
}
 ::youmecommon::protobuf::int32 CtrlMsgClient::packetlossrateafterfecq8() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.packetLossRateAfterFecQ8)
  return packetlossrateafterfecq8_;
}
 void CtrlMsgClient::set_packetlossrateafterfecq8(::youmecommon::protobuf::int32 value) {
  set_has_packetlossrateafterfecq8();
  packetlossrateafterfecq8_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.packetLossRateAfterFecQ8)
}

// optional int32 maxConsecutiveLostPackets = 4;
bool CtrlMsgClient::has_maxconsecutivelostpackets() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CtrlMsgClient::set_has_maxconsecutivelostpackets() {
  _has_bits_[0] |= 0x00000008u;
}
void CtrlMsgClient::clear_has_maxconsecutivelostpackets() {
  _has_bits_[0] &= ~0x00000008u;
}
void CtrlMsgClient::clear_maxconsecutivelostpackets() {
  maxconsecutivelostpackets_ = 0;
  clear_has_maxconsecutivelostpackets();
}
 ::youmecommon::protobuf::int32 CtrlMsgClient::maxconsecutivelostpackets() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.maxConsecutiveLostPackets)
  return maxconsecutivelostpackets_;
}
 void CtrlMsgClient::set_maxconsecutivelostpackets(::youmecommon::protobuf::int32 value) {
  set_has_maxconsecutivelostpackets();
  maxconsecutivelostpackets_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.maxConsecutiveLostPackets)
}

// optional int32 loopbackTimestamp = 5;
bool CtrlMsgClient::has_loopbacktimestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CtrlMsgClient::set_has_loopbacktimestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CtrlMsgClient::clear_has_loopbacktimestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CtrlMsgClient::clear_loopbacktimestamp() {
  loopbacktimestamp_ = 0;
  clear_has_loopbacktimestamp();
}
 ::youmecommon::protobuf::int32 CtrlMsgClient::loopbacktimestamp() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.loopbackTimestamp)
  return loopbacktimestamp_;
}
 void CtrlMsgClient::set_loopbacktimestamp(::youmecommon::protobuf::int32 value) {
  set_has_loopbacktimestamp();
  loopbacktimestamp_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.loopbackTimestamp)
}

// optional .YmBwCtrlProto.FecType highestFecSupported = 6;
bool CtrlMsgClient::has_highestfecsupported() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CtrlMsgClient::set_has_highestfecsupported() {
  _has_bits_[0] |= 0x00000020u;
}
void CtrlMsgClient::clear_has_highestfecsupported() {
  _has_bits_[0] &= ~0x00000020u;
}
void CtrlMsgClient::clear_highestfecsupported() {
  highestfecsupported_ = 0;
  clear_has_highestfecsupported();
}
 ::YmBwCtrlProto::FecType CtrlMsgClient::highestfecsupported() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.highestFecSupported)
  return static_cast< ::YmBwCtrlProto::FecType >(highestfecsupported_);
}
 void CtrlMsgClient::set_highestfecsupported(::YmBwCtrlProto::FecType value) {
  assert(::YmBwCtrlProto::FecType_IsValid(value));
  set_has_highestfecsupported();
  highestfecsupported_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.highestFecSupported)
}

// optional int32 originalTimestamp = 7;
bool CtrlMsgClient::has_originaltimestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CtrlMsgClient::set_has_originaltimestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void CtrlMsgClient::clear_has_originaltimestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void CtrlMsgClient::clear_originaltimestamp() {
  originaltimestamp_ = 0;
  clear_has_originaltimestamp();
}
 ::youmecommon::protobuf::int32 CtrlMsgClient::originaltimestamp() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgClient.originalTimestamp)
  return originaltimestamp_;
}
 void CtrlMsgClient::set_originaltimestamp(::youmecommon::protobuf::int32 value) {
  set_has_originaltimestamp();
  originaltimestamp_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgClient.originalTimestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CtrlMsgMain::kMsgTypeFieldNumber;
const int CtrlMsgMain::kMsgVersionFieldNumber;
const int CtrlMsgMain::kMsgServerFieldNumber;
const int CtrlMsgMain::kMsgClientFieldNumber;
#endif  // !_MSC_VER

CtrlMsgMain::CtrlMsgMain()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YmBwCtrlProto.CtrlMsgMain)
}

void CtrlMsgMain::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msgserver_ = const_cast< ::YmBwCtrlProto::CtrlMsgServer*>(
      ::YmBwCtrlProto::CtrlMsgServer::internal_default_instance());
#else
  msgserver_ = const_cast< ::YmBwCtrlProto::CtrlMsgServer*>(&::YmBwCtrlProto::CtrlMsgServer::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msgclient_ = const_cast< ::YmBwCtrlProto::CtrlMsgClient*>(
      ::YmBwCtrlProto::CtrlMsgClient::internal_default_instance());
#else
  msgclient_ = const_cast< ::YmBwCtrlProto::CtrlMsgClient*>(&::YmBwCtrlProto::CtrlMsgClient::default_instance());
#endif
}

CtrlMsgMain::CtrlMsgMain(const CtrlMsgMain& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YmBwCtrlProto.CtrlMsgMain)
}

void CtrlMsgMain::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  msgversion_ = 0u;
  msgserver_ = NULL;
  msgclient_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CtrlMsgMain::~CtrlMsgMain() {
  // @@protoc_insertion_point(destructor:YmBwCtrlProto.CtrlMsgMain)
  SharedDtor();
}

void CtrlMsgMain::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msgserver_;
    delete msgclient_;
  }
}

void CtrlMsgMain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CtrlMsgMain& CtrlMsgMain::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BandwidthControl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BandwidthControl_2eproto();
#endif
  return *default_instance_;
}

CtrlMsgMain* CtrlMsgMain::default_instance_ = NULL;

CtrlMsgMain* CtrlMsgMain::New(::youmecommon::protobuf::Arena* arena) const {
  CtrlMsgMain* n = new CtrlMsgMain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CtrlMsgMain::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CtrlMsgMain*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(msgtype_, msgversion_);
    if (has_msgserver()) {
      if (msgserver_ != NULL) msgserver_->::YmBwCtrlProto::CtrlMsgServer::Clear();
    }
    if (has_msgclient()) {
      if (msgclient_ != NULL) msgclient_->::YmBwCtrlProto::CtrlMsgClient::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CtrlMsgMain::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YmBwCtrlProto.CtrlMsgMain)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YmBwCtrlProto.CtrlMsgType msgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YmBwCtrlProto::CtrlMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::YmBwCtrlProto::CtrlMsgType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msgVersion;
        break;
      }

      // required uint32 msgVersion = 2;
      case 2: {
        if (tag == 16) {
         parse_msgVersion:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgversion_)));
          set_has_msgversion();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgServer;
        break;
      }

      // optional .YmBwCtrlProto.CtrlMsgServer msgServer = 3;
      case 3: {
        if (tag == 26) {
         parse_msgServer:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgserver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgClient;
        break;
      }

      // optional .YmBwCtrlProto.CtrlMsgClient msgClient = 4;
      case 4: {
        if (tag == 34) {
         parse_msgClient:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgclient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YmBwCtrlProto.CtrlMsgMain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YmBwCtrlProto.CtrlMsgMain)
  return false;
#undef DO_
}

void CtrlMsgMain::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YmBwCtrlProto.CtrlMsgMain)
  // required .YmBwCtrlProto.CtrlMsgType msgType = 1;
  if (has_msgtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // required uint32 msgVersion = 2;
  if (has_msgversion()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(2, this->msgversion(), output);
  }

  // optional .YmBwCtrlProto.CtrlMsgServer msgServer = 3;
  if (has_msgserver()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->msgserver_, output);
  }

  // optional .YmBwCtrlProto.CtrlMsgClient msgClient = 4;
  if (has_msgclient()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->msgclient_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YmBwCtrlProto.CtrlMsgMain)
}

int CtrlMsgMain::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_msgtype()) {
    // required .YmBwCtrlProto.CtrlMsgType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  if (has_msgversion()) {
    // required uint32 msgVersion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgversion());
  }

  return total_size;
}
int CtrlMsgMain::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YmBwCtrlProto.CtrlMsgType msgType = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

    // required uint32 msgVersion = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .YmBwCtrlProto.CtrlMsgServer msgServer = 3;
    if (has_msgserver()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msgserver_);
    }

    // optional .YmBwCtrlProto.CtrlMsgClient msgClient = 4;
    if (has_msgclient()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->msgclient_);
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CtrlMsgMain::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const CtrlMsgMain*>(&from));
}

void CtrlMsgMain::MergeFrom(const CtrlMsgMain& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgversion()) {
      set_msgversion(from.msgversion());
    }
    if (from.has_msgserver()) {
      mutable_msgserver()->::YmBwCtrlProto::CtrlMsgServer::MergeFrom(from.msgserver());
    }
    if (from.has_msgclient()) {
      mutable_msgclient()->::YmBwCtrlProto::CtrlMsgClient::MergeFrom(from.msgclient());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void CtrlMsgMain::CopyFrom(const CtrlMsgMain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CtrlMsgMain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CtrlMsgMain::Swap(CtrlMsgMain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CtrlMsgMain::InternalSwap(CtrlMsgMain* other) {
  std::swap(msgtype_, other->msgtype_);
  std::swap(msgversion_, other->msgversion_);
  std::swap(msgserver_, other->msgserver_);
  std::swap(msgclient_, other->msgclient_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CtrlMsgMain::GetTypeName() const {
  return "YmBwCtrlProto.CtrlMsgMain";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CtrlMsgMain

// required .YmBwCtrlProto.CtrlMsgType msgType = 1;
bool CtrlMsgMain::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CtrlMsgMain::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
void CtrlMsgMain::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
void CtrlMsgMain::clear_msgtype() {
  msgtype_ = 0;
  clear_has_msgtype();
}
 ::YmBwCtrlProto::CtrlMsgType CtrlMsgMain::msgtype() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgMain.msgType)
  return static_cast< ::YmBwCtrlProto::CtrlMsgType >(msgtype_);
}
 void CtrlMsgMain::set_msgtype(::YmBwCtrlProto::CtrlMsgType value) {
  assert(::YmBwCtrlProto::CtrlMsgType_IsValid(value));
  set_has_msgtype();
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgMain.msgType)
}

// required uint32 msgVersion = 2;
bool CtrlMsgMain::has_msgversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CtrlMsgMain::set_has_msgversion() {
  _has_bits_[0] |= 0x00000002u;
}
void CtrlMsgMain::clear_has_msgversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void CtrlMsgMain::clear_msgversion() {
  msgversion_ = 0u;
  clear_has_msgversion();
}
 ::youmecommon::protobuf::uint32 CtrlMsgMain::msgversion() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgMain.msgVersion)
  return msgversion_;
}
 void CtrlMsgMain::set_msgversion(::youmecommon::protobuf::uint32 value) {
  set_has_msgversion();
  msgversion_ = value;
  // @@protoc_insertion_point(field_set:YmBwCtrlProto.CtrlMsgMain.msgVersion)
}

// optional .YmBwCtrlProto.CtrlMsgServer msgServer = 3;
bool CtrlMsgMain::has_msgserver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CtrlMsgMain::set_has_msgserver() {
  _has_bits_[0] |= 0x00000004u;
}
void CtrlMsgMain::clear_has_msgserver() {
  _has_bits_[0] &= ~0x00000004u;
}
void CtrlMsgMain::clear_msgserver() {
  if (msgserver_ != NULL) msgserver_->::YmBwCtrlProto::CtrlMsgServer::Clear();
  clear_has_msgserver();
}
const ::YmBwCtrlProto::CtrlMsgServer& CtrlMsgMain::msgserver() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgMain.msgServer)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msgserver_ != NULL ? *msgserver_ : *default_instance().msgserver_;
#else
  return msgserver_ != NULL ? *msgserver_ : *default_instance_->msgserver_;
#endif
}
::YmBwCtrlProto::CtrlMsgServer* CtrlMsgMain::mutable_msgserver() {
  set_has_msgserver();
  if (msgserver_ == NULL) {
    msgserver_ = new ::YmBwCtrlProto::CtrlMsgServer;
  }
  // @@protoc_insertion_point(field_mutable:YmBwCtrlProto.CtrlMsgMain.msgServer)
  return msgserver_;
}
::YmBwCtrlProto::CtrlMsgServer* CtrlMsgMain::release_msgserver() {
  clear_has_msgserver();
  ::YmBwCtrlProto::CtrlMsgServer* temp = msgserver_;
  msgserver_ = NULL;
  return temp;
}
void CtrlMsgMain::set_allocated_msgserver(::YmBwCtrlProto::CtrlMsgServer* msgserver) {
  delete msgserver_;
  msgserver_ = msgserver;
  if (msgserver) {
    set_has_msgserver();
  } else {
    clear_has_msgserver();
  }
  // @@protoc_insertion_point(field_set_allocated:YmBwCtrlProto.CtrlMsgMain.msgServer)
}

// optional .YmBwCtrlProto.CtrlMsgClient msgClient = 4;
bool CtrlMsgMain::has_msgclient() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CtrlMsgMain::set_has_msgclient() {
  _has_bits_[0] |= 0x00000008u;
}
void CtrlMsgMain::clear_has_msgclient() {
  _has_bits_[0] &= ~0x00000008u;
}
void CtrlMsgMain::clear_msgclient() {
  if (msgclient_ != NULL) msgclient_->::YmBwCtrlProto::CtrlMsgClient::Clear();
  clear_has_msgclient();
}
const ::YmBwCtrlProto::CtrlMsgClient& CtrlMsgMain::msgclient() const {
  // @@protoc_insertion_point(field_get:YmBwCtrlProto.CtrlMsgMain.msgClient)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return msgclient_ != NULL ? *msgclient_ : *default_instance().msgclient_;
#else
  return msgclient_ != NULL ? *msgclient_ : *default_instance_->msgclient_;
#endif
}
::YmBwCtrlProto::CtrlMsgClient* CtrlMsgMain::mutable_msgclient() {
  set_has_msgclient();
  if (msgclient_ == NULL) {
    msgclient_ = new ::YmBwCtrlProto::CtrlMsgClient;
  }
  // @@protoc_insertion_point(field_mutable:YmBwCtrlProto.CtrlMsgMain.msgClient)
  return msgclient_;
}
::YmBwCtrlProto::CtrlMsgClient* CtrlMsgMain::release_msgclient() {
  clear_has_msgclient();
  ::YmBwCtrlProto::CtrlMsgClient* temp = msgclient_;
  msgclient_ = NULL;
  return temp;
}
void CtrlMsgMain::set_allocated_msgclient(::YmBwCtrlProto::CtrlMsgClient* msgclient) {
  delete msgclient_;
  msgclient_ = msgclient;
  if (msgclient) {
    set_has_msgclient();
  } else {
    clear_has_msgclient();
  }
  // @@protoc_insertion_point(field_set_allocated:YmBwCtrlProto.CtrlMsgMain.msgClient)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YmBwCtrlProto

// @@protoc_insertion_point(global_scope)
