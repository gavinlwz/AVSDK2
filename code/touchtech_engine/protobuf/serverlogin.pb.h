// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverlogin.proto

#ifndef PROTOBUF_serverlogin_2eproto__INCLUDED
#define PROTOBUF_serverlogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace YouMeProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_serverlogin_2eproto();
void protobuf_AssignDesc_serverlogin_2eproto();
void protobuf_ShutdownFile_serverlogin_2eproto();

class Bridge;
class JoinLeaveUser;
class LostPacketStatNotify;
class Serveraddr;
class StreamProxyInfo;
class YouMeVoice_Command_AVInput_Notify;
class YouMeVoice_Command_AVInput_Status_Req;
class YouMeVoice_Command_AVInput_Status_Rsq;
class YouMeVoice_Command_AcceptRequest;
class YouMeVoice_Command_AcceptResponse;
class YouMeVoice_Command_BussReport_Req;
class YouMeVoice_Command_BussReport_Rsp;
class YouMeVoice_Command_CameraNotifyRequest;
class YouMeVoice_Command_CameraStatusChangeRequest;
class YouMeVoice_Command_CameraStatusChangeResponse;
class YouMeVoice_Command_ChannelUserJoinLeaveNotify;
class YouMeVoice_Command_ChannelUserList_Request;
class YouMeVoice_Command_ChannelUserList_Response;
class YouMeVoice_Command_CommonStatus;
class YouMeVoice_Command_CommonStatusServer;
class YouMeVoice_Command_Fight4MicDeinitRequest;
class YouMeVoice_Command_Fight4MicDeinitResponse;
class YouMeVoice_Command_Fight4MicInitRequest;
class YouMeVoice_Command_Fight4MicInitResponse;
class YouMeVoice_Command_Fight4MicNotifyRequest;
class YouMeVoice_Command_Fight4MicRequest;
class YouMeVoice_Command_Fight4MicResponse;
class YouMeVoice_Command_Heart;
class YouMeVoice_Command_HeartResponse;
class YouMeVoice_Command_InviteByeRequest;
class YouMeVoice_Command_InviteByeResponse;
class YouMeVoice_Command_InviteInitRequest;
class YouMeVoice_Command_InviteInitResponse;
class YouMeVoice_Command_InviteNotifyRequest;
class YouMeVoice_Command_InviteRequest;
class YouMeVoice_Command_InviteResponse;
class YouMeVoice_Command_JoinConference;
class YouMeVoice_Command_JoinConferenceResponse;
class YouMeVoice_Command_JoinConferenceResponse_Speaker;
class YouMeVoice_Command_JoinRoomRequest;
class YouMeVoice_Command_JoinRoomResponse;
class YouMeVoice_Command_KickingNotify;
class YouMeVoice_Command_KickingRequest;
class YouMeVoice_Command_KickingResponse;
class YouMeVoice_Command_Kickout;
class YouMeVoice_Command_LeaveConference;
class YouMeVoice_Command_LeaveConferenceResponse;
class YouMeVoice_Command_LeaveRoomRequest;
class YouMeVoice_Command_LeaveRoomResponse;
class YouMeVoice_Command_MaskVideoByUserIdRequest;
class YouMeVoice_Command_MaskVideoByUserIdResponse;
class YouMeVoice_Command_MaskVideoNotifyRequest;
class YouMeVoice_Command_Media_ctl_req;
class YouMeVoice_Command_Media_ctl_rsp;
class YouMeVoice_Command_MessageNotify;
class YouMeVoice_Command_MicStatus;
class YouMeVoice_Command_MicStatusServer;
class YouMeVoice_Command_Query_User_Video_Info_Req;
class YouMeVoice_Command_Query_User_Video_Info_Rsp;
class YouMeVoice_Command_Recive_Members;
class YouMeVoice_Command_ReleaseMicRequest;
class YouMeVoice_Command_ReleaseMicResponse;
class YouMeVoice_Command_SendMessageRequest;
class YouMeVoice_Command_SendMessageResponse;
class YouMeVoice_Command_Session2UserIdRequest;
class YouMeVoice_Command_Session2UserIdResponse;
class YouMeVoice_Command_Session2UserIdResponse_Speaker;
class YouMeVoice_Command_Set_User_Video_Info_Notify;
class YouMeVoice_Command_Set_User_Video_Info_Req;
class YouMeVoice_Command_Set_User_Video_Info_Rsp;
class YouMeVoice_Command_SpeakToRoomRequest;
class YouMeVoice_Command_SpeakToRoomResponse;
class YouMeVoice_Media_Info;
class YouMeVoice_Media_ctl_Header;
class YouMeVoice_UserInfo;
class YouMeVoice_UserVedioInfo;
class YouMeVoice_Video_AddPushMixUser_Req;
class YouMeVoice_Video_AddPushMixUser_Rsp;
class YouMeVoice_Video_ClearPushMix_Req;
class YouMeVoice_Video_ClearPushMix_Rsp;
class YouMeVoice_Video_DelPushMixUser_Req;
class YouMeVoice_Video_DelPushMixUser_Rsp;
class YouMeVoice_Video_OtherSetPushMix_Notify;
class YouMeVoice_Video_RemovePushSingle_Req;
class YouMeVoice_Video_RemovePushSingle_Rsp;
class YouMeVoice_Video_SetPushMix_Req;
class YouMeVoice_Video_SetPushMix_Rsp;
class YouMeVoice_Video_SetPushSingle_Req;
class YouMeVoice_Video_SetPushSingle_Rsp;
class YouMeVoice_Video_info;

enum FIGHT_MIC_ERROR_CODE {
  FIGHT_MIC_SUCCESS = 0,
  FIGHT_MIC_FULL = 1,
  FIGHT_MIC_END = 2,
  FIGHT_MIC_QUEUE = 98,
  FIGHT_MIC_UNKNOWN = 99
};
bool FIGHT_MIC_ERROR_CODE_IsValid(int value);
const FIGHT_MIC_ERROR_CODE FIGHT_MIC_ERROR_CODE_MIN = FIGHT_MIC_SUCCESS;
const FIGHT_MIC_ERROR_CODE FIGHT_MIC_ERROR_CODE_MAX = FIGHT_MIC_UNKNOWN;
const int FIGHT_MIC_ERROR_CODE_ARRAYSIZE = FIGHT_MIC_ERROR_CODE_MAX + 1;

enum FIGHT_MIC_EVENT_TYPE {
  FIGHT_TYPE_INIT_NOTIFY = 1,
  FIGHT_TYPE_DEINIT_NOTIFY = 2,
  FIGHT_TYPE_GET_MIC_NOTIFY = 3,
  FIGHT_TYPE_RELEASE_MIC_NOTIFY = 4
};
bool FIGHT_MIC_EVENT_TYPE_IsValid(int value);
const FIGHT_MIC_EVENT_TYPE FIGHT_MIC_EVENT_TYPE_MIN = FIGHT_TYPE_INIT_NOTIFY;
const FIGHT_MIC_EVENT_TYPE FIGHT_MIC_EVENT_TYPE_MAX = FIGHT_TYPE_RELEASE_MIC_NOTIFY;
const int FIGHT_MIC_EVENT_TYPE_ARRAYSIZE = FIGHT_MIC_EVENT_TYPE_MAX + 1;

enum INVITE_ERROR_CODE {
  INVITE_SUCCESS = 0,
  INVITE_USER_NOT_EXIST = 1,
  INVITE_USER_OFFLINE = 2,
  INVITE_USER_REJECT = 3,
  INVITE_TIME_OUT = 4,
  INVITE_UNKNOWN_ERROR = 99
};
bool INVITE_ERROR_CODE_IsValid(int value);
const INVITE_ERROR_CODE INVITE_ERROR_CODE_MIN = INVITE_SUCCESS;
const INVITE_ERROR_CODE INVITE_ERROR_CODE_MAX = INVITE_UNKNOWN_ERROR;
const int INVITE_ERROR_CODE_ARRAYSIZE = INVITE_ERROR_CODE_MAX + 1;

enum INVITE_EVENT_TYPE {
  INVITE_TYPE_REQUEST = 1,
  INVITE_TYPE_RESPONSE = 2,
  INVITE_TYPE_CANCEL = 3,
  INVITE_TYPE_SUCCESS = 4,
  INVITE_TYPE_END = 5
};
bool INVITE_EVENT_TYPE_IsValid(int value);
const INVITE_EVENT_TYPE INVITE_EVENT_TYPE_MIN = INVITE_TYPE_REQUEST;
const INVITE_EVENT_TYPE INVITE_EVENT_TYPE_MAX = INVITE_TYPE_END;
const int INVITE_EVENT_TYPE_ARRAYSIZE = INVITE_EVENT_TYPE_MAX + 1;

enum KICK_CODE {
  KICK_BY_ADMIN = 1000,
  KICK_BY_RELOGIN = 1001
};
bool KICK_CODE_IsValid(int value);
const KICK_CODE KICK_CODE_MIN = KICK_BY_ADMIN;
const KICK_CODE KICK_CODE_MAX = KICK_BY_RELOGIN;
const int KICK_CODE_ARRAYSIZE = KICK_CODE_MAX + 1;

enum MEDIA_CTL {
  OPEN_MEDIA_STAT_NOTIFY = 1,
  CLOSE_MEDIA_STAT_NOTIFY = 2,
  MEDIA_STAT_NOTIFY = 3
};
bool MEDIA_CTL_IsValid(int value);
const MEDIA_CTL MEDIA_CTL_MIN = OPEN_MEDIA_STAT_NOTIFY;
const MEDIA_CTL MEDIA_CTL_MAX = MEDIA_STAT_NOTIFY;
const int MEDIA_CTL_ARRAYSIZE = MEDIA_CTL_MAX + 1;

// ===================================================================

class Bridge : public ::youmecommon::protobuf::MessageLite {
 public:
  Bridge();
  virtual ~Bridge();

  Bridge(const Bridge& from);

  inline Bridge& operator=(const Bridge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Bridge& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Bridge* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Bridge* other);

  // implements Message ----------------------------------------------

  inline Bridge* New() const { return New(NULL); }

  Bridge* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const Bridge& from);
  void MergeFrom(const Bridge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bridge* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string bridgeid = 1;
  bool has_bridgeid() const;
  void clear_bridgeid();
  static const int kBridgeidFieldNumber = 1;
  const ::std::string& bridgeid() const;
  void set_bridgeid(const ::std::string& value);
  void set_bridgeid(const char* value);
  void set_bridgeid(const char* value, size_t size);
  ::std::string* mutable_bridgeid();
  ::std::string* release_bridgeid();
  void set_allocated_bridgeid(::std::string* bridgeid);

  // optional .YouMeProtocol.PacketHead head = 2;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 2;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::youmecommon::protobuf::int32 mode() const;
  void set_mode(::youmecommon::protobuf::int32 value);

  // optional string area = 4;
  bool has_area() const;
  void clear_area();
  static const int kAreaFieldNumber = 4;
  const ::std::string& area() const;
  void set_area(const ::std::string& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  ::std::string* mutable_area();
  ::std::string* release_area();
  void set_allocated_area(::std::string* area);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.Bridge)
 private:
  inline void set_has_bridgeid();
  inline void clear_has_bridgeid();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_area();
  inline void clear_has_area();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr bridgeid_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr area_;
  ::youmecommon::protobuf::int32 mode_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static Bridge* default_instance_;
};
// -------------------------------------------------------------------

class Serveraddr : public ::youmecommon::protobuf::MessageLite {
 public:
  Serveraddr();
  virtual ~Serveraddr();

  Serveraddr(const Serveraddr& from);

  inline Serveraddr& operator=(const Serveraddr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const Serveraddr& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Serveraddr* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Serveraddr* other);

  // implements Message ----------------------------------------------

  inline Serveraddr* New() const { return New(NULL); }

  Serveraddr* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const Serveraddr& from);
  void MergeFrom(const Serveraddr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Serveraddr* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::youmecommon::protobuf::int32 port() const;
  void set_port(::youmecommon::protobuf::int32 value);

  // optional int32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // optional int32 timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  ::youmecommon::protobuf::int32 timeout() const;
  void set_timeout(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.Serveraddr)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr ip_;
  ::youmecommon::protobuf::int32 port_;
  ::youmecommon::protobuf::int32 status_;
  ::youmecommon::protobuf::int32 timeout_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static Serveraddr* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_JoinConference : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_JoinConference();
  virtual ~YouMeVoice_Command_JoinConference();

  YouMeVoice_Command_JoinConference(const YouMeVoice_Command_JoinConference& from);

  inline YouMeVoice_Command_JoinConference& operator=(const YouMeVoice_Command_JoinConference& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_JoinConference& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_JoinConference* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_JoinConference* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_JoinConference* New() const { return New(NULL); }

  YouMeVoice_Command_JoinConference* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_JoinConference& from);
  void MergeFrom(const YouMeVoice_Command_JoinConference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_JoinConference* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required string roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional int32 capturerate = 3;
  bool has_capturerate() const;
  void clear_capturerate();
  static const int kCapturerateFieldNumber = 3;
  ::youmecommon::protobuf::int32 capturerate() const;
  void set_capturerate(::youmecommon::protobuf::int32 value);

  // optional int32 encodecomplex = 4;
  bool has_encodecomplex() const;
  void clear_encodecomplex();
  static const int kEncodecomplexFieldNumber = 4;
  ::youmecommon::protobuf::int32 encodecomplex() const;
  void set_encodecomplex(::youmecommon::protobuf::int32 value);

  // optional bool enablevbr = 5;
  bool has_enablevbr() const;
  void clear_enablevbr();
  static const int kEnablevbrFieldNumber = 5;
  bool enablevbr() const;
  void set_enablevbr(bool value);

  // optional int32 maxbandlimited = 6;
  bool has_maxbandlimited() const;
  void clear_maxbandlimited();
  static const int kMaxbandlimitedFieldNumber = 6;
  ::youmecommon::protobuf::int32 maxbandlimited() const;
  void set_maxbandlimited(::youmecommon::protobuf::int32 value);

  // optional bool interbandfec = 7;
  bool has_interbandfec() const;
  void clear_interbandfec();
  static const int kInterbandfecFieldNumber = 7;
  bool interbandfec() const;
  void set_interbandfec(bool value);

  // optional bool outbandfec = 8;
  bool has_outbandfec() const;
  void clear_outbandfec();
  static const int kOutbandfecFieldNumber = 8;
  bool outbandfec() const;
  void set_outbandfec(bool value);

  // optional int32 feclost = 9;
  bool has_feclost() const;
  void clear_feclost();
  static const int kFeclostFieldNumber = 9;
  ::youmecommon::protobuf::int32 feclost() const;
  void set_feclost(::youmecommon::protobuf::int32 value);

  // optional bool enabledtx = 10;
  bool has_enabledtx() const;
  void clear_enabledtx();
  static const int kEnabledtxFieldNumber = 10;
  bool enabledtx() const;
  void set_enabledtx(bool value);

  // optional string userid = 11;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 11;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional bool needUserList = 12;
  bool has_needuserlist() const;
  void clear_needuserlist();
  static const int kNeedUserListFieldNumber = 12;
  bool needuserlist() const;
  void set_needuserlist(bool value);

  // optional string token = 13;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 13;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // optional bool check_room_exist = 14 [default = false];
  bool has_check_room_exist() const;
  void clear_check_room_exist();
  static const int kCheckRoomExistFieldNumber = 14;
  bool check_room_exist() const;
  void set_check_room_exist(bool value);

  // optional bool av_notify = 15;
  bool has_av_notify() const;
  void clear_av_notify();
  static const int kAvNotifyFieldNumber = 15;
  bool av_notify() const;
  void set_av_notify(bool value);

  // optional .YouMeProtocol.YouMeUserRole user_role = 16;
  bool has_user_role() const;
  void clear_user_role();
  static const int kUserRoleFieldNumber = 16;
  ::YouMeProtocol::YouMeUserRole user_role() const;
  void set_user_role(::YouMeProtocol::YouMeUserRole value);

  // optional int32 source = 17;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 17;
  ::youmecommon::protobuf::int32 source() const;
  void set_source(::youmecommon::protobuf::int32 value);

  // optional bool auto_recive = 18 [default = true];
  bool has_auto_recive() const;
  void clear_auto_recive();
  static const int kAutoReciveFieldNumber = 18;
  bool auto_recive() const;
  void set_auto_recive(bool value);

  // optional uint32 timestamp = 21;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 21;
  ::youmecommon::protobuf::uint32 timestamp() const;
  void set_timestamp(::youmecommon::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_JoinConference)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_capturerate();
  inline void clear_has_capturerate();
  inline void set_has_encodecomplex();
  inline void clear_has_encodecomplex();
  inline void set_has_enablevbr();
  inline void clear_has_enablevbr();
  inline void set_has_maxbandlimited();
  inline void clear_has_maxbandlimited();
  inline void set_has_interbandfec();
  inline void clear_has_interbandfec();
  inline void set_has_outbandfec();
  inline void clear_has_outbandfec();
  inline void set_has_feclost();
  inline void clear_has_feclost();
  inline void set_has_enabledtx();
  inline void clear_has_enabledtx();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_needuserlist();
  inline void clear_has_needuserlist();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_check_room_exist();
  inline void clear_has_check_room_exist();
  inline void set_has_av_notify();
  inline void clear_has_av_notify();
  inline void set_has_user_role();
  inline void clear_has_user_role();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_auto_recive();
  inline void clear_has_auto_recive();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 capturerate_;
  ::youmecommon::protobuf::int32 encodecomplex_;
  ::youmecommon::protobuf::int32 maxbandlimited_;
  bool enablevbr_;
  bool interbandfec_;
  bool outbandfec_;
  bool enabledtx_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr token_;
  ::youmecommon::protobuf::int32 feclost_;
  bool needuserlist_;
  bool check_room_exist_;
  bool av_notify_;
  bool auto_recive_;
  int user_role_;
  ::youmecommon::protobuf::int32 source_;
  ::youmecommon::protobuf::uint32 timestamp_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_JoinConference* default_instance_;
};
// -------------------------------------------------------------------

class StreamProxyInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  StreamProxyInfo();
  virtual ~StreamProxyInfo();

  StreamProxyInfo(const StreamProxyInfo& from);

  inline StreamProxyInfo& operator=(const StreamProxyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const StreamProxyInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const StreamProxyInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(StreamProxyInfo* other);

  // implements Message ----------------------------------------------

  inline StreamProxyInfo* New() const { return New(NULL); }

  StreamProxyInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const StreamProxyInfo& from);
  void MergeFrom(const StreamProxyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamProxyInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::youmecommon::protobuf::uint32 port() const;
  void set_port(::youmecommon::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.StreamProxyInfo)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr ip_;
  ::youmecommon::protobuf::uint32 port_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static StreamProxyInfo* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_JoinConferenceResponse_Speaker : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_JoinConferenceResponse_Speaker();
  virtual ~YouMeVoice_Command_JoinConferenceResponse_Speaker();

  YouMeVoice_Command_JoinConferenceResponse_Speaker(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from);

  inline YouMeVoice_Command_JoinConferenceResponse_Speaker& operator=(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_JoinConferenceResponse_Speaker& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_JoinConferenceResponse_Speaker* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_JoinConferenceResponse_Speaker* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_JoinConferenceResponse_Speaker* New() const { return New(NULL); }

  YouMeVoice_Command_JoinConferenceResponse_Speaker* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from);
  void MergeFrom(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_JoinConferenceResponse_Speaker* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sessionid = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_JoinConferenceResponse_Speaker* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_JoinConferenceResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_JoinConferenceResponse();
  virtual ~YouMeVoice_Command_JoinConferenceResponse();

  YouMeVoice_Command_JoinConferenceResponse(const YouMeVoice_Command_JoinConferenceResponse& from);

  inline YouMeVoice_Command_JoinConferenceResponse& operator=(const YouMeVoice_Command_JoinConferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_JoinConferenceResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_JoinConferenceResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_JoinConferenceResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_JoinConferenceResponse* New() const { return New(NULL); }

  YouMeVoice_Command_JoinConferenceResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_JoinConferenceResponse& from);
  void MergeFrom(const YouMeVoice_Command_JoinConferenceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_JoinConferenceResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef YouMeVoice_Command_JoinConferenceResponse_Speaker Speaker;

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 udpport = 2;
  bool has_udpport() const;
  void clear_udpport();
  static const int kUdpportFieldNumber = 2;
  ::youmecommon::protobuf::int32 udpport() const;
  void set_udpport(::youmecommon::protobuf::int32 value);

  // required int32 sessionid = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional int32 timeout = 4;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  ::youmecommon::protobuf::int32 timeout() const;
  void set_timeout(::youmecommon::protobuf::int32 value);

  // optional int32 media_ctl_port = 5;
  bool has_media_ctl_port() const;
  void clear_media_ctl_port();
  static const int kMediaCtlPortFieldNumber = 5;
  ::youmecommon::protobuf::int32 media_ctl_port() const;
  void set_media_ctl_port(::youmecommon::protobuf::int32 value);

  // optional .YouMeProtocol.StreamProxyInfo stream_proxy = 6;
  bool has_stream_proxy() const;
  void clear_stream_proxy();
  static const int kStreamProxyFieldNumber = 6;
  const ::YouMeProtocol::StreamProxyInfo& stream_proxy() const;
  ::YouMeProtocol::StreamProxyInfo* mutable_stream_proxy();
  ::YouMeProtocol::StreamProxyInfo* release_stream_proxy();
  void set_allocated_stream_proxy(::YouMeProtocol::StreamProxyInfo* stream_proxy);

  // repeated .YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker speaker_list = 7;
  int speaker_list_size() const;
  void clear_speaker_list();
  static const int kSpeakerListFieldNumber = 7;
  const ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker& speaker_list(int index) const;
  ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker* mutable_speaker_list(int index);
  ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker* add_speaker_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker >*
      mutable_speaker_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker >&
      speaker_list() const;

  // optional uint64 business_id = 10;
  bool has_business_id() const;
  void clear_business_id();
  static const int kBusinessIdFieldNumber = 10;
  ::youmecommon::protobuf::uint64 business_id() const;
  void set_business_id(::youmecommon::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_udpport();
  inline void clear_has_udpport();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_media_ctl_port();
  inline void clear_has_media_ctl_port();
  inline void set_has_stream_proxy();
  inline void clear_has_stream_proxy();
  inline void set_has_business_id();
  inline void clear_has_business_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 udpport_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 timeout_;
  ::youmecommon::protobuf::int32 media_ctl_port_;
  ::YouMeProtocol::StreamProxyInfo* stream_proxy_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker > speaker_list_;
  ::youmecommon::protobuf::uint64 business_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_JoinConferenceResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_LeaveConference : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_LeaveConference();
  virtual ~YouMeVoice_Command_LeaveConference();

  YouMeVoice_Command_LeaveConference(const YouMeVoice_Command_LeaveConference& from);

  inline YouMeVoice_Command_LeaveConference& operator=(const YouMeVoice_Command_LeaveConference& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_LeaveConference& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_LeaveConference* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_LeaveConference* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_LeaveConference* New() const { return New(NULL); }

  YouMeVoice_Command_LeaveConference* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_LeaveConference& from);
  void MergeFrom(const YouMeVoice_Command_LeaveConference& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_LeaveConference* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required string roomid = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 2;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // required int32 sessionid = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_LeaveConference)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_LeaveConference* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_ChannelUserList_Request : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_ChannelUserList_Request();
  virtual ~YouMeVoice_Command_ChannelUserList_Request();

  YouMeVoice_Command_ChannelUserList_Request(const YouMeVoice_Command_ChannelUserList_Request& from);

  inline YouMeVoice_Command_ChannelUserList_Request& operator=(const YouMeVoice_Command_ChannelUserList_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_ChannelUserList_Request& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_ChannelUserList_Request* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_ChannelUserList_Request* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_ChannelUserList_Request* New() const { return New(NULL); }

  YouMeVoice_Command_ChannelUserList_Request* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_ChannelUserList_Request& from);
  void MergeFrom(const YouMeVoice_Command_ChannelUserList_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_ChannelUserList_Request* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // optional int32 start_index = 4;
  bool has_start_index() const;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 4;
  ::youmecommon::protobuf::int32 start_index() const;
  void set_start_index(::youmecommon::protobuf::int32 value);

  // optional int32 req_count = 5;
  bool has_req_count() const;
  void clear_req_count();
  static const int kReqCountFieldNumber = 5;
  ::youmecommon::protobuf::int32 req_count() const;
  void set_req_count(::youmecommon::protobuf::int32 value);

  // optional int32 notify_flag = 6 [default = 0];
  bool has_notify_flag() const;
  void clear_notify_flag();
  static const int kNotifyFlagFieldNumber = 6;
  ::youmecommon::protobuf::int32 notify_flag() const;
  void set_notify_flag(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_req_count();
  inline void clear_has_req_count();
  inline void set_has_notify_flag();
  inline void clear_has_notify_flag();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channel_id_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 start_index_;
  ::youmecommon::protobuf::int32 req_count_;
  ::youmecommon::protobuf::int32 notify_flag_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_ChannelUserList_Request* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_UserInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_UserInfo();
  virtual ~YouMeVoice_UserInfo();

  YouMeVoice_UserInfo(const YouMeVoice_UserInfo& from);

  inline YouMeVoice_UserInfo& operator=(const YouMeVoice_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_UserInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_UserInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_UserInfo* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_UserInfo* New() const { return New(NULL); }

  YouMeVoice_UserInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_UserInfo& from);
  void MergeFrom(const YouMeVoice_UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_UserInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string user_outer_ip = 3;
  bool has_user_outer_ip() const;
  void clear_user_outer_ip();
  static const int kUserOuterIpFieldNumber = 3;
  const ::std::string& user_outer_ip() const;
  void set_user_outer_ip(const ::std::string& value);
  void set_user_outer_ip(const char* value);
  void set_user_outer_ip(const char* value, size_t size);
  ::std::string* mutable_user_outer_ip();
  ::std::string* release_user_outer_ip();
  void set_allocated_user_outer_ip(::std::string* user_outer_ip);

  // optional string user_inner_ip = 4;
  bool has_user_inner_ip() const;
  void clear_user_inner_ip();
  static const int kUserInnerIpFieldNumber = 4;
  const ::std::string& user_inner_ip() const;
  void set_user_inner_ip(const ::std::string& value);
  void set_user_inner_ip(const char* value);
  void set_user_inner_ip(const char* value, size_t size);
  ::std::string* mutable_user_inner_ip();
  ::std::string* release_user_inner_ip();
  void set_allocated_user_inner_ip(::std::string* user_inner_ip);

  // optional uint32 user_inner_port = 5;
  bool has_user_inner_port() const;
  void clear_user_inner_port();
  static const int kUserInnerPortFieldNumber = 5;
  ::youmecommon::protobuf::uint32 user_inner_port() const;
  void set_user_inner_port(::youmecommon::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_UserInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_user_outer_ip();
  inline void clear_has_user_outer_ip();
  inline void set_has_user_inner_ip();
  inline void clear_has_user_inner_ip();
  inline void set_has_user_inner_port();
  inline void clear_has_user_inner_port();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_outer_ip_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::uint32 user_inner_port_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_inner_ip_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_ChannelUserList_Response : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_ChannelUserList_Response();
  virtual ~YouMeVoice_Command_ChannelUserList_Response();

  YouMeVoice_Command_ChannelUserList_Response(const YouMeVoice_Command_ChannelUserList_Response& from);

  inline YouMeVoice_Command_ChannelUserList_Response& operator=(const YouMeVoice_Command_ChannelUserList_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_ChannelUserList_Response& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_ChannelUserList_Response* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_ChannelUserList_Response* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_ChannelUserList_Response* New() const { return New(NULL); }

  YouMeVoice_Command_ChannelUserList_Response* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_ChannelUserList_Response& from);
  void MergeFrom(const YouMeVoice_Command_ChannelUserList_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_ChannelUserList_Response* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // repeated string userid = 2;
  int userid_size() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid(int index) const;
  ::std::string* mutable_userid(int index);
  void set_userid(int index, const ::std::string& value);
  void set_userid(int index, const char* value);
  void set_userid(int index, const char* value, size_t size);
  ::std::string* add_userid();
  void add_userid(const ::std::string& value);
  void add_userid(const char* value);
  void add_userid(const char* value, size_t size);
  const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>& userid() const;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string>* mutable_userid();

  // optional string req_channel_id = 3;
  bool has_req_channel_id() const;
  void clear_req_channel_id();
  static const int kReqChannelIdFieldNumber = 3;
  const ::std::string& req_channel_id() const;
  void set_req_channel_id(const ::std::string& value);
  void set_req_channel_id(const char* value);
  void set_req_channel_id(const char* value, size_t size);
  ::std::string* mutable_req_channel_id();
  ::std::string* release_req_channel_id();
  void set_allocated_req_channel_id(::std::string* req_channel_id);

  // optional int32 start_index = 4;
  bool has_start_index() const;
  void clear_start_index();
  static const int kStartIndexFieldNumber = 4;
  ::youmecommon::protobuf::int32 start_index() const;
  void set_start_index(::youmecommon::protobuf::int32 value);

  // optional int32 left_count = 5;
  bool has_left_count() const;
  void clear_left_count();
  static const int kLeftCountFieldNumber = 5;
  ::youmecommon::protobuf::int32 left_count() const;
  void set_left_count(::youmecommon::protobuf::int32 value);

  // optional int32 next_index = 6;
  bool has_next_index() const;
  void clear_next_index();
  static const int kNextIndexFieldNumber = 6;
  ::youmecommon::protobuf::int32 next_index() const;
  void set_next_index(::youmecommon::protobuf::int32 value);

  // repeated .YouMeProtocol.YouMeVoice_UserInfo userinfo = 7;
  int userinfo_size() const;
  void clear_userinfo();
  static const int kUserinfoFieldNumber = 7;
  const ::YouMeProtocol::YouMeVoice_UserInfo& userinfo(int index) const;
  ::YouMeProtocol::YouMeVoice_UserInfo* mutable_userinfo(int index);
  ::YouMeProtocol::YouMeVoice_UserInfo* add_userinfo();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo >*
      mutable_userinfo();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo >&
      userinfo() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_req_channel_id();
  inline void clear_has_req_channel_id();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_left_count();
  inline void clear_has_left_count();
  inline void set_has_next_index();
  inline void clear_has_next_index();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string> userid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr req_channel_id_;
  ::youmecommon::protobuf::int32 start_index_;
  ::youmecommon::protobuf::int32 left_count_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo > userinfo_;
  ::youmecommon::protobuf::int32 next_index_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_ChannelUserList_Response* default_instance_;
};
// -------------------------------------------------------------------

class JoinLeaveUser : public ::youmecommon::protobuf::MessageLite {
 public:
  JoinLeaveUser();
  virtual ~JoinLeaveUser();

  JoinLeaveUser(const JoinLeaveUser& from);

  inline JoinLeaveUser& operator=(const JoinLeaveUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const JoinLeaveUser& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const JoinLeaveUser* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(JoinLeaveUser* other);

  // implements Message ----------------------------------------------

  inline JoinLeaveUser* New() const { return New(NULL); }

  JoinLeaveUser* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const JoinLeaveUser& from);
  void MergeFrom(const JoinLeaveUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(JoinLeaveUser* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 flag = 2;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::youmecommon::protobuf::int32 flag() const;
  void set_flag(::youmecommon::protobuf::int32 value);

  // optional int32 sessionid = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.JoinLeaveUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 flag_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static JoinLeaveUser* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_ChannelUserJoinLeaveNotify : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_ChannelUserJoinLeaveNotify();
  virtual ~YouMeVoice_Command_ChannelUserJoinLeaveNotify();

  YouMeVoice_Command_ChannelUserJoinLeaveNotify(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from);

  inline YouMeVoice_Command_ChannelUserJoinLeaveNotify& operator=(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_ChannelUserJoinLeaveNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_ChannelUserJoinLeaveNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_ChannelUserJoinLeaveNotify* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_ChannelUserJoinLeaveNotify* New() const { return New(NULL); }

  YouMeVoice_Command_ChannelUserJoinLeaveNotify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from);
  void MergeFrom(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_ChannelUserJoinLeaveNotify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required string channel_id = 2;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // repeated .YouMeProtocol.JoinLeaveUser user_list = 3;
  int user_list_size() const;
  void clear_user_list();
  static const int kUserListFieldNumber = 3;
  const ::YouMeProtocol::JoinLeaveUser& user_list(int index) const;
  ::YouMeProtocol::JoinLeaveUser* mutable_user_list(int index);
  ::YouMeProtocol::JoinLeaveUser* add_user_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser >*
      mutable_user_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser >&
      user_list() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channel_id_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser > user_list_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_ChannelUserJoinLeaveNotify* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_LeaveConferenceResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_LeaveConferenceResponse();
  virtual ~YouMeVoice_Command_LeaveConferenceResponse();

  YouMeVoice_Command_LeaveConferenceResponse(const YouMeVoice_Command_LeaveConferenceResponse& from);

  inline YouMeVoice_Command_LeaveConferenceResponse& operator=(const YouMeVoice_Command_LeaveConferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_LeaveConferenceResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_LeaveConferenceResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_LeaveConferenceResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_LeaveConferenceResponse* New() const { return New(NULL); }

  YouMeVoice_Command_LeaveConferenceResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_LeaveConferenceResponse& from);
  void MergeFrom(const YouMeVoice_Command_LeaveConferenceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_LeaveConferenceResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_LeaveConferenceResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Heart : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Heart();
  virtual ~YouMeVoice_Command_Heart();

  YouMeVoice_Command_Heart(const YouMeVoice_Command_Heart& from);

  inline YouMeVoice_Command_Heart& operator=(const YouMeVoice_Command_Heart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Heart& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Heart* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Heart* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Heart* New() const { return New(NULL); }

  YouMeVoice_Command_Heart* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Heart& from);
  void MergeFrom(const YouMeVoice_Command_Heart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Heart* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Heart)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Heart* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_HeartResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_HeartResponse();
  virtual ~YouMeVoice_Command_HeartResponse();

  YouMeVoice_Command_HeartResponse(const YouMeVoice_Command_HeartResponse& from);

  inline YouMeVoice_Command_HeartResponse& operator=(const YouMeVoice_Command_HeartResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_HeartResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_HeartResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_HeartResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_HeartResponse* New() const { return New(NULL); }

  YouMeVoice_Command_HeartResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_HeartResponse& from);
  void MergeFrom(const YouMeVoice_Command_HeartResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_HeartResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_HeartResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_HeartResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Kickout : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Kickout();
  virtual ~YouMeVoice_Command_Kickout();

  YouMeVoice_Command_Kickout(const YouMeVoice_Command_Kickout& from);

  inline YouMeVoice_Command_Kickout& operator=(const YouMeVoice_Command_Kickout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Kickout& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Kickout* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Kickout* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Kickout* New() const { return New(NULL); }

  YouMeVoice_Command_Kickout* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Kickout& from);
  void MergeFrom(const YouMeVoice_Command_Kickout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Kickout* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Kickout)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Kickout* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_MicStatus : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_MicStatus();
  virtual ~YouMeVoice_Command_MicStatus();

  YouMeVoice_Command_MicStatus(const YouMeVoice_Command_MicStatus& from);

  inline YouMeVoice_Command_MicStatus& operator=(const YouMeVoice_Command_MicStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_MicStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_MicStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_MicStatus* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_MicStatus* New() const { return New(NULL); }

  YouMeVoice_Command_MicStatus* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_MicStatus& from);
  void MergeFrom(const YouMeVoice_Command_MicStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_MicStatus* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_MicStatus)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_MicStatus* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_MicStatusServer : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_MicStatusServer();
  virtual ~YouMeVoice_Command_MicStatusServer();

  YouMeVoice_Command_MicStatusServer(const YouMeVoice_Command_MicStatusServer& from);

  inline YouMeVoice_Command_MicStatusServer& operator=(const YouMeVoice_Command_MicStatusServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_MicStatusServer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_MicStatusServer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_MicStatusServer* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_MicStatusServer* New() const { return New(NULL); }

  YouMeVoice_Command_MicStatusServer* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_MicStatusServer& from);
  void MergeFrom(const YouMeVoice_Command_MicStatusServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_MicStatusServer* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required string userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_MicStatusServer* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_CommonStatus : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_CommonStatus();
  virtual ~YouMeVoice_Command_CommonStatus();

  YouMeVoice_Command_CommonStatus(const YouMeVoice_Command_CommonStatus& from);

  inline YouMeVoice_Command_CommonStatus& operator=(const YouMeVoice_Command_CommonStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_CommonStatus& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_CommonStatus* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_CommonStatus* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_CommonStatus* New() const { return New(NULL); }

  YouMeVoice_Command_CommonStatus* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_CommonStatus& from);
  void MergeFrom(const YouMeVoice_Command_CommonStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_CommonStatus* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 4;
  ::YouMeProtocol::STATUS_EVENT_TYPE eventtype() const;
  void set_eventtype(::YouMeProtocol::STATUS_EVENT_TYPE value);

  // required int32 status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_CommonStatus)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_status();
  inline void clear_has_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  int eventtype_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_CommonStatus* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_CommonStatusServer : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_CommonStatusServer();
  virtual ~YouMeVoice_Command_CommonStatusServer();

  YouMeVoice_Command_CommonStatusServer(const YouMeVoice_Command_CommonStatusServer& from);

  inline YouMeVoice_Command_CommonStatusServer& operator=(const YouMeVoice_Command_CommonStatusServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_CommonStatusServer& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_CommonStatusServer* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_CommonStatusServer* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_CommonStatusServer* New() const { return New(NULL); }

  YouMeVoice_Command_CommonStatusServer* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_CommonStatusServer& from);
  void MergeFrom(const YouMeVoice_Command_CommonStatusServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_CommonStatusServer* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required string userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
  bool has_eventtype() const;
  void clear_eventtype();
  static const int kEventTypeFieldNumber = 3;
  ::YouMeProtocol::STATUS_EVENT_TYPE eventtype() const;
  void set_eventtype(::YouMeProtocol::STATUS_EVENT_TYPE value);

  // required int32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_status();
  inline void clear_has_status();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  int eventtype_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_CommonStatusServer* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Recive_Members : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Recive_Members();
  virtual ~YouMeVoice_Command_Recive_Members();

  YouMeVoice_Command_Recive_Members(const YouMeVoice_Command_Recive_Members& from);

  inline YouMeVoice_Command_Recive_Members& operator=(const YouMeVoice_Command_Recive_Members& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Recive_Members& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Recive_Members* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Recive_Members* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Recive_Members* New() const { return New(NULL); }

  YouMeVoice_Command_Recive_Members* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Recive_Members& from);
  void MergeFrom(const YouMeVoice_Command_Recive_Members& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Recive_Members* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // repeated string userid = 2;
  int userid_size() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid(int index) const;
  ::std::string* mutable_userid(int index);
  void set_userid(int index, const ::std::string& value);
  void set_userid(int index, const char* value);
  void set_userid(int index, const char* value, size_t size);
  ::std::string* add_userid();
  void add_userid(const ::std::string& value);
  void add_userid(const char* value);
  void add_userid(const char* value, size_t size);
  const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>& userid() const;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string>* mutable_userid();

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Recive_Members)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string> userid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Recive_Members* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_JoinRoomRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_JoinRoomRequest();
  virtual ~YouMeVoice_Command_JoinRoomRequest();

  YouMeVoice_Command_JoinRoomRequest(const YouMeVoice_Command_JoinRoomRequest& from);

  inline YouMeVoice_Command_JoinRoomRequest& operator=(const YouMeVoice_Command_JoinRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_JoinRoomRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_JoinRoomRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_JoinRoomRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_JoinRoomRequest* New() const { return New(NULL); }

  YouMeVoice_Command_JoinRoomRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_JoinRoomRequest& from);
  void MergeFrom(const YouMeVoice_Command_JoinRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_JoinRoomRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional bool check_room_exist = 4 [default = false];
  bool has_check_room_exist() const;
  void clear_check_room_exist();
  static const int kCheckRoomExistFieldNumber = 4;
  bool check_room_exist() const;
  void set_check_room_exist(bool value);

  // optional bool av_notify = 5;
  bool has_av_notify() const;
  void clear_av_notify();
  static const int kAvNotifyFieldNumber = 5;
  bool av_notify() const;
  void set_av_notify(bool value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_check_room_exist();
  inline void clear_has_check_room_exist();
  inline void set_has_av_notify();
  inline void clear_has_av_notify();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  bool check_room_exist_;
  bool av_notify_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_JoinRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_JoinRoomResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_JoinRoomResponse();
  virtual ~YouMeVoice_Command_JoinRoomResponse();

  YouMeVoice_Command_JoinRoomResponse(const YouMeVoice_Command_JoinRoomResponse& from);

  inline YouMeVoice_Command_JoinRoomResponse& operator=(const YouMeVoice_Command_JoinRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_JoinRoomResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_JoinRoomResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_JoinRoomResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_JoinRoomResponse* New() const { return New(NULL); }

  YouMeVoice_Command_JoinRoomResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_JoinRoomResponse& from);
  void MergeFrom(const YouMeVoice_Command_JoinRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_JoinRoomResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional bool success = 4;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_success();
  inline void clear_has_success();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  bool success_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_JoinRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_LeaveRoomRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_LeaveRoomRequest();
  virtual ~YouMeVoice_Command_LeaveRoomRequest();

  YouMeVoice_Command_LeaveRoomRequest(const YouMeVoice_Command_LeaveRoomRequest& from);

  inline YouMeVoice_Command_LeaveRoomRequest& operator=(const YouMeVoice_Command_LeaveRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_LeaveRoomRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_LeaveRoomRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_LeaveRoomRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_LeaveRoomRequest* New() const { return New(NULL); }

  YouMeVoice_Command_LeaveRoomRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_LeaveRoomRequest& from);
  void MergeFrom(const YouMeVoice_Command_LeaveRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_LeaveRoomRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_LeaveRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_LeaveRoomResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_LeaveRoomResponse();
  virtual ~YouMeVoice_Command_LeaveRoomResponse();

  YouMeVoice_Command_LeaveRoomResponse(const YouMeVoice_Command_LeaveRoomResponse& from);

  inline YouMeVoice_Command_LeaveRoomResponse& operator=(const YouMeVoice_Command_LeaveRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_LeaveRoomResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_LeaveRoomResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_LeaveRoomResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_LeaveRoomResponse* New() const { return New(NULL); }

  YouMeVoice_Command_LeaveRoomResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_LeaveRoomResponse& from);
  void MergeFrom(const YouMeVoice_Command_LeaveRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_LeaveRoomResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional bool success = 4;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_success();
  inline void clear_has_success();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  bool success_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_LeaveRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_SpeakToRoomRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_SpeakToRoomRequest();
  virtual ~YouMeVoice_Command_SpeakToRoomRequest();

  YouMeVoice_Command_SpeakToRoomRequest(const YouMeVoice_Command_SpeakToRoomRequest& from);

  inline YouMeVoice_Command_SpeakToRoomRequest& operator=(const YouMeVoice_Command_SpeakToRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_SpeakToRoomRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_SpeakToRoomRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_SpeakToRoomRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_SpeakToRoomRequest* New() const { return New(NULL); }

  YouMeVoice_Command_SpeakToRoomRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_SpeakToRoomRequest& from);
  void MergeFrom(const YouMeVoice_Command_SpeakToRoomRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_SpeakToRoomRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::youmecommon::protobuf::uint32 timestamp() const;
  void set_timestamp(::youmecommon::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::uint32 timestamp_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_SpeakToRoomRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_SpeakToRoomResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_SpeakToRoomResponse();
  virtual ~YouMeVoice_Command_SpeakToRoomResponse();

  YouMeVoice_Command_SpeakToRoomResponse(const YouMeVoice_Command_SpeakToRoomResponse& from);

  inline YouMeVoice_Command_SpeakToRoomResponse& operator=(const YouMeVoice_Command_SpeakToRoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_SpeakToRoomResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_SpeakToRoomResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_SpeakToRoomResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_SpeakToRoomResponse* New() const { return New(NULL); }

  YouMeVoice_Command_SpeakToRoomResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_SpeakToRoomResponse& from);
  void MergeFrom(const YouMeVoice_Command_SpeakToRoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_SpeakToRoomResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string roomid = 3;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  const ::std::string& roomid() const;
  void set_roomid(const ::std::string& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  ::std::string* mutable_roomid();
  ::std::string* release_roomid();
  void set_allocated_roomid(::std::string* roomid);

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  ::youmecommon::protobuf::uint32 timestamp() const;
  void set_timestamp(::youmecommon::protobuf::uint32 value);

  // optional bool success = 5;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 5;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_success();
  inline void clear_has_success();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr roomid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::uint32 timestamp_;
  bool success_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_SpeakToRoomResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Session2UserIdRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Session2UserIdRequest();
  virtual ~YouMeVoice_Command_Session2UserIdRequest();

  YouMeVoice_Command_Session2UserIdRequest(const YouMeVoice_Command_Session2UserIdRequest& from);

  inline YouMeVoice_Command_Session2UserIdRequest& operator=(const YouMeVoice_Command_Session2UserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Session2UserIdRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Session2UserIdRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Session2UserIdRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Session2UserIdRequest* New() const { return New(NULL); }

  YouMeVoice_Command_Session2UserIdRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Session2UserIdRequest& from);
  void MergeFrom(const YouMeVoice_Command_Session2UserIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Session2UserIdRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // repeated int32 sessionid = 2;
  int sessionid_size() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid(int index) const;
  void set_sessionid(int index, ::youmecommon::protobuf::int32 value);
  void add_sessionid(::youmecommon::protobuf::int32 value);
  const ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 >&
      sessionid() const;
  ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 >*
      mutable_sessionid();

  // optional int32 user_session = 3;
  bool has_user_session() const;
  void clear_user_session();
  static const int kUserSessionFieldNumber = 3;
  ::youmecommon::protobuf::int32 user_session() const;
  void set_user_session(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_user_session();
  inline void clear_has_user_session();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 > sessionid_;
  ::youmecommon::protobuf::int32 user_session_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Session2UserIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Session2UserIdResponse_Speaker : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Session2UserIdResponse_Speaker();
  virtual ~YouMeVoice_Command_Session2UserIdResponse_Speaker();

  YouMeVoice_Command_Session2UserIdResponse_Speaker(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from);

  inline YouMeVoice_Command_Session2UserIdResponse_Speaker& operator=(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Session2UserIdResponse_Speaker& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Session2UserIdResponse_Speaker* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Session2UserIdResponse_Speaker* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Session2UserIdResponse_Speaker* New() const { return New(NULL); }

  YouMeVoice_Command_Session2UserIdResponse_Speaker* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from);
  void MergeFrom(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Session2UserIdResponse_Speaker* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sessionid = 1;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 1;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Session2UserIdResponse_Speaker* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Session2UserIdResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Session2UserIdResponse();
  virtual ~YouMeVoice_Command_Session2UserIdResponse();

  YouMeVoice_Command_Session2UserIdResponse(const YouMeVoice_Command_Session2UserIdResponse& from);

  inline YouMeVoice_Command_Session2UserIdResponse& operator=(const YouMeVoice_Command_Session2UserIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Session2UserIdResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Session2UserIdResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Session2UserIdResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Session2UserIdResponse* New() const { return New(NULL); }

  YouMeVoice_Command_Session2UserIdResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Session2UserIdResponse& from);
  void MergeFrom(const YouMeVoice_Command_Session2UserIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Session2UserIdResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef YouMeVoice_Command_Session2UserIdResponse_Speaker Speaker;

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // repeated .YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker result = 2;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker& result(int index) const;
  ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker* mutable_result(int index);
  ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker* add_result();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker >*
      mutable_result();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker >&
      result() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker > result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Session2UserIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicInitRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicInitRequest();
  virtual ~YouMeVoice_Command_Fight4MicInitRequest();

  YouMeVoice_Command_Fight4MicInitRequest(const YouMeVoice_Command_Fight4MicInitRequest& from);

  inline YouMeVoice_Command_Fight4MicInitRequest& operator=(const YouMeVoice_Command_Fight4MicInitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicInitRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicInitRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicInitRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicInitRequest* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicInitRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicInitRequest& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicInitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicInitRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // required int32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::youmecommon::protobuf::int32 mode() const;
  void set_mode(::youmecommon::protobuf::int32 value);

  // optional string room_id = 4;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // optional int32 max_num = 5;
  bool has_max_num() const;
  void clear_max_num();
  static const int kMaxNumFieldNumber = 5;
  ::youmecommon::protobuf::int32 max_num() const;
  void set_max_num(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time_out = 6;
  bool has_talk_time_out() const;
  void clear_talk_time_out();
  static const int kTalkTimeOutFieldNumber = 6;
  ::youmecommon::protobuf::int32 talk_time_out() const;
  void set_talk_time_out(::youmecommon::protobuf::int32 value);

  // optional int32 judge_time_out = 7;
  bool has_judge_time_out() const;
  void clear_judge_time_out();
  static const int kJudgeTimeOutFieldNumber = 7;
  ::youmecommon::protobuf::int32 judge_time_out() const;
  void set_judge_time_out(::youmecommon::protobuf::int32 value);

  // optional string json_str = 8;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 8;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // optional int32 notify_flag = 9;
  bool has_notify_flag() const;
  void clear_notify_flag();
  static const int kNotifyFlagFieldNumber = 9;
  ::youmecommon::protobuf::int32 notify_flag() const;
  void set_notify_flag(::youmecommon::protobuf::int32 value);

  // optional int32 mic_enable_flag = 10;
  bool has_mic_enable_flag() const;
  void clear_mic_enable_flag();
  static const int kMicEnableFlagFieldNumber = 10;
  ::youmecommon::protobuf::int32 mic_enable_flag() const;
  void set_mic_enable_flag(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_max_num();
  inline void clear_has_max_num();
  inline void set_has_talk_time_out();
  inline void clear_has_talk_time_out();
  inline void set_has_judge_time_out();
  inline void clear_has_judge_time_out();
  inline void set_has_json_str();
  inline void clear_has_json_str();
  inline void set_has_notify_flag();
  inline void clear_has_notify_flag();
  inline void set_has_mic_enable_flag();
  inline void clear_has_mic_enable_flag();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::int32 mode_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 max_num_;
  ::youmecommon::protobuf::int32 talk_time_out_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_str_;
  ::youmecommon::protobuf::int32 judge_time_out_;
  ::youmecommon::protobuf::int32 notify_flag_;
  ::youmecommon::protobuf::int32 mic_enable_flag_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicInitRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicInitResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicInitResponse();
  virtual ~YouMeVoice_Command_Fight4MicInitResponse();

  YouMeVoice_Command_Fight4MicInitResponse(const YouMeVoice_Command_Fight4MicInitResponse& from);

  inline YouMeVoice_Command_Fight4MicInitResponse& operator=(const YouMeVoice_Command_Fight4MicInitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicInitResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicInitResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicInitResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicInitResponse* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicInitResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicInitResponse& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicInitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicInitResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 4;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicInitResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicRequest();
  virtual ~YouMeVoice_Command_Fight4MicRequest();

  YouMeVoice_Command_Fight4MicRequest(const YouMeVoice_Command_Fight4MicRequest& from);

  inline YouMeVoice_Command_Fight4MicRequest& operator=(const YouMeVoice_Command_Fight4MicRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicRequest* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicRequest& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 3;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // optional int32 score = 4;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  ::youmecommon::protobuf::int32 score() const;
  void set_score(::youmecommon::protobuf::int32 value);

  // optional string json_params = 5;
  bool has_json_params() const;
  void clear_json_params();
  static const int kJsonParamsFieldNumber = 5;
  const ::std::string& json_params() const;
  void set_json_params(const ::std::string& value);
  void set_json_params(const char* value);
  void set_json_params(const char* value, size_t size);
  ::std::string* mutable_json_params();
  ::std::string* release_json_params();
  void set_allocated_json_params(::std::string* json_params);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_json_params();
  inline void clear_has_json_params();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::int32 score_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_params_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicResponse();
  virtual ~YouMeVoice_Command_Fight4MicResponse();

  YouMeVoice_Command_Fight4MicResponse(const YouMeVoice_Command_Fight4MicResponse& from);

  inline YouMeVoice_Command_Fight4MicResponse& operator=(const YouMeVoice_Command_Fight4MicResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicResponse* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicResponse& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 4;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // optional int32 mic_enable_flag = 5;
  bool has_mic_enable_flag() const;
  void clear_mic_enable_flag();
  static const int kMicEnableFlagFieldNumber = 5;
  ::youmecommon::protobuf::int32 mic_enable_flag() const;
  void set_mic_enable_flag(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time = 6;
  bool has_talk_time() const;
  void clear_talk_time();
  static const int kTalkTimeFieldNumber = 6;
  ::youmecommon::protobuf::int32 talk_time() const;
  void set_talk_time(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_mic_enable_flag();
  inline void clear_has_mic_enable_flag();
  inline void set_has_talk_time();
  inline void clear_has_talk_time();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 mic_enable_flag_;
  ::youmecommon::protobuf::int32 talk_time_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicDeinitRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicDeinitRequest();
  virtual ~YouMeVoice_Command_Fight4MicDeinitRequest();

  YouMeVoice_Command_Fight4MicDeinitRequest(const YouMeVoice_Command_Fight4MicDeinitRequest& from);

  inline YouMeVoice_Command_Fight4MicDeinitRequest& operator=(const YouMeVoice_Command_Fight4MicDeinitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicDeinitRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicDeinitRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicDeinitRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicDeinitRequest* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicDeinitRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicDeinitRequest& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicDeinitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicDeinitRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 3;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // optional string json_str = 4;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 4;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_json_str();
  inline void clear_has_json_str();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_str_;
  ::youmecommon::protobuf::int32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicDeinitRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicDeinitResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicDeinitResponse();
  virtual ~YouMeVoice_Command_Fight4MicDeinitResponse();

  YouMeVoice_Command_Fight4MicDeinitResponse(const YouMeVoice_Command_Fight4MicDeinitResponse& from);

  inline YouMeVoice_Command_Fight4MicDeinitResponse& operator=(const YouMeVoice_Command_Fight4MicDeinitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicDeinitResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicDeinitResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicDeinitResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicDeinitResponse* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicDeinitResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicDeinitResponse& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicDeinitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicDeinitResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 4;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicDeinitResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Fight4MicNotifyRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Fight4MicNotifyRequest();
  virtual ~YouMeVoice_Command_Fight4MicNotifyRequest();

  YouMeVoice_Command_Fight4MicNotifyRequest(const YouMeVoice_Command_Fight4MicNotifyRequest& from);

  inline YouMeVoice_Command_Fight4MicNotifyRequest& operator=(const YouMeVoice_Command_Fight4MicNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Fight4MicNotifyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Fight4MicNotifyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Fight4MicNotifyRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Fight4MicNotifyRequest* New() const { return New(NULL); }

  YouMeVoice_Command_Fight4MicNotifyRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Fight4MicNotifyRequest& from);
  void MergeFrom(const YouMeVoice_Command_Fight4MicNotifyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Fight4MicNotifyRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::youmecommon::protobuf::int32 mode() const;
  void set_mode(::youmecommon::protobuf::int32 value);

  // optional int32 event_type = 3;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  ::youmecommon::protobuf::int32 event_type() const;
  void set_event_type(::youmecommon::protobuf::int32 value);

  // optional string json_str = 4;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 4;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // optional int32 mic_right = 5;
  bool has_mic_right() const;
  void clear_mic_right();
  static const int kMicRightFieldNumber = 5;
  ::youmecommon::protobuf::int32 mic_right() const;
  void set_mic_right(::youmecommon::protobuf::int32 value);

  // optional string room_id = 6;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 6;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // optional string user_id = 7;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 7;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int32 mic_enable_flag = 8;
  bool has_mic_enable_flag() const;
  void clear_mic_enable_flag();
  static const int kMicEnableFlagFieldNumber = 8;
  ::youmecommon::protobuf::int32 mic_enable_flag() const;
  void set_mic_enable_flag(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time = 9;
  bool has_talk_time() const;
  void clear_talk_time();
  static const int kTalkTimeFieldNumber = 9;
  ::youmecommon::protobuf::int32 talk_time() const;
  void set_talk_time(::youmecommon::protobuf::int32 value);

  // optional int32 is_mic_flag = 10;
  bool has_is_mic_flag() const;
  void clear_is_mic_flag();
  static const int kIsMicFlagFieldNumber = 10;
  ::youmecommon::protobuf::int32 is_mic_flag() const;
  void set_is_mic_flag(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_json_str();
  inline void clear_has_json_str();
  inline void set_has_mic_right();
  inline void clear_has_mic_right();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_mic_enable_flag();
  inline void clear_has_mic_enable_flag();
  inline void set_has_talk_time();
  inline void clear_has_talk_time();
  inline void set_has_is_mic_flag();
  inline void clear_has_is_mic_flag();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 mode_;
  ::youmecommon::protobuf::int32 event_type_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_str_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 mic_right_;
  ::youmecommon::protobuf::int32 mic_enable_flag_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::int32 talk_time_;
  ::youmecommon::protobuf::int32 is_mic_flag_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Fight4MicNotifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_ReleaseMicRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_ReleaseMicRequest();
  virtual ~YouMeVoice_Command_ReleaseMicRequest();

  YouMeVoice_Command_ReleaseMicRequest(const YouMeVoice_Command_ReleaseMicRequest& from);

  inline YouMeVoice_Command_ReleaseMicRequest& operator=(const YouMeVoice_Command_ReleaseMicRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_ReleaseMicRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_ReleaseMicRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_ReleaseMicRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_ReleaseMicRequest* New() const { return New(NULL); }

  YouMeVoice_Command_ReleaseMicRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_ReleaseMicRequest& from);
  void MergeFrom(const YouMeVoice_Command_ReleaseMicRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_ReleaseMicRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 3;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 3;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_ReleaseMicRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_ReleaseMicResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_ReleaseMicResponse();
  virtual ~YouMeVoice_Command_ReleaseMicResponse();

  YouMeVoice_Command_ReleaseMicResponse(const YouMeVoice_Command_ReleaseMicResponse& from);

  inline YouMeVoice_Command_ReleaseMicResponse& operator=(const YouMeVoice_Command_ReleaseMicResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_ReleaseMicResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_ReleaseMicResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_ReleaseMicResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_ReleaseMicResponse* New() const { return New(NULL); }

  YouMeVoice_Command_ReleaseMicResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_ReleaseMicResponse& from);
  void MergeFrom(const YouMeVoice_Command_ReleaseMicResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_ReleaseMicResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string room_id = 4;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_ReleaseMicResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteInitRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteInitRequest();
  virtual ~YouMeVoice_Command_InviteInitRequest();

  YouMeVoice_Command_InviteInitRequest(const YouMeVoice_Command_InviteInitRequest& from);

  inline YouMeVoice_Command_InviteInitRequest& operator=(const YouMeVoice_Command_InviteInitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteInitRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteInitRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteInitRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteInitRequest* New() const { return New(NULL); }

  YouMeVoice_Command_InviteInitRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteInitRequest& from);
  void MergeFrom(const YouMeVoice_Command_InviteInitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteInitRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional int32 connect_time_out = 3;
  bool has_connect_time_out() const;
  void clear_connect_time_out();
  static const int kConnectTimeOutFieldNumber = 3;
  ::youmecommon::protobuf::int32 connect_time_out() const;
  void set_connect_time_out(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time_out = 4;
  bool has_talk_time_out() const;
  void clear_talk_time_out();
  static const int kTalkTimeOutFieldNumber = 4;
  ::youmecommon::protobuf::int32 talk_time_out() const;
  void set_talk_time_out(::youmecommon::protobuf::int32 value);

  // optional string room_id = 5;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 5;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_connect_time_out();
  inline void clear_has_connect_time_out();
  inline void set_has_talk_time_out();
  inline void clear_has_talk_time_out();
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::int32 connect_time_out_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 talk_time_out_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteInitRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteInitResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteInitResponse();
  virtual ~YouMeVoice_Command_InviteInitResponse();

  YouMeVoice_Command_InviteInitResponse(const YouMeVoice_Command_InviteInitResponse& from);

  inline YouMeVoice_Command_InviteInitResponse& operator=(const YouMeVoice_Command_InviteInitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteInitResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteInitResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteInitResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteInitResponse* New() const { return New(NULL); }

  YouMeVoice_Command_InviteInitResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteInitResponse& from);
  void MergeFrom(const YouMeVoice_Command_InviteInitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteInitResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteInitResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteRequest();
  virtual ~YouMeVoice_Command_InviteRequest();

  YouMeVoice_Command_InviteRequest(const YouMeVoice_Command_InviteRequest& from);

  inline YouMeVoice_Command_InviteRequest& operator=(const YouMeVoice_Command_InviteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteRequest* New() const { return New(NULL); }

  YouMeVoice_Command_InviteRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteRequest& from);
  void MergeFrom(const YouMeVoice_Command_InviteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string to_user_id = 3;
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  const ::std::string& to_user_id() const;
  void set_to_user_id(const ::std::string& value);
  void set_to_user_id(const char* value);
  void set_to_user_id(const char* value, size_t size);
  ::std::string* mutable_to_user_id();
  ::std::string* release_to_user_id();
  void set_allocated_to_user_id(::std::string* to_user_id);

  // optional string room_id = 4;
  bool has_room_id() const;
  void clear_room_id();
  static const int kRoomIdFieldNumber = 4;
  const ::std::string& room_id() const;
  void set_room_id(const ::std::string& value);
  void set_room_id(const char* value);
  void set_room_id(const char* value, size_t size);
  ::std::string* mutable_room_id();
  ::std::string* release_room_id();
  void set_allocated_room_id(::std::string* room_id);

  // optional int32 connect_time_out = 5;
  bool has_connect_time_out() const;
  void clear_connect_time_out();
  static const int kConnectTimeOutFieldNumber = 5;
  ::youmecommon::protobuf::int32 connect_time_out() const;
  void set_connect_time_out(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time_out = 6;
  bool has_talk_time_out() const;
  void clear_talk_time_out();
  static const int kTalkTimeOutFieldNumber = 6;
  ::youmecommon::protobuf::int32 talk_time_out() const;
  void set_talk_time_out(::youmecommon::protobuf::int32 value);

  // optional int32 notify_flag = 7;
  bool has_notify_flag() const;
  void clear_notify_flag();
  static const int kNotifyFlagFieldNumber = 7;
  ::youmecommon::protobuf::int32 notify_flag() const;
  void set_notify_flag(::youmecommon::protobuf::int32 value);

  // optional string json_str = 8;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 8;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_connect_time_out();
  inline void clear_has_connect_time_out();
  inline void set_has_talk_time_out();
  inline void clear_has_talk_time_out();
  inline void set_has_notify_flag();
  inline void clear_has_notify_flag();
  inline void set_has_json_str();
  inline void clear_has_json_str();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_user_id_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::int32 connect_time_out_;
  ::youmecommon::protobuf::internal::ArenaStringPtr room_id_;
  ::youmecommon::protobuf::int32 talk_time_out_;
  ::youmecommon::protobuf::int32 notify_flag_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_str_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteResponse();
  virtual ~YouMeVoice_Command_InviteResponse();

  YouMeVoice_Command_InviteResponse(const YouMeVoice_Command_InviteResponse& from);

  inline YouMeVoice_Command_InviteResponse& operator=(const YouMeVoice_Command_InviteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteResponse* New() const { return New(NULL); }

  YouMeVoice_Command_InviteResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteResponse& from);
  void MergeFrom(const YouMeVoice_Command_InviteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteNotifyRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteNotifyRequest();
  virtual ~YouMeVoice_Command_InviteNotifyRequest();

  YouMeVoice_Command_InviteNotifyRequest(const YouMeVoice_Command_InviteNotifyRequest& from);

  inline YouMeVoice_Command_InviteNotifyRequest& operator=(const YouMeVoice_Command_InviteNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteNotifyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteNotifyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteNotifyRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteNotifyRequest* New() const { return New(NULL); }

  YouMeVoice_Command_InviteNotifyRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteNotifyRequest& from);
  void MergeFrom(const YouMeVoice_Command_InviteNotifyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteNotifyRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional string from_user_id = 2;
  bool has_from_user_id() const;
  void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 2;
  const ::std::string& from_user_id() const;
  void set_from_user_id(const ::std::string& value);
  void set_from_user_id(const char* value);
  void set_from_user_id(const char* value, size_t size);
  ::std::string* mutable_from_user_id();
  ::std::string* release_from_user_id();
  void set_allocated_from_user_id(::std::string* from_user_id);

  // optional string to_user_id = 3;
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  const ::std::string& to_user_id() const;
  void set_to_user_id(const ::std::string& value);
  void set_to_user_id(const char* value);
  void set_to_user_id(const char* value, size_t size);
  ::std::string* mutable_to_user_id();
  ::std::string* release_to_user_id();
  void set_allocated_to_user_id(::std::string* to_user_id);

  // optional string json_str = 4;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 4;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // optional int32 mode = 5;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 5;
  ::youmecommon::protobuf::int32 mode() const;
  void set_mode(::youmecommon::protobuf::int32 value);

  // optional int32 event_type = 6;
  bool has_event_type() const;
  void clear_event_type();
  static const int kEventTypeFieldNumber = 6;
  ::youmecommon::protobuf::int32 event_type() const;
  void set_event_type(::youmecommon::protobuf::int32 value);

  // optional int32 error_code = 7;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 7;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time_out = 8;
  bool has_talk_time_out() const;
  void clear_talk_time_out();
  static const int kTalkTimeOutFieldNumber = 8;
  ::youmecommon::protobuf::int32 talk_time_out() const;
  void set_talk_time_out(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_json_str();
  inline void clear_has_json_str();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_talk_time_out();
  inline void clear_has_talk_time_out();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr from_user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_str_;
  ::youmecommon::protobuf::int32 mode_;
  ::youmecommon::protobuf::int32 event_type_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 talk_time_out_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteNotifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_AcceptRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_AcceptRequest();
  virtual ~YouMeVoice_Command_AcceptRequest();

  YouMeVoice_Command_AcceptRequest(const YouMeVoice_Command_AcceptRequest& from);

  inline YouMeVoice_Command_AcceptRequest& operator=(const YouMeVoice_Command_AcceptRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_AcceptRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_AcceptRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_AcceptRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_AcceptRequest* New() const { return New(NULL); }

  YouMeVoice_Command_AcceptRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_AcceptRequest& from);
  void MergeFrom(const YouMeVoice_Command_AcceptRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_AcceptRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional string to_user_id = 3;
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  const ::std::string& to_user_id() const;
  void set_to_user_id(const ::std::string& value);
  void set_to_user_id(const char* value);
  void set_to_user_id(const char* value, size_t size);
  ::std::string* mutable_to_user_id();
  ::std::string* release_to_user_id();
  void set_allocated_to_user_id(::std::string* to_user_id);

  // optional int32 error_code = 4;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional string json_str = 5;
  bool has_json_str() const;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 5;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_json_str();
  inline void clear_has_json_str();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_user_id_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::internal::ArenaStringPtr json_str_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_AcceptRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_AcceptResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_AcceptResponse();
  virtual ~YouMeVoice_Command_AcceptResponse();

  YouMeVoice_Command_AcceptResponse(const YouMeVoice_Command_AcceptResponse& from);

  inline YouMeVoice_Command_AcceptResponse& operator=(const YouMeVoice_Command_AcceptResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_AcceptResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_AcceptResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_AcceptResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_AcceptResponse* New() const { return New(NULL); }

  YouMeVoice_Command_AcceptResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_AcceptResponse& from);
  void MergeFrom(const YouMeVoice_Command_AcceptResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_AcceptResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // optional int32 talk_time_out = 4;
  bool has_talk_time_out() const;
  void clear_talk_time_out();
  static const int kTalkTimeOutFieldNumber = 4;
  ::youmecommon::protobuf::int32 talk_time_out() const;
  void set_talk_time_out(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_talk_time_out();
  inline void clear_has_talk_time_out();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  ::youmecommon::protobuf::int32 talk_time_out_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_AcceptResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteByeRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteByeRequest();
  virtual ~YouMeVoice_Command_InviteByeRequest();

  YouMeVoice_Command_InviteByeRequest(const YouMeVoice_Command_InviteByeRequest& from);

  inline YouMeVoice_Command_InviteByeRequest& operator=(const YouMeVoice_Command_InviteByeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteByeRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteByeRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteByeRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteByeRequest* New() const { return New(NULL); }

  YouMeVoice_Command_InviteByeRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteByeRequest& from);
  void MergeFrom(const YouMeVoice_Command_InviteByeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteByeRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 session_id = 2;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::int32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteByeRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_InviteByeResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_InviteByeResponse();
  virtual ~YouMeVoice_Command_InviteByeResponse();

  YouMeVoice_Command_InviteByeResponse(const YouMeVoice_Command_InviteByeResponse& from);

  inline YouMeVoice_Command_InviteByeResponse& operator=(const YouMeVoice_Command_InviteByeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_InviteByeResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_InviteByeResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_InviteByeResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_InviteByeResponse* New() const { return New(NULL); }

  YouMeVoice_Command_InviteByeResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_InviteByeResponse& from);
  void MergeFrom(const YouMeVoice_Command_InviteByeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_InviteByeResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::youmecommon::protobuf::int32 error_code() const;
  void set_error_code(::youmecommon::protobuf::int32 value);

  // optional int32 session_id = 3;
  bool has_session_id() const;
  void clear_session_id();
  static const int kSessionIdFieldNumber = 3;
  ::youmecommon::protobuf::int32 session_id() const;
  void set_session_id(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_session_id();
  inline void clear_has_session_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 error_code_;
  ::youmecommon::protobuf::int32 session_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_InviteByeResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_MaskVideoByUserIdRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_MaskVideoByUserIdRequest();
  virtual ~YouMeVoice_Command_MaskVideoByUserIdRequest();

  YouMeVoice_Command_MaskVideoByUserIdRequest(const YouMeVoice_Command_MaskVideoByUserIdRequest& from);

  inline YouMeVoice_Command_MaskVideoByUserIdRequest& operator=(const YouMeVoice_Command_MaskVideoByUserIdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_MaskVideoByUserIdRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_MaskVideoByUserIdRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_MaskVideoByUserIdRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_MaskVideoByUserIdRequest* New() const { return New(NULL); }

  YouMeVoice_Command_MaskVideoByUserIdRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_MaskVideoByUserIdRequest& from);
  void MergeFrom(const YouMeVoice_Command_MaskVideoByUserIdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_MaskVideoByUserIdRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int32 sessionid = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional int32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_status();
  inline void clear_has_status();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_MaskVideoByUserIdRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_MaskVideoByUserIdResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_MaskVideoByUserIdResponse();
  virtual ~YouMeVoice_Command_MaskVideoByUserIdResponse();

  YouMeVoice_Command_MaskVideoByUserIdResponse(const YouMeVoice_Command_MaskVideoByUserIdResponse& from);

  inline YouMeVoice_Command_MaskVideoByUserIdResponse& operator=(const YouMeVoice_Command_MaskVideoByUserIdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_MaskVideoByUserIdResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_MaskVideoByUserIdResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_MaskVideoByUserIdResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_MaskVideoByUserIdResponse* New() const { return New(NULL); }

  YouMeVoice_Command_MaskVideoByUserIdResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_MaskVideoByUserIdResponse& from);
  void MergeFrom(const YouMeVoice_Command_MaskVideoByUserIdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_MaskVideoByUserIdResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_MaskVideoByUserIdResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_MaskVideoNotifyRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_MaskVideoNotifyRequest();
  virtual ~YouMeVoice_Command_MaskVideoNotifyRequest();

  YouMeVoice_Command_MaskVideoNotifyRequest(const YouMeVoice_Command_MaskVideoNotifyRequest& from);

  inline YouMeVoice_Command_MaskVideoNotifyRequest& operator=(const YouMeVoice_Command_MaskVideoNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_MaskVideoNotifyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_MaskVideoNotifyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_MaskVideoNotifyRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_MaskVideoNotifyRequest* New() const { return New(NULL); }

  YouMeVoice_Command_MaskVideoNotifyRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_MaskVideoNotifyRequest& from);
  void MergeFrom(const YouMeVoice_Command_MaskVideoNotifyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_MaskVideoNotifyRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional string from_user_id = 2;
  bool has_from_user_id() const;
  void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 2;
  const ::std::string& from_user_id() const;
  void set_from_user_id(const ::std::string& value);
  void set_from_user_id(const char* value);
  void set_from_user_id(const char* value, size_t size);
  ::std::string* mutable_from_user_id();
  ::std::string* release_from_user_id();
  void set_allocated_from_user_id(::std::string* from_user_id);

  // optional string to_user_id = 3;
  bool has_to_user_id() const;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  const ::std::string& to_user_id() const;
  void set_to_user_id(const ::std::string& value);
  void set_to_user_id(const char* value);
  void set_to_user_id(const char* value, size_t size);
  ::std::string* mutable_to_user_id();
  ::std::string* release_to_user_id();
  void set_allocated_to_user_id(::std::string* to_user_id);

  // optional int32 status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_from_user_id();
  inline void clear_has_from_user_id();
  inline void set_has_to_user_id();
  inline void clear_has_to_user_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr from_user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_user_id_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_MaskVideoNotifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_CameraStatusChangeRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_CameraStatusChangeRequest();
  virtual ~YouMeVoice_Command_CameraStatusChangeRequest();

  YouMeVoice_Command_CameraStatusChangeRequest(const YouMeVoice_Command_CameraStatusChangeRequest& from);

  inline YouMeVoice_Command_CameraStatusChangeRequest& operator=(const YouMeVoice_Command_CameraStatusChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_CameraStatusChangeRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_CameraStatusChangeRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_CameraStatusChangeRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_CameraStatusChangeRequest* New() const { return New(NULL); }

  YouMeVoice_Command_CameraStatusChangeRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_CameraStatusChangeRequest& from);
  void MergeFrom(const YouMeVoice_Command_CameraStatusChangeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_CameraStatusChangeRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional int32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_status();
  inline void clear_has_status();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_CameraStatusChangeRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_CameraStatusChangeResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_CameraStatusChangeResponse();
  virtual ~YouMeVoice_Command_CameraStatusChangeResponse();

  YouMeVoice_Command_CameraStatusChangeResponse(const YouMeVoice_Command_CameraStatusChangeResponse& from);

  inline YouMeVoice_Command_CameraStatusChangeResponse& operator=(const YouMeVoice_Command_CameraStatusChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_CameraStatusChangeResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_CameraStatusChangeResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_CameraStatusChangeResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_CameraStatusChangeResponse* New() const { return New(NULL); }

  YouMeVoice_Command_CameraStatusChangeResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_CameraStatusChangeResponse& from);
  void MergeFrom(const YouMeVoice_Command_CameraStatusChangeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_CameraStatusChangeResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_CameraStatusChangeResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_CameraNotifyRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_CameraNotifyRequest();
  virtual ~YouMeVoice_Command_CameraNotifyRequest();

  YouMeVoice_Command_CameraNotifyRequest(const YouMeVoice_Command_CameraNotifyRequest& from);

  inline YouMeVoice_Command_CameraNotifyRequest& operator=(const YouMeVoice_Command_CameraNotifyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_CameraNotifyRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_CameraNotifyRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_CameraNotifyRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_CameraNotifyRequest* New() const { return New(NULL); }

  YouMeVoice_Command_CameraNotifyRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_CameraNotifyRequest& from);
  void MergeFrom(const YouMeVoice_Command_CameraNotifyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_CameraNotifyRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional string user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::youmecommon::protobuf::int32 status() const;
  void set_status(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::int32 status_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_CameraNotifyRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_SendMessageRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_SendMessageRequest();
  virtual ~YouMeVoice_Command_SendMessageRequest();

  YouMeVoice_Command_SendMessageRequest(const YouMeVoice_Command_SendMessageRequest& from);

  inline YouMeVoice_Command_SendMessageRequest& operator=(const YouMeVoice_Command_SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_SendMessageRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_SendMessageRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_SendMessageRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_SendMessageRequest* New() const { return New(NULL); }

  YouMeVoice_Command_SendMessageRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_SendMessageRequest& from);
  void MergeFrom(const YouMeVoice_Command_SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_SendMessageRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string to_channel_id = 3;
  bool has_to_channel_id() const;
  void clear_to_channel_id();
  static const int kToChannelIdFieldNumber = 3;
  const ::std::string& to_channel_id() const;
  void set_to_channel_id(const ::std::string& value);
  void set_to_channel_id(const char* value);
  void set_to_channel_id(const char* value, size_t size);
  ::std::string* mutable_to_channel_id();
  ::std::string* release_to_channel_id();
  void set_allocated_to_channel_id(::std::string* to_channel_id);

  // optional bytes msg_content = 4;
  bool has_msg_content() const;
  void clear_msg_content();
  static const int kMsgContentFieldNumber = 4;
  const ::std::string& msg_content() const;
  void set_msg_content(const ::std::string& value);
  void set_msg_content(const char* value);
  void set_msg_content(const void* value, size_t size);
  ::std::string* mutable_msg_content();
  ::std::string* release_msg_content();
  void set_allocated_msg_content(::std::string* msg_content);

  // optional uint64 msg_id = 5;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  ::youmecommon::protobuf::uint64 msg_id() const;
  void set_msg_id(::youmecommon::protobuf::uint64 value);

  // optional string to_userid = 9;
  bool has_to_userid() const;
  void clear_to_userid();
  static const int kToUseridFieldNumber = 9;
  const ::std::string& to_userid() const;
  void set_to_userid(const ::std::string& value);
  void set_to_userid(const char* value);
  void set_to_userid(const char* value, size_t size);
  ::std::string* mutable_to_userid();
  ::std::string* release_to_userid();
  void set_allocated_to_userid(::std::string* to_userid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_to_channel_id();
  inline void clear_has_to_channel_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();
  inline void set_has_to_userid();
  inline void clear_has_to_userid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_channel_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr msg_content_;
  ::youmecommon::protobuf::uint64 msg_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_SendMessageRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_SendMessageResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_SendMessageResponse();
  virtual ~YouMeVoice_Command_SendMessageResponse();

  YouMeVoice_Command_SendMessageResponse(const YouMeVoice_Command_SendMessageResponse& from);

  inline YouMeVoice_Command_SendMessageResponse& operator=(const YouMeVoice_Command_SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_SendMessageResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_SendMessageResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_SendMessageResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_SendMessageResponse* New() const { return New(NULL); }

  YouMeVoice_Command_SendMessageResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_SendMessageResponse& from);
  void MergeFrom(const YouMeVoice_Command_SendMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_SendMessageResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional string to_channel_id = 3;
  bool has_to_channel_id() const;
  void clear_to_channel_id();
  static const int kToChannelIdFieldNumber = 3;
  const ::std::string& to_channel_id() const;
  void set_to_channel_id(const ::std::string& value);
  void set_to_channel_id(const char* value);
  void set_to_channel_id(const char* value, size_t size);
  ::std::string* mutable_to_channel_id();
  ::std::string* release_to_channel_id();
  void set_allocated_to_channel_id(::std::string* to_channel_id);

  // optional uint64 msg_id = 4;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 4;
  ::youmecommon::protobuf::uint64 msg_id() const;
  void set_msg_id(::youmecommon::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_to_channel_id();
  inline void clear_has_to_channel_id();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_channel_id_;
  ::youmecommon::protobuf::uint64 msg_id_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_SendMessageResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_MessageNotify : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_MessageNotify();
  virtual ~YouMeVoice_Command_MessageNotify();

  YouMeVoice_Command_MessageNotify(const YouMeVoice_Command_MessageNotify& from);

  inline YouMeVoice_Command_MessageNotify& operator=(const YouMeVoice_Command_MessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_MessageNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_MessageNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_MessageNotify* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_MessageNotify* New() const { return New(NULL); }

  YouMeVoice_Command_MessageNotify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_MessageNotify& from);
  void MergeFrom(const YouMeVoice_Command_MessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_MessageNotify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional int32 from_sessionid = 2;
  bool has_from_sessionid() const;
  void clear_from_sessionid();
  static const int kFromSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 from_sessionid() const;
  void set_from_sessionid(::youmecommon::protobuf::int32 value);

  // optional string from_userid = 3;
  bool has_from_userid() const;
  void clear_from_userid();
  static const int kFromUseridFieldNumber = 3;
  const ::std::string& from_userid() const;
  void set_from_userid(const ::std::string& value);
  void set_from_userid(const char* value);
  void set_from_userid(const char* value, size_t size);
  ::std::string* mutable_from_userid();
  ::std::string* release_from_userid();
  void set_allocated_from_userid(::std::string* from_userid);

  // optional string to_channel_id = 4;
  bool has_to_channel_id() const;
  void clear_to_channel_id();
  static const int kToChannelIdFieldNumber = 4;
  const ::std::string& to_channel_id() const;
  void set_to_channel_id(const ::std::string& value);
  void set_to_channel_id(const char* value);
  void set_to_channel_id(const char* value, size_t size);
  ::std::string* mutable_to_channel_id();
  ::std::string* release_to_channel_id();
  void set_allocated_to_channel_id(::std::string* to_channel_id);

  // optional bytes msg_content = 5;
  bool has_msg_content() const;
  void clear_msg_content();
  static const int kMsgContentFieldNumber = 5;
  const ::std::string& msg_content() const;
  void set_msg_content(const ::std::string& value);
  void set_msg_content(const char* value);
  void set_msg_content(const void* value, size_t size);
  ::std::string* mutable_msg_content();
  ::std::string* release_msg_content();
  void set_allocated_msg_content(::std::string* msg_content);

  // optional uint64 msg_id = 6;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 6;
  ::youmecommon::protobuf::uint64 msg_id() const;
  void set_msg_id(::youmecommon::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_MessageNotify)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_from_sessionid();
  inline void clear_has_from_sessionid();
  inline void set_has_from_userid();
  inline void clear_has_from_userid();
  inline void set_has_to_channel_id();
  inline void clear_has_to_channel_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr from_userid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr to_channel_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr msg_content_;
  ::youmecommon::protobuf::uint64 msg_id_;
  ::youmecommon::protobuf::int32 from_sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_MessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_KickingRequest : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_KickingRequest();
  virtual ~YouMeVoice_Command_KickingRequest();

  YouMeVoice_Command_KickingRequest(const YouMeVoice_Command_KickingRequest& from);

  inline YouMeVoice_Command_KickingRequest& operator=(const YouMeVoice_Command_KickingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_KickingRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_KickingRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_KickingRequest* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_KickingRequest* New() const { return New(NULL); }

  YouMeVoice_Command_KickingRequest* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_KickingRequest& from);
  void MergeFrom(const YouMeVoice_Command_KickingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_KickingRequest* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // required string user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int64 kick_time = 5;
  bool has_kick_time() const;
  void clear_kick_time();
  static const int kKickTimeFieldNumber = 5;
  ::youmecommon::protobuf::int64 kick_time() const;
  void set_kick_time(::youmecommon::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_KickingRequest)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_kick_time();
  inline void clear_has_kick_time();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channel_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::int64 kick_time_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_KickingRequest* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_KickingResponse : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_KickingResponse();
  virtual ~YouMeVoice_Command_KickingResponse();

  YouMeVoice_Command_KickingResponse(const YouMeVoice_Command_KickingResponse& from);

  inline YouMeVoice_Command_KickingResponse& operator=(const YouMeVoice_Command_KickingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_KickingResponse& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_KickingResponse* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_KickingResponse* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_KickingResponse* New() const { return New(NULL); }

  YouMeVoice_Command_KickingResponse* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_KickingResponse& from);
  void MergeFrom(const YouMeVoice_Command_KickingResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_KickingResponse* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional string channel_id = 2;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // optional string user_id = 3;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // optional int32 sessionid = 4;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 4;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_KickingResponse)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channel_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_KickingResponse* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_KickingNotify : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_KickingNotify();
  virtual ~YouMeVoice_Command_KickingNotify();

  YouMeVoice_Command_KickingNotify(const YouMeVoice_Command_KickingNotify& from);

  inline YouMeVoice_Command_KickingNotify& operator=(const YouMeVoice_Command_KickingNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_KickingNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_KickingNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_KickingNotify* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_KickingNotify* New() const { return New(NULL); }

  YouMeVoice_Command_KickingNotify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_KickingNotify& from);
  void MergeFrom(const YouMeVoice_Command_KickingNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_KickingNotify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // optional string src_user_id = 2;
  bool has_src_user_id() const;
  void clear_src_user_id();
  static const int kSrcUserIdFieldNumber = 2;
  const ::std::string& src_user_id() const;
  void set_src_user_id(const ::std::string& value);
  void set_src_user_id(const char* value);
  void set_src_user_id(const char* value, size_t size);
  ::std::string* mutable_src_user_id();
  ::std::string* release_src_user_id();
  void set_allocated_src_user_id(::std::string* src_user_id);

  // optional string kick_msg = 3;
  bool has_kick_msg() const;
  void clear_kick_msg();
  static const int kKickMsgFieldNumber = 3;
  const ::std::string& kick_msg() const;
  void set_kick_msg(const ::std::string& value);
  void set_kick_msg(const char* value);
  void set_kick_msg(const char* value, size_t size);
  ::std::string* mutable_kick_msg();
  ::std::string* release_kick_msg();
  void set_allocated_kick_msg(::std::string* kick_msg);

  // required string channel_id = 4;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 4;
  const ::std::string& channel_id() const;
  void set_channel_id(const ::std::string& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  ::std::string* mutable_channel_id();
  ::std::string* release_channel_id();
  void set_allocated_channel_id(::std::string* channel_id);

  // optional int32 sessionid = 5;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 5;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional int32 kick_code = 6;
  bool has_kick_code() const;
  void clear_kick_code();
  static const int kKickCodeFieldNumber = 6;
  ::youmecommon::protobuf::int32 kick_code() const;
  void set_kick_code(::youmecommon::protobuf::int32 value);

  // optional int64 kick_time = 7;
  bool has_kick_time() const;
  void clear_kick_time();
  static const int kKickTimeFieldNumber = 7;
  ::youmecommon::protobuf::int64 kick_time() const;
  void set_kick_time(::youmecommon::protobuf::int64 value);

  // optional string kicked_user_id = 8;
  bool has_kicked_user_id() const;
  void clear_kicked_user_id();
  static const int kKickedUserIdFieldNumber = 8;
  const ::std::string& kicked_user_id() const;
  void set_kicked_user_id(const ::std::string& value);
  void set_kicked_user_id(const char* value);
  void set_kicked_user_id(const char* value, size_t size);
  ::std::string* mutable_kicked_user_id();
  ::std::string* release_kicked_user_id();
  void set_allocated_kicked_user_id(::std::string* kicked_user_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_KickingNotify)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_src_user_id();
  inline void clear_has_src_user_id();
  inline void set_has_kick_msg();
  inline void clear_has_kick_msg();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_kick_code();
  inline void clear_has_kick_code();
  inline void set_has_kick_time();
  inline void clear_has_kick_time();
  inline void set_has_kicked_user_id();
  inline void clear_has_kicked_user_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr src_user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr kick_msg_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channel_id_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 kick_code_;
  ::youmecommon::protobuf::int64 kick_time_;
  ::youmecommon::protobuf::internal::ArenaStringPtr kicked_user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_KickingNotify* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Media_ctl_Header : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Media_ctl_Header();
  virtual ~YouMeVoice_Media_ctl_Header();

  YouMeVoice_Media_ctl_Header(const YouMeVoice_Media_ctl_Header& from);

  inline YouMeVoice_Media_ctl_Header& operator=(const YouMeVoice_Media_ctl_Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Media_ctl_Header& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Media_ctl_Header* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Media_ctl_Header* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Media_ctl_Header* New() const { return New(NULL); }

  YouMeVoice_Media_ctl_Header* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Media_ctl_Header& from);
  void MergeFrom(const YouMeVoice_Media_ctl_Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Media_ctl_Header* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::youmecommon::protobuf::int32 cmd() const;
  void set_cmd(::youmecommon::protobuf::int32 value);

  // required int32 seq = 2;
  bool has_seq() const;
  void clear_seq();
  static const int kSeqFieldNumber = 2;
  ::youmecommon::protobuf::int32 seq() const;
  void set_seq(::youmecommon::protobuf::int32 value);

  // required int64 timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  ::youmecommon::protobuf::int64 timestamp() const;
  void set_timestamp(::youmecommon::protobuf::int64 value);

  // required int32 session = 4;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 4;
  ::youmecommon::protobuf::int32 session() const;
  void set_session(::youmecommon::protobuf::int32 value);

  // optional int32 ret_code = 5;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 5;
  ::youmecommon::protobuf::int32 ret_code() const;
  void set_ret_code(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Media_ctl_Header)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_ret_code();
  inline void clear_has_ret_code();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 cmd_;
  ::youmecommon::protobuf::int32 seq_;
  ::youmecommon::protobuf::int64 timestamp_;
  ::youmecommon::protobuf::int32 session_;
  ::youmecommon::protobuf::int32 ret_code_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Media_ctl_Header* default_instance_;
};
// -------------------------------------------------------------------

class LostPacketStatNotify : public ::youmecommon::protobuf::MessageLite {
 public:
  LostPacketStatNotify();
  virtual ~LostPacketStatNotify();

  LostPacketStatNotify(const LostPacketStatNotify& from);

  inline LostPacketStatNotify& operator=(const LostPacketStatNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const LostPacketStatNotify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LostPacketStatNotify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LostPacketStatNotify* other);

  // implements Message ----------------------------------------------

  inline LostPacketStatNotify* New() const { return New(NULL); }

  LostPacketStatNotify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const LostPacketStatNotify& from);
  void MergeFrom(const LostPacketStatNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LostPacketStatNotify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 min_seq = 1;
  bool has_min_seq() const;
  void clear_min_seq();
  static const int kMinSeqFieldNumber = 1;
  ::youmecommon::protobuf::int32 min_seq() const;
  void set_min_seq(::youmecommon::protobuf::int32 value);

  // required int32 max_seq = 2;
  bool has_max_seq() const;
  void clear_max_seq();
  static const int kMaxSeqFieldNumber = 2;
  ::youmecommon::protobuf::int32 max_seq() const;
  void set_max_seq(::youmecommon::protobuf::int32 value);

  // required int32 total_recv_num = 3;
  bool has_total_recv_num() const;
  void clear_total_recv_num();
  static const int kTotalRecvNumFieldNumber = 3;
  ::youmecommon::protobuf::int32 total_recv_num() const;
  void set_total_recv_num(::youmecommon::protobuf::int32 value);

  // required int64 last_stat_st = 4;
  bool has_last_stat_st() const;
  void clear_last_stat_st();
  static const int kLastStatStFieldNumber = 4;
  ::youmecommon::protobuf::int64 last_stat_st() const;
  void set_last_stat_st(::youmecommon::protobuf::int64 value);

  // required int64 curr_stat_st = 5;
  bool has_curr_stat_st() const;
  void clear_curr_stat_st();
  static const int kCurrStatStFieldNumber = 5;
  ::youmecommon::protobuf::int64 curr_stat_st() const;
  void set_curr_stat_st(::youmecommon::protobuf::int64 value);

  // optional int32 media_type = 6 [default = 1];
  bool has_media_type() const;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 6;
  ::youmecommon::protobuf::int32 media_type() const;
  void set_media_type(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.LostPacketStatNotify)
 private:
  inline void set_has_min_seq();
  inline void clear_has_min_seq();
  inline void set_has_max_seq();
  inline void clear_has_max_seq();
  inline void set_has_total_recv_num();
  inline void clear_has_total_recv_num();
  inline void set_has_last_stat_st();
  inline void clear_has_last_stat_st();
  inline void set_has_curr_stat_st();
  inline void clear_has_curr_stat_st();
  inline void set_has_media_type();
  inline void clear_has_media_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 min_seq_;
  ::youmecommon::protobuf::int32 max_seq_;
  ::youmecommon::protobuf::int64 last_stat_st_;
  ::youmecommon::protobuf::int32 total_recv_num_;
  ::youmecommon::protobuf::int32 media_type_;
  ::youmecommon::protobuf::int64 curr_stat_st_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static LostPacketStatNotify* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Media_ctl_req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Media_ctl_req();
  virtual ~YouMeVoice_Command_Media_ctl_req();

  YouMeVoice_Command_Media_ctl_req(const YouMeVoice_Command_Media_ctl_req& from);

  inline YouMeVoice_Command_Media_ctl_req& operator=(const YouMeVoice_Command_Media_ctl_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Media_ctl_req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Media_ctl_req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Media_ctl_req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Media_ctl_req* New() const { return New(NULL); }

  YouMeVoice_Command_Media_ctl_req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Media_ctl_req& from);
  void MergeFrom(const YouMeVoice_Command_Media_ctl_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Media_ctl_req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::YouMeVoice_Media_ctl_Header& head() const;
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* mutable_head();
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* release_head();
  void set_allocated_head(::YouMeProtocol::YouMeVoice_Media_ctl_Header* head);

  // optional int32 stat_interval = 2;
  bool has_stat_interval() const;
  void clear_stat_interval();
  static const int kStatIntervalFieldNumber = 2;
  ::youmecommon::protobuf::int32 stat_interval() const;
  void set_stat_interval(::youmecommon::protobuf::int32 value);

  // optional int32 stat_type = 3;
  bool has_stat_type() const;
  void clear_stat_type();
  static const int kStatTypeFieldNumber = 3;
  ::youmecommon::protobuf::int32 stat_type() const;
  void set_stat_type(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_stat_interval();
  inline void clear_has_stat_interval();
  inline void set_has_stat_type();
  inline void clear_has_stat_type();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* head_;
  ::youmecommon::protobuf::int32 stat_interval_;
  ::youmecommon::protobuf::int32 stat_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Media_ctl_req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Media_ctl_rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Media_ctl_rsp();
  virtual ~YouMeVoice_Command_Media_ctl_rsp();

  YouMeVoice_Command_Media_ctl_rsp(const YouMeVoice_Command_Media_ctl_rsp& from);

  inline YouMeVoice_Command_Media_ctl_rsp& operator=(const YouMeVoice_Command_Media_ctl_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Media_ctl_rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Media_ctl_rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Media_ctl_rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Media_ctl_rsp* New() const { return New(NULL); }

  YouMeVoice_Command_Media_ctl_rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Media_ctl_rsp& from);
  void MergeFrom(const YouMeVoice_Command_Media_ctl_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Media_ctl_rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::YouMeVoice_Media_ctl_Header& head() const;
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* mutable_head();
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* release_head();
  void set_allocated_head(::YouMeProtocol::YouMeVoice_Media_ctl_Header* head);

  // optional .YouMeProtocol.LostPacketStatNotify packet_stat = 2;
  bool has_packet_stat() const;
  void clear_packet_stat();
  static const int kPacketStatFieldNumber = 2;
  const ::YouMeProtocol::LostPacketStatNotify& packet_stat() const;
  ::YouMeProtocol::LostPacketStatNotify* mutable_packet_stat();
  ::YouMeProtocol::LostPacketStatNotify* release_packet_stat();
  void set_allocated_packet_stat(::YouMeProtocol::LostPacketStatNotify* packet_stat);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_packet_stat();
  inline void clear_has_packet_stat();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* head_;
  ::YouMeProtocol::LostPacketStatNotify* packet_stat_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Media_ctl_rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_AVInput_Status_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_AVInput_Status_Req();
  virtual ~YouMeVoice_Command_AVInput_Status_Req();

  YouMeVoice_Command_AVInput_Status_Req(const YouMeVoice_Command_AVInput_Status_Req& from);

  inline YouMeVoice_Command_AVInput_Status_Req& operator=(const YouMeVoice_Command_AVInput_Status_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_AVInput_Status_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_AVInput_Status_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_AVInput_Status_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_AVInput_Status_Req* New() const { return New(NULL); }

  YouMeVoice_Command_AVInput_Status_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_AVInput_Status_Req& from);
  void MergeFrom(const YouMeVoice_Command_AVInput_Status_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_AVInput_Status_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 media_type = 4;
  bool has_media_type() const;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 4;
  ::youmecommon::protobuf::int32 media_type() const;
  void set_media_type(::youmecommon::protobuf::int32 value);

  // required int32 op = 5;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 5;
  ::youmecommon::protobuf::int32 op() const;
  void set_op(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_media_type();
  inline void clear_has_media_type();
  inline void set_has_op();
  inline void clear_has_op();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 media_type_;
  ::youmecommon::protobuf::int32 op_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_AVInput_Status_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_AVInput_Status_Rsq : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_AVInput_Status_Rsq();
  virtual ~YouMeVoice_Command_AVInput_Status_Rsq();

  YouMeVoice_Command_AVInput_Status_Rsq(const YouMeVoice_Command_AVInput_Status_Rsq& from);

  inline YouMeVoice_Command_AVInput_Status_Rsq& operator=(const YouMeVoice_Command_AVInput_Status_Rsq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_AVInput_Status_Rsq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_AVInput_Status_Rsq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_AVInput_Status_Rsq* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_AVInput_Status_Rsq* New() const { return New(NULL); }

  YouMeVoice_Command_AVInput_Status_Rsq* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_AVInput_Status_Rsq& from);
  void MergeFrom(const YouMeVoice_Command_AVInput_Status_Rsq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_AVInput_Status_Rsq* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required string userid = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 sessionid = 3;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_AVInput_Status_Rsq* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_AVInput_Notify : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_AVInput_Notify();
  virtual ~YouMeVoice_Command_AVInput_Notify();

  YouMeVoice_Command_AVInput_Notify(const YouMeVoice_Command_AVInput_Notify& from);

  inline YouMeVoice_Command_AVInput_Notify& operator=(const YouMeVoice_Command_AVInput_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_AVInput_Notify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_AVInput_Notify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_AVInput_Notify* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_AVInput_Notify* New() const { return New(NULL); }

  YouMeVoice_Command_AVInput_Notify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_AVInput_Notify& from);
  void MergeFrom(const YouMeVoice_Command_AVInput_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_AVInput_Notify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 media_type = 4;
  bool has_media_type() const;
  void clear_media_type();
  static const int kMediaTypeFieldNumber = 4;
  ::youmecommon::protobuf::int32 media_type() const;
  void set_media_type(::youmecommon::protobuf::int32 value);

  // required int32 op = 5;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 5;
  ::youmecommon::protobuf::int32 op() const;
  void set_op(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_media_type();
  inline void clear_has_media_type();
  inline void set_has_op();
  inline void clear_has_op();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 media_type_;
  ::youmecommon::protobuf::int32 op_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_AVInput_Notify* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Query_User_Video_Info_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Query_User_Video_Info_Req();
  virtual ~YouMeVoice_Command_Query_User_Video_Info_Req();

  YouMeVoice_Command_Query_User_Video_Info_Req(const YouMeVoice_Command_Query_User_Video_Info_Req& from);

  inline YouMeVoice_Command_Query_User_Video_Info_Req& operator=(const YouMeVoice_Command_Query_User_Video_Info_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Query_User_Video_Info_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Query_User_Video_Info_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Query_User_Video_Info_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Query_User_Video_Info_Req* New() const { return New(NULL); }

  YouMeVoice_Command_Query_User_Video_Info_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Query_User_Video_Info_Req& from);
  void MergeFrom(const YouMeVoice_Command_Query_User_Video_Info_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Query_User_Video_Info_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // repeated string other_userid_list = 3;
  int other_userid_list_size() const;
  void clear_other_userid_list();
  static const int kOtherUseridListFieldNumber = 3;
  const ::std::string& other_userid_list(int index) const;
  ::std::string* mutable_other_userid_list(int index);
  void set_other_userid_list(int index, const ::std::string& value);
  void set_other_userid_list(int index, const char* value);
  void set_other_userid_list(int index, const char* value, size_t size);
  ::std::string* add_other_userid_list();
  void add_other_userid_list(const ::std::string& value);
  void add_other_userid_list(const char* value);
  void add_other_userid_list(const char* value, size_t size);
  const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>& other_userid_list() const;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string>* mutable_other_userid_list();

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::std::string> other_userid_list_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Query_User_Video_Info_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_UserVedioInfo : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_UserVedioInfo();
  virtual ~YouMeVoice_UserVedioInfo();

  YouMeVoice_UserVedioInfo(const YouMeVoice_UserVedioInfo& from);

  inline YouMeVoice_UserVedioInfo& operator=(const YouMeVoice_UserVedioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_UserVedioInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_UserVedioInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_UserVedioInfo* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_UserVedioInfo* New() const { return New(NULL); }

  YouMeVoice_UserVedioInfo* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_UserVedioInfo& from);
  void MergeFrom(const YouMeVoice_UserVedioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_UserVedioInfo* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 other_sessionid = 1;
  bool has_other_sessionid() const;
  void clear_other_sessionid();
  static const int kOtherSessionidFieldNumber = 1;
  ::youmecommon::protobuf::int32 other_sessionid() const;
  void set_other_sessionid(::youmecommon::protobuf::int32 value);

  // required string other_userid = 2;
  bool has_other_userid() const;
  void clear_other_userid();
  static const int kOtherUseridFieldNumber = 2;
  const ::std::string& other_userid() const;
  void set_other_userid(const ::std::string& value);
  void set_other_userid(const char* value);
  void set_other_userid(const char* value, size_t size);
  ::std::string* mutable_other_userid();
  ::std::string* release_other_userid();
  void set_allocated_other_userid(::std::string* other_userid);

  // repeated .YouMeProtocol.YouMeVoice_Video_info video_info_list = 3;
  int video_info_list_size() const;
  void clear_video_info_list();
  static const int kVideoInfoListFieldNumber = 3;
  const ::YouMeProtocol::YouMeVoice_Video_info& video_info_list(int index) const;
  ::YouMeProtocol::YouMeVoice_Video_info* mutable_video_info_list(int index);
  ::YouMeProtocol::YouMeVoice_Video_info* add_video_info_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info >*
      mutable_video_info_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info >&
      video_info_list() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_UserVedioInfo)
 private:
  inline void set_has_other_sessionid();
  inline void clear_has_other_sessionid();
  inline void set_has_other_userid();
  inline void clear_has_other_userid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::internal::ArenaStringPtr other_userid_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info > video_info_list_;
  ::youmecommon::protobuf::int32 other_sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_UserVedioInfo* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_info : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_info();
  virtual ~YouMeVoice_Video_info();

  YouMeVoice_Video_info(const YouMeVoice_Video_info& from);

  inline YouMeVoice_Video_info& operator=(const YouMeVoice_Video_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_info& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_info* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_info* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_info* New() const { return New(NULL); }

  YouMeVoice_Video_info* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_info& from);
  void MergeFrom(const YouMeVoice_Video_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_info* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 resolution_type = 1;
  bool has_resolution_type() const;
  void clear_resolution_type();
  static const int kResolutionTypeFieldNumber = 1;
  ::youmecommon::protobuf::int32 resolution_type() const;
  void set_resolution_type(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_info)
 private:
  inline void set_has_resolution_type();
  inline void clear_has_resolution_type();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 resolution_type_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_info* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Query_User_Video_Info_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Query_User_Video_Info_Rsp();
  virtual ~YouMeVoice_Command_Query_User_Video_Info_Rsp();

  YouMeVoice_Command_Query_User_Video_Info_Rsp(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from);

  inline YouMeVoice_Command_Query_User_Video_Info_Rsp& operator=(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Query_User_Video_Info_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Query_User_Video_Info_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Query_User_Video_Info_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Query_User_Video_Info_Rsp* New() const { return New(NULL); }

  YouMeVoice_Command_Query_User_Video_Info_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from);
  void MergeFrom(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Query_User_Video_Info_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
  int user_video_info_list_size() const;
  void clear_user_video_info_list();
  static const int kUserVideoInfoListFieldNumber = 3;
  const ::YouMeProtocol::YouMeVoice_UserVedioInfo& user_video_info_list(int index) const;
  ::YouMeProtocol::YouMeVoice_UserVedioInfo* mutable_user_video_info_list(int index);
  ::YouMeProtocol::YouMeVoice_UserVedioInfo* add_user_video_info_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >*
      mutable_user_video_info_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >&
      user_video_info_list() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo > user_video_info_list_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Query_User_Video_Info_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Set_User_Video_Info_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Set_User_Video_Info_Req();
  virtual ~YouMeVoice_Command_Set_User_Video_Info_Req();

  YouMeVoice_Command_Set_User_Video_Info_Req(const YouMeVoice_Command_Set_User_Video_Info_Req& from);

  inline YouMeVoice_Command_Set_User_Video_Info_Req& operator=(const YouMeVoice_Command_Set_User_Video_Info_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Set_User_Video_Info_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Set_User_Video_Info_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Set_User_Video_Info_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Set_User_Video_Info_Req* New() const { return New(NULL); }

  YouMeVoice_Command_Set_User_Video_Info_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Set_User_Video_Info_Req& from);
  void MergeFrom(const YouMeVoice_Command_Set_User_Video_Info_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Set_User_Video_Info_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
  int user_video_info_list_size() const;
  void clear_user_video_info_list();
  static const int kUserVideoInfoListFieldNumber = 3;
  const ::YouMeProtocol::YouMeVoice_UserVedioInfo& user_video_info_list(int index) const;
  ::YouMeProtocol::YouMeVoice_UserVedioInfo* mutable_user_video_info_list(int index);
  ::YouMeProtocol::YouMeVoice_UserVedioInfo* add_user_video_info_list();
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >*
      mutable_user_video_info_list();
  const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >&
      user_video_info_list() const;

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo > user_video_info_list_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Set_User_Video_Info_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Set_User_Video_Info_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Set_User_Video_Info_Rsp();
  virtual ~YouMeVoice_Command_Set_User_Video_Info_Rsp();

  YouMeVoice_Command_Set_User_Video_Info_Rsp(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from);

  inline YouMeVoice_Command_Set_User_Video_Info_Rsp& operator=(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Set_User_Video_Info_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Set_User_Video_Info_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Set_User_Video_Info_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Set_User_Video_Info_Rsp* New() const { return New(NULL); }

  YouMeVoice_Command_Set_User_Video_Info_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from);
  void MergeFrom(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Set_User_Video_Info_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Set_User_Video_Info_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_Set_User_Video_Info_Notify : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_Set_User_Video_Info_Notify();
  virtual ~YouMeVoice_Command_Set_User_Video_Info_Notify();

  YouMeVoice_Command_Set_User_Video_Info_Notify(const YouMeVoice_Command_Set_User_Video_Info_Notify& from);

  inline YouMeVoice_Command_Set_User_Video_Info_Notify& operator=(const YouMeVoice_Command_Set_User_Video_Info_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_Set_User_Video_Info_Notify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_Set_User_Video_Info_Notify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_Set_User_Video_Info_Notify* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_Set_User_Video_Info_Notify* New() const { return New(NULL); }

  YouMeVoice_Command_Set_User_Video_Info_Notify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_Set_User_Video_Info_Notify& from);
  void MergeFrom(const YouMeVoice_Command_Set_User_Video_Info_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_Set_User_Video_Info_Notify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 set_sessionid = 2;
  bool has_set_sessionid() const;
  void clear_set_sessionid();
  static const int kSetSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 set_sessionid() const;
  void set_set_sessionid(::youmecommon::protobuf::int32 value);

  // required string set_user_id = 3;
  bool has_set_user_id() const;
  void clear_set_user_id();
  static const int kSetUserIdFieldNumber = 3;
  const ::std::string& set_user_id() const;
  void set_set_user_id(const ::std::string& value);
  void set_set_user_id(const char* value);
  void set_set_user_id(const char* value, size_t size);
  ::std::string* mutable_set_user_id();
  ::std::string* release_set_user_id();
  void set_allocated_set_user_id(::std::string* set_user_id);

  // required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
  bool has_video_info() const;
  void clear_video_info();
  static const int kVideoInfoFieldNumber = 4;
  const ::YouMeProtocol::YouMeVoice_Video_info& video_info() const;
  ::YouMeProtocol::YouMeVoice_Video_info* mutable_video_info();
  ::YouMeProtocol::YouMeVoice_Video_info* release_video_info();
  void set_allocated_video_info(::YouMeProtocol::YouMeVoice_Video_info* video_info);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_set_sessionid();
  inline void clear_has_set_sessionid();
  inline void set_has_set_user_id();
  inline void clear_has_set_user_id();
  inline void set_has_video_info();
  inline void clear_has_video_info();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr set_user_id_;
  ::YouMeProtocol::YouMeVoice_Video_info* video_info_;
  ::youmecommon::protobuf::int32 set_sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_Set_User_Video_Info_Notify* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Media_Info : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Media_Info();
  virtual ~YouMeVoice_Media_Info();

  YouMeVoice_Media_Info(const YouMeVoice_Media_Info& from);

  inline YouMeVoice_Media_Info& operator=(const YouMeVoice_Media_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Media_Info& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Media_Info* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Media_Info* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Media_Info* New() const { return New(NULL); }

  YouMeVoice_Media_Info* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Media_Info& from);
  void MergeFrom(const YouMeVoice_Media_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Media_Info* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 v_frame_rate = 1;
  bool has_v_frame_rate() const;
  void clear_v_frame_rate();
  static const int kVFrameRateFieldNumber = 1;
  ::youmecommon::protobuf::int32 v_frame_rate() const;
  void set_v_frame_rate(::youmecommon::protobuf::int32 value);

  // optional int32 v_bit_rate = 2;
  bool has_v_bit_rate() const;
  void clear_v_bit_rate();
  static const int kVBitRateFieldNumber = 2;
  ::youmecommon::protobuf::int32 v_bit_rate() const;
  void set_v_bit_rate(::youmecommon::protobuf::int32 value);

  // optional int32 v_lost_packet = 3;
  bool has_v_lost_packet() const;
  void clear_v_lost_packet();
  static const int kVLostPacketFieldNumber = 3;
  ::youmecommon::protobuf::int32 v_lost_packet() const;
  void set_v_lost_packet(::youmecommon::protobuf::int32 value);

  // optional int32 a_bit_rate = 4;
  bool has_a_bit_rate() const;
  void clear_a_bit_rate();
  static const int kABitRateFieldNumber = 4;
  ::youmecommon::protobuf::int32 a_bit_rate() const;
  void set_a_bit_rate(::youmecommon::protobuf::int32 value);

  // optional int32 a_lost_packet = 5;
  bool has_a_lost_packet() const;
  void clear_a_lost_packet();
  static const int kALostPacketFieldNumber = 5;
  ::youmecommon::protobuf::int32 a_lost_packet() const;
  void set_a_lost_packet(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Media_Info)
 private:
  inline void set_has_v_frame_rate();
  inline void clear_has_v_frame_rate();
  inline void set_has_v_bit_rate();
  inline void clear_has_v_bit_rate();
  inline void set_has_v_lost_packet();
  inline void clear_has_v_lost_packet();
  inline void set_has_a_bit_rate();
  inline void clear_has_a_bit_rate();
  inline void set_has_a_lost_packet();
  inline void clear_has_a_lost_packet();

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::youmecommon::protobuf::int32 v_frame_rate_;
  ::youmecommon::protobuf::int32 v_bit_rate_;
  ::youmecommon::protobuf::int32 v_lost_packet_;
  ::youmecommon::protobuf::int32 a_bit_rate_;
  ::youmecommon::protobuf::int32 a_lost_packet_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Media_Info* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_BussReport_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_BussReport_Req();
  virtual ~YouMeVoice_Command_BussReport_Req();

  YouMeVoice_Command_BussReport_Req(const YouMeVoice_Command_BussReport_Req& from);

  inline YouMeVoice_Command_BussReport_Req& operator=(const YouMeVoice_Command_BussReport_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_BussReport_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_BussReport_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_BussReport_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_BussReport_Req* New() const { return New(NULL); }

  YouMeVoice_Command_BussReport_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_BussReport_Req& from);
  void MergeFrom(const YouMeVoice_Command_BussReport_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_BussReport_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // optional .YouMeProtocol.YouMeVoice_Media_Info video_info = 3;
  bool has_video_info() const;
  void clear_video_info();
  static const int kVideoInfoFieldNumber = 3;
  const ::YouMeProtocol::YouMeVoice_Media_Info& video_info() const;
  ::YouMeProtocol::YouMeVoice_Media_Info* mutable_video_info();
  ::YouMeProtocol::YouMeVoice_Media_Info* release_video_info();
  void set_allocated_video_info(::YouMeProtocol::YouMeVoice_Media_Info* video_info);

  // optional string business_infos = 99;
  bool has_business_infos() const;
  void clear_business_infos();
  static const int kBusinessInfosFieldNumber = 99;
  const ::std::string& business_infos() const;
  void set_business_infos(const ::std::string& value);
  void set_business_infos(const char* value);
  void set_business_infos(const char* value, size_t size);
  ::std::string* mutable_business_infos();
  ::std::string* release_business_infos();
  void set_allocated_business_infos(::std::string* business_infos);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_video_info();
  inline void clear_has_video_info();
  inline void set_has_business_infos();
  inline void clear_has_business_infos();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::YouMeProtocol::YouMeVoice_Media_Info* video_info_;
  ::youmecommon::protobuf::internal::ArenaStringPtr business_infos_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_BussReport_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Command_BussReport_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Command_BussReport_Rsp();
  virtual ~YouMeVoice_Command_BussReport_Rsp();

  YouMeVoice_Command_BussReport_Rsp(const YouMeVoice_Command_BussReport_Rsp& from);

  inline YouMeVoice_Command_BussReport_Rsp& operator=(const YouMeVoice_Command_BussReport_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Command_BussReport_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Command_BussReport_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Command_BussReport_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Command_BussReport_Rsp* New() const { return New(NULL); }

  YouMeVoice_Command_BussReport_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Command_BussReport_Rsp& from);
  void MergeFrom(const YouMeVoice_Command_BussReport_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Command_BussReport_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Command_BussReport_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_SetPushSingle_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_SetPushSingle_Req();
  virtual ~YouMeVoice_Video_SetPushSingle_Req();

  YouMeVoice_Video_SetPushSingle_Req(const YouMeVoice_Video_SetPushSingle_Req& from);

  inline YouMeVoice_Video_SetPushSingle_Req& operator=(const YouMeVoice_Video_SetPushSingle_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_SetPushSingle_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_SetPushSingle_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_SetPushSingle_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_SetPushSingle_Req* New() const { return New(NULL); }

  YouMeVoice_Video_SetPushSingle_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_SetPushSingle_Req& from);
  void MergeFrom(const YouMeVoice_Video_SetPushSingle_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_SetPushSingle_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required string push_url = 5;
  bool has_push_url() const;
  void clear_push_url();
  static const int kPushUrlFieldNumber = 5;
  const ::std::string& push_url() const;
  void set_push_url(const ::std::string& value);
  void set_push_url(const char* value);
  void set_push_url(const char* value, size_t size);
  ::std::string* mutable_push_url();
  ::std::string* release_push_url();
  void set_allocated_push_url(::std::string* push_url);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_push_url();
  inline void clear_has_push_url();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::internal::ArenaStringPtr push_url_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_SetPushSingle_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_SetPushSingle_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_SetPushSingle_Rsp();
  virtual ~YouMeVoice_Video_SetPushSingle_Rsp();

  YouMeVoice_Video_SetPushSingle_Rsp(const YouMeVoice_Video_SetPushSingle_Rsp& from);

  inline YouMeVoice_Video_SetPushSingle_Rsp& operator=(const YouMeVoice_Video_SetPushSingle_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_SetPushSingle_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_SetPushSingle_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_SetPushSingle_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_SetPushSingle_Rsp* New() const { return New(NULL); }

  YouMeVoice_Video_SetPushSingle_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_SetPushSingle_Rsp& from);
  void MergeFrom(const YouMeVoice_Video_SetPushSingle_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_SetPushSingle_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required int32 result = 5;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 5;
  ::youmecommon::protobuf::int32 result() const;
  void set_result(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 result_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_SetPushSingle_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_RemovePushSingle_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_RemovePushSingle_Req();
  virtual ~YouMeVoice_Video_RemovePushSingle_Req();

  YouMeVoice_Video_RemovePushSingle_Req(const YouMeVoice_Video_RemovePushSingle_Req& from);

  inline YouMeVoice_Video_RemovePushSingle_Req& operator=(const YouMeVoice_Video_RemovePushSingle_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_RemovePushSingle_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_RemovePushSingle_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_RemovePushSingle_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_RemovePushSingle_Req* New() const { return New(NULL); }

  YouMeVoice_Video_RemovePushSingle_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_RemovePushSingle_Req& from);
  void MergeFrom(const YouMeVoice_Video_RemovePushSingle_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_RemovePushSingle_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_user_id();
  inline void clear_has_user_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_RemovePushSingle_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_RemovePushSingle_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_RemovePushSingle_Rsp();
  virtual ~YouMeVoice_Video_RemovePushSingle_Rsp();

  YouMeVoice_Video_RemovePushSingle_Rsp(const YouMeVoice_Video_RemovePushSingle_Rsp& from);

  inline YouMeVoice_Video_RemovePushSingle_Rsp& operator=(const YouMeVoice_Video_RemovePushSingle_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_RemovePushSingle_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_RemovePushSingle_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_RemovePushSingle_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_RemovePushSingle_Rsp* New() const { return New(NULL); }

  YouMeVoice_Video_RemovePushSingle_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_RemovePushSingle_Rsp& from);
  void MergeFrom(const YouMeVoice_Video_RemovePushSingle_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_RemovePushSingle_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string user_id = 4;
  bool has_user_id() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  const ::std::string& user_id() const;
  void set_user_id(const ::std::string& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  ::std::string* mutable_user_id();
  ::std::string* release_user_id();
  void set_allocated_user_id(::std::string* user_id);

  // required int32 result = 5;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 5;
  ::youmecommon::protobuf::int32 result() const;
  void set_result(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 result_;
  ::youmecommon::protobuf::internal::ArenaStringPtr user_id_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_RemovePushSingle_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_SetPushMix_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_SetPushMix_Req();
  virtual ~YouMeVoice_Video_SetPushMix_Req();

  YouMeVoice_Video_SetPushMix_Req(const YouMeVoice_Video_SetPushMix_Req& from);

  inline YouMeVoice_Video_SetPushMix_Req& operator=(const YouMeVoice_Video_SetPushMix_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_SetPushMix_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_SetPushMix_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_SetPushMix_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_SetPushMix_Req* New() const { return New(NULL); }

  YouMeVoice_Video_SetPushMix_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_SetPushMix_Req& from);
  void MergeFrom(const YouMeVoice_Video_SetPushMix_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_SetPushMix_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string primary_userid = 4;
  bool has_primary_userid() const;
  void clear_primary_userid();
  static const int kPrimaryUseridFieldNumber = 4;
  const ::std::string& primary_userid() const;
  void set_primary_userid(const ::std::string& value);
  void set_primary_userid(const char* value);
  void set_primary_userid(const char* value, size_t size);
  ::std::string* mutable_primary_userid();
  ::std::string* release_primary_userid();
  void set_allocated_primary_userid(::std::string* primary_userid);

  // required string push_url = 5;
  bool has_push_url() const;
  void clear_push_url();
  static const int kPushUrlFieldNumber = 5;
  const ::std::string& push_url() const;
  void set_push_url(const ::std::string& value);
  void set_push_url(const char* value);
  void set_push_url(const char* value, size_t size);
  ::std::string* mutable_push_url();
  ::std::string* release_push_url();
  void set_allocated_push_url(::std::string* push_url);

  // optional int32 video_width = 6;
  bool has_video_width() const;
  void clear_video_width();
  static const int kVideoWidthFieldNumber = 6;
  ::youmecommon::protobuf::int32 video_width() const;
  void set_video_width(::youmecommon::protobuf::int32 value);

  // optional int32 video_height = 7;
  bool has_video_height() const;
  void clear_video_height();
  static const int kVideoHeightFieldNumber = 7;
  ::youmecommon::protobuf::int32 video_height() const;
  void set_video_height(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_primary_userid();
  inline void clear_has_primary_userid();
  inline void set_has_push_url();
  inline void clear_has_push_url();
  inline void set_has_video_width();
  inline void clear_has_video_width();
  inline void set_has_video_height();
  inline void clear_has_video_height();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr primary_userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 video_width_;
  ::youmecommon::protobuf::internal::ArenaStringPtr push_url_;
  ::youmecommon::protobuf::int32 video_height_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_SetPushMix_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_SetPushMix_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_SetPushMix_Rsp();
  virtual ~YouMeVoice_Video_SetPushMix_Rsp();

  YouMeVoice_Video_SetPushMix_Rsp(const YouMeVoice_Video_SetPushMix_Rsp& from);

  inline YouMeVoice_Video_SetPushMix_Rsp& operator=(const YouMeVoice_Video_SetPushMix_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_SetPushMix_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_SetPushMix_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_SetPushMix_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_SetPushMix_Rsp* New() const { return New(NULL); }

  YouMeVoice_Video_SetPushMix_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_SetPushMix_Rsp& from);
  void MergeFrom(const YouMeVoice_Video_SetPushMix_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_SetPushMix_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required int32 result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::youmecommon::protobuf::int32 result() const;
  void set_result(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_SetPushMix_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_ClearPushMix_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_ClearPushMix_Req();
  virtual ~YouMeVoice_Video_ClearPushMix_Req();

  YouMeVoice_Video_ClearPushMix_Req(const YouMeVoice_Video_ClearPushMix_Req& from);

  inline YouMeVoice_Video_ClearPushMix_Req& operator=(const YouMeVoice_Video_ClearPushMix_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_ClearPushMix_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_ClearPushMix_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_ClearPushMix_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_ClearPushMix_Req* New() const { return New(NULL); }

  YouMeVoice_Video_ClearPushMix_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_ClearPushMix_Req& from);
  void MergeFrom(const YouMeVoice_Video_ClearPushMix_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_ClearPushMix_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_ClearPushMix_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_ClearPushMix_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_ClearPushMix_Rsp();
  virtual ~YouMeVoice_Video_ClearPushMix_Rsp();

  YouMeVoice_Video_ClearPushMix_Rsp(const YouMeVoice_Video_ClearPushMix_Rsp& from);

  inline YouMeVoice_Video_ClearPushMix_Rsp& operator=(const YouMeVoice_Video_ClearPushMix_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_ClearPushMix_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_ClearPushMix_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_ClearPushMix_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_ClearPushMix_Rsp* New() const { return New(NULL); }

  YouMeVoice_Video_ClearPushMix_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_ClearPushMix_Rsp& from);
  void MergeFrom(const YouMeVoice_Video_ClearPushMix_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_ClearPushMix_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required int32 result = 4;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 4;
  ::youmecommon::protobuf::int32 result() const;
  void set_result(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 result_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_ClearPushMix_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_AddPushMixUser_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_AddPushMixUser_Req();
  virtual ~YouMeVoice_Video_AddPushMixUser_Req();

  YouMeVoice_Video_AddPushMixUser_Req(const YouMeVoice_Video_AddPushMixUser_Req& from);

  inline YouMeVoice_Video_AddPushMixUser_Req& operator=(const YouMeVoice_Video_AddPushMixUser_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_AddPushMixUser_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_AddPushMixUser_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_AddPushMixUser_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_AddPushMixUser_Req* New() const { return New(NULL); }

  YouMeVoice_Video_AddPushMixUser_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_AddPushMixUser_Req& from);
  void MergeFrom(const YouMeVoice_Video_AddPushMixUser_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_AddPushMixUser_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string userid = 4;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 4;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 x = 5;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 5;
  ::youmecommon::protobuf::int32 x() const;
  void set_x(::youmecommon::protobuf::int32 value);

  // required int32 y = 6;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 6;
  ::youmecommon::protobuf::int32 y() const;
  void set_y(::youmecommon::protobuf::int32 value);

  // required int32 z = 7;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 7;
  ::youmecommon::protobuf::int32 z() const;
  void set_z(::youmecommon::protobuf::int32 value);

  // required int32 video_width = 8;
  bool has_video_width() const;
  void clear_video_width();
  static const int kVideoWidthFieldNumber = 8;
  ::youmecommon::protobuf::int32 video_width() const;
  void set_video_width(::youmecommon::protobuf::int32 value);

  // required int32 video_height = 9;
  bool has_video_height() const;
  void clear_video_height();
  static const int kVideoHeightFieldNumber = 9;
  ::youmecommon::protobuf::int32 video_height() const;
  void set_video_height(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_video_width();
  inline void clear_has_video_width();
  inline void set_has_video_height();
  inline void clear_has_video_height();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 x_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 y_;
  ::youmecommon::protobuf::int32 z_;
  ::youmecommon::protobuf::int32 video_width_;
  ::youmecommon::protobuf::int32 video_height_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_AddPushMixUser_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_AddPushMixUser_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_AddPushMixUser_Rsp();
  virtual ~YouMeVoice_Video_AddPushMixUser_Rsp();

  YouMeVoice_Video_AddPushMixUser_Rsp(const YouMeVoice_Video_AddPushMixUser_Rsp& from);

  inline YouMeVoice_Video_AddPushMixUser_Rsp& operator=(const YouMeVoice_Video_AddPushMixUser_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_AddPushMixUser_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_AddPushMixUser_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_AddPushMixUser_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_AddPushMixUser_Rsp* New() const { return New(NULL); }

  YouMeVoice_Video_AddPushMixUser_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_AddPushMixUser_Rsp& from);
  void MergeFrom(const YouMeVoice_Video_AddPushMixUser_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_AddPushMixUser_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string userid = 4;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 4;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 result = 5;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 5;
  ::youmecommon::protobuf::int32 result() const;
  void set_result(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 result_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_AddPushMixUser_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_DelPushMixUser_Req : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_DelPushMixUser_Req();
  virtual ~YouMeVoice_Video_DelPushMixUser_Req();

  YouMeVoice_Video_DelPushMixUser_Req(const YouMeVoice_Video_DelPushMixUser_Req& from);

  inline YouMeVoice_Video_DelPushMixUser_Req& operator=(const YouMeVoice_Video_DelPushMixUser_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_DelPushMixUser_Req& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_DelPushMixUser_Req* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_DelPushMixUser_Req* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_DelPushMixUser_Req* New() const { return New(NULL); }

  YouMeVoice_Video_DelPushMixUser_Req* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_DelPushMixUser_Req& from);
  void MergeFrom(const YouMeVoice_Video_DelPushMixUser_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_DelPushMixUser_Req* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string userid = 4;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 4;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 sessionid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_DelPushMixUser_Req* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_DelPushMixUser_Rsp : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_DelPushMixUser_Rsp();
  virtual ~YouMeVoice_Video_DelPushMixUser_Rsp();

  YouMeVoice_Video_DelPushMixUser_Rsp(const YouMeVoice_Video_DelPushMixUser_Rsp& from);

  inline YouMeVoice_Video_DelPushMixUser_Rsp& operator=(const YouMeVoice_Video_DelPushMixUser_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_DelPushMixUser_Rsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_DelPushMixUser_Rsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_DelPushMixUser_Rsp* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_DelPushMixUser_Rsp* New() const { return New(NULL); }

  YouMeVoice_Video_DelPushMixUser_Rsp* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_DelPushMixUser_Rsp& from);
  void MergeFrom(const YouMeVoice_Video_DelPushMixUser_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_DelPushMixUser_Rsp* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required int32 sessionid = 2;
  bool has_sessionid() const;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  ::youmecommon::protobuf::int32 sessionid() const;
  void set_sessionid(::youmecommon::protobuf::int32 value);

  // required string channelid = 3;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 3;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string userid = 4;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 4;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required int32 result = 5;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 5;
  ::youmecommon::protobuf::int32 result() const;
  void set_result(::youmecommon::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::int32 sessionid_;
  ::youmecommon::protobuf::int32 result_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_DelPushMixUser_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class YouMeVoice_Video_OtherSetPushMix_Notify : public ::youmecommon::protobuf::MessageLite {
 public:
  YouMeVoice_Video_OtherSetPushMix_Notify();
  virtual ~YouMeVoice_Video_OtherSetPushMix_Notify();

  YouMeVoice_Video_OtherSetPushMix_Notify(const YouMeVoice_Video_OtherSetPushMix_Notify& from);

  inline YouMeVoice_Video_OtherSetPushMix_Notify& operator=(const YouMeVoice_Video_OtherSetPushMix_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const YouMeVoice_Video_OtherSetPushMix_Notify& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const YouMeVoice_Video_OtherSetPushMix_Notify* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(YouMeVoice_Video_OtherSetPushMix_Notify* other);

  // implements Message ----------------------------------------------

  inline YouMeVoice_Video_OtherSetPushMix_Notify* New() const { return New(NULL); }

  YouMeVoice_Video_OtherSetPushMix_Notify* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const YouMeVoice_Video_OtherSetPushMix_Notify& from);
  void MergeFrom(const YouMeVoice_Video_OtherSetPushMix_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YouMeVoice_Video_OtherSetPushMix_Notify* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.ServerPacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::ServerPacketHead& head() const;
  ::YouMeProtocol::ServerPacketHead* mutable_head();
  ::YouMeProtocol::ServerPacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::ServerPacketHead* head);

  // required string channelid = 2;
  bool has_channelid() const;
  void clear_channelid();
  static const int kChannelidFieldNumber = 2;
  const ::std::string& channelid() const;
  void set_channelid(const ::std::string& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  ::std::string* mutable_channelid();
  ::std::string* release_channelid();
  void set_allocated_channelid(::std::string* channelid);

  // required string userid = 3;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_userid();
  inline void clear_has_userid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::ServerPacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr channelid_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_serverlogin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_serverlogin_2eproto();
  #endif
  friend void protobuf_AssignDesc_serverlogin_2eproto();
  friend void protobuf_ShutdownFile_serverlogin_2eproto();

  void InitAsDefaultInstance();
  static YouMeVoice_Video_OtherSetPushMix_Notify* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Bridge

// required string bridgeid = 1;
inline bool Bridge::has_bridgeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bridge::set_has_bridgeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bridge::clear_has_bridgeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bridge::clear_bridgeid() {
  bridgeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bridgeid();
}
inline const ::std::string& Bridge::bridgeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.bridgeid)
  return bridgeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bridge::set_bridgeid(const ::std::string& value) {
  set_has_bridgeid();
  bridgeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.Bridge.bridgeid)
}
inline void Bridge::set_bridgeid(const char* value) {
  set_has_bridgeid();
  bridgeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.Bridge.bridgeid)
}
inline void Bridge::set_bridgeid(const char* value, size_t size) {
  set_has_bridgeid();
  bridgeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.Bridge.bridgeid)
}
inline ::std::string* Bridge::mutable_bridgeid() {
  set_has_bridgeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Bridge.bridgeid)
  return bridgeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bridge::release_bridgeid() {
  clear_has_bridgeid();
  return bridgeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bridge::set_allocated_bridgeid(::std::string* bridgeid) {
  if (bridgeid != NULL) {
    set_has_bridgeid();
  } else {
    clear_has_bridgeid();
  }
  bridgeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), bridgeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Bridge.bridgeid)
}

// optional .YouMeProtocol.PacketHead head = 2;
inline bool Bridge::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bridge::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bridge::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bridge::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& Bridge::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* Bridge::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Bridge.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* Bridge::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void Bridge::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Bridge.head)
}

// optional int32 mode = 3;
inline bool Bridge::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Bridge::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Bridge::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Bridge::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::youmecommon::protobuf::int32 Bridge::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.mode)
  return mode_;
}
inline void Bridge::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Bridge.mode)
}

// optional string area = 4;
inline bool Bridge::has_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Bridge::set_has_area() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Bridge::clear_has_area() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Bridge::clear_area() {
  area_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_area();
}
inline const ::std::string& Bridge::area() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.area)
  return area_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bridge::set_area(const ::std::string& value) {
  set_has_area();
  area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.Bridge.area)
}
inline void Bridge::set_area(const char* value) {
  set_has_area();
  area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.Bridge.area)
}
inline void Bridge::set_area(const char* value, size_t size) {
  set_has_area();
  area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.Bridge.area)
}
inline ::std::string* Bridge::mutable_area() {
  set_has_area();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Bridge.area)
  return area_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bridge::release_area() {
  clear_has_area();
  return area_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bridge::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    set_has_area();
  } else {
    clear_has_area();
  }
  area_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Bridge.area)
}

// -------------------------------------------------------------------

// Serveraddr

// required string ip = 1;
inline bool Serveraddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Serveraddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Serveraddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Serveraddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Serveraddr::ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.ip)
  return ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Serveraddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.ip)
}
inline void Serveraddr::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.Serveraddr.ip)
}
inline void Serveraddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.Serveraddr.ip)
}
inline ::std::string* Serveraddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Serveraddr.ip)
  return ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Serveraddr::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Serveraddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Serveraddr.ip)
}

// optional int32 port = 2;
inline bool Serveraddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Serveraddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Serveraddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Serveraddr::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::youmecommon::protobuf::int32 Serveraddr::port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.port)
  return port_;
}
inline void Serveraddr::set_port(::youmecommon::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.port)
}

// optional int32 status = 3;
inline bool Serveraddr::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Serveraddr::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Serveraddr::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Serveraddr::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 Serveraddr::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.status)
  return status_;
}
inline void Serveraddr::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.status)
}

// optional int32 timeout = 4;
inline bool Serveraddr::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Serveraddr::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Serveraddr::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Serveraddr::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::youmecommon::protobuf::int32 Serveraddr::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.timeout)
  return timeout_;
}
inline void Serveraddr::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.timeout)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_JoinConference

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_JoinConference::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_JoinConference::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_JoinConference::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinConference::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinConference::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_JoinConference::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.head)
}

// required string roomid = 2;
inline bool YouMeVoice_Command_JoinConference::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_JoinConference::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_JoinConference::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConference::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}
inline void YouMeVoice_Command_JoinConference::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}
inline void YouMeVoice_Command_JoinConference::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}
inline ::std::string* YouMeVoice_Command_JoinConference::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_JoinConference::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConference::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}

// optional int32 capturerate = 3;
inline bool YouMeVoice_Command_JoinConference::has_capturerate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_capturerate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_capturerate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_JoinConference::clear_capturerate() {
  capturerate_ = 0;
  clear_has_capturerate();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::capturerate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.capturerate)
  return capturerate_;
}
inline void YouMeVoice_Command_JoinConference::set_capturerate(::youmecommon::protobuf::int32 value) {
  set_has_capturerate();
  capturerate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.capturerate)
}

// optional int32 encodecomplex = 4;
inline bool YouMeVoice_Command_JoinConference::has_encodecomplex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_encodecomplex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_encodecomplex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_JoinConference::clear_encodecomplex() {
  encodecomplex_ = 0;
  clear_has_encodecomplex();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::encodecomplex() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.encodecomplex)
  return encodecomplex_;
}
inline void YouMeVoice_Command_JoinConference::set_encodecomplex(::youmecommon::protobuf::int32 value) {
  set_has_encodecomplex();
  encodecomplex_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.encodecomplex)
}

// optional bool enablevbr = 5;
inline bool YouMeVoice_Command_JoinConference::has_enablevbr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_enablevbr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_enablevbr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_JoinConference::clear_enablevbr() {
  enablevbr_ = false;
  clear_has_enablevbr();
}
inline bool YouMeVoice_Command_JoinConference::enablevbr() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.enablevbr)
  return enablevbr_;
}
inline void YouMeVoice_Command_JoinConference::set_enablevbr(bool value) {
  set_has_enablevbr();
  enablevbr_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.enablevbr)
}

// optional int32 maxbandlimited = 6;
inline bool YouMeVoice_Command_JoinConference::has_maxbandlimited() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_maxbandlimited() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_maxbandlimited() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_JoinConference::clear_maxbandlimited() {
  maxbandlimited_ = 0;
  clear_has_maxbandlimited();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::maxbandlimited() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.maxbandlimited)
  return maxbandlimited_;
}
inline void YouMeVoice_Command_JoinConference::set_maxbandlimited(::youmecommon::protobuf::int32 value) {
  set_has_maxbandlimited();
  maxbandlimited_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.maxbandlimited)
}

// optional bool interbandfec = 7;
inline bool YouMeVoice_Command_JoinConference::has_interbandfec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_interbandfec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_interbandfec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Command_JoinConference::clear_interbandfec() {
  interbandfec_ = false;
  clear_has_interbandfec();
}
inline bool YouMeVoice_Command_JoinConference::interbandfec() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.interbandfec)
  return interbandfec_;
}
inline void YouMeVoice_Command_JoinConference::set_interbandfec(bool value) {
  set_has_interbandfec();
  interbandfec_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.interbandfec)
}

// optional bool outbandfec = 8;
inline bool YouMeVoice_Command_JoinConference::has_outbandfec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_outbandfec() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_outbandfec() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_JoinConference::clear_outbandfec() {
  outbandfec_ = false;
  clear_has_outbandfec();
}
inline bool YouMeVoice_Command_JoinConference::outbandfec() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.outbandfec)
  return outbandfec_;
}
inline void YouMeVoice_Command_JoinConference::set_outbandfec(bool value) {
  set_has_outbandfec();
  outbandfec_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.outbandfec)
}

// optional int32 feclost = 9;
inline bool YouMeVoice_Command_JoinConference::has_feclost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_feclost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_feclost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YouMeVoice_Command_JoinConference::clear_feclost() {
  feclost_ = 0;
  clear_has_feclost();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::feclost() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.feclost)
  return feclost_;
}
inline void YouMeVoice_Command_JoinConference::set_feclost(::youmecommon::protobuf::int32 value) {
  set_has_feclost();
  feclost_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.feclost)
}

// optional bool enabledtx = 10;
inline bool YouMeVoice_Command_JoinConference::has_enabledtx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_enabledtx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_enabledtx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void YouMeVoice_Command_JoinConference::clear_enabledtx() {
  enabledtx_ = false;
  clear_has_enabledtx();
}
inline bool YouMeVoice_Command_JoinConference::enabledtx() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.enabledtx)
  return enabledtx_;
}
inline void YouMeVoice_Command_JoinConference::set_enabledtx(bool value) {
  set_has_enabledtx();
  enabledtx_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.enabledtx)
}

// optional string userid = 11;
inline bool YouMeVoice_Command_JoinConference::has_userid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_userid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_userid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void YouMeVoice_Command_JoinConference::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_JoinConference::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConference::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}
inline void YouMeVoice_Command_JoinConference::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}
inline void YouMeVoice_Command_JoinConference::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}
inline ::std::string* YouMeVoice_Command_JoinConference::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_JoinConference::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConference::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}

// optional bool needUserList = 12;
inline bool YouMeVoice_Command_JoinConference::has_needuserlist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_needuserlist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_needuserlist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void YouMeVoice_Command_JoinConference::clear_needuserlist() {
  needuserlist_ = false;
  clear_has_needuserlist();
}
inline bool YouMeVoice_Command_JoinConference::needuserlist() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.needUserList)
  return needuserlist_;
}
inline void YouMeVoice_Command_JoinConference::set_needuserlist(bool value) {
  set_has_needuserlist();
  needuserlist_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.needUserList)
}

// optional string token = 13;
inline bool YouMeVoice_Command_JoinConference::has_token() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_token() {
  _has_bits_[0] |= 0x00001000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_token() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void YouMeVoice_Command_JoinConference::clear_token() {
  token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& YouMeVoice_Command_JoinConference::token() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
  return token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConference::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}
inline void YouMeVoice_Command_JoinConference::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}
inline void YouMeVoice_Command_JoinConference::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}
inline ::std::string* YouMeVoice_Command_JoinConference::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
  return token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_JoinConference::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConference::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}

// optional bool check_room_exist = 14 [default = false];
inline bool YouMeVoice_Command_JoinConference::has_check_room_exist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_check_room_exist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_check_room_exist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void YouMeVoice_Command_JoinConference::clear_check_room_exist() {
  check_room_exist_ = false;
  clear_has_check_room_exist();
}
inline bool YouMeVoice_Command_JoinConference::check_room_exist() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.check_room_exist)
  return check_room_exist_;
}
inline void YouMeVoice_Command_JoinConference::set_check_room_exist(bool value) {
  set_has_check_room_exist();
  check_room_exist_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.check_room_exist)
}

// optional bool av_notify = 15;
inline bool YouMeVoice_Command_JoinConference::has_av_notify() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_av_notify() {
  _has_bits_[0] |= 0x00004000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_av_notify() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void YouMeVoice_Command_JoinConference::clear_av_notify() {
  av_notify_ = false;
  clear_has_av_notify();
}
inline bool YouMeVoice_Command_JoinConference::av_notify() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.av_notify)
  return av_notify_;
}
inline void YouMeVoice_Command_JoinConference::set_av_notify(bool value) {
  set_has_av_notify();
  av_notify_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.av_notify)
}

// optional .YouMeProtocol.YouMeUserRole user_role = 16;
inline bool YouMeVoice_Command_JoinConference::has_user_role() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_user_role() {
  _has_bits_[0] |= 0x00008000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_user_role() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void YouMeVoice_Command_JoinConference::clear_user_role() {
  user_role_ = 0;
  clear_has_user_role();
}
inline ::YouMeProtocol::YouMeUserRole YouMeVoice_Command_JoinConference::user_role() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.user_role)
  return static_cast< ::YouMeProtocol::YouMeUserRole >(user_role_);
}
inline void YouMeVoice_Command_JoinConference::set_user_role(::YouMeProtocol::YouMeUserRole value) {
  assert(::YouMeProtocol::YouMeUserRole_IsValid(value));
  set_has_user_role();
  user_role_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.user_role)
}

// optional int32 source = 17;
inline bool YouMeVoice_Command_JoinConference::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void YouMeVoice_Command_JoinConference::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::source() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.source)
  return source_;
}
inline void YouMeVoice_Command_JoinConference::set_source(::youmecommon::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.source)
}

// optional bool auto_recive = 18 [default = true];
inline bool YouMeVoice_Command_JoinConference::has_auto_recive() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_auto_recive() {
  _has_bits_[0] |= 0x00020000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_auto_recive() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void YouMeVoice_Command_JoinConference::clear_auto_recive() {
  auto_recive_ = true;
  clear_has_auto_recive();
}
inline bool YouMeVoice_Command_JoinConference::auto_recive() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.auto_recive)
  return auto_recive_;
}
inline void YouMeVoice_Command_JoinConference::set_auto_recive(bool value) {
  set_has_auto_recive();
  auto_recive_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.auto_recive)
}

// optional uint32 timestamp = 21;
inline bool YouMeVoice_Command_JoinConference::has_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void YouMeVoice_Command_JoinConference::set_has_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void YouMeVoice_Command_JoinConference::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void YouMeVoice_Command_JoinConference::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::youmecommon::protobuf::uint32 YouMeVoice_Command_JoinConference::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.timestamp)
  return timestamp_;
}
inline void YouMeVoice_Command_JoinConference::set_timestamp(::youmecommon::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.timestamp)
}

// -------------------------------------------------------------------

// StreamProxyInfo

// required string ip = 1;
inline bool StreamProxyInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamProxyInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamProxyInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamProxyInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& StreamProxyInfo::ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.StreamProxyInfo.ip)
  return ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamProxyInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.StreamProxyInfo.ip)
}
inline void StreamProxyInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.StreamProxyInfo.ip)
}
inline void StreamProxyInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.StreamProxyInfo.ip)
}
inline ::std::string* StreamProxyInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.StreamProxyInfo.ip)
  return ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StreamProxyInfo::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StreamProxyInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.StreamProxyInfo.ip)
}

// required uint32 port = 2;
inline bool StreamProxyInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamProxyInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamProxyInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamProxyInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::youmecommon::protobuf::uint32 StreamProxyInfo::port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.StreamProxyInfo.port)
  return port_;
}
inline void StreamProxyInfo::set_port(::youmecommon::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.StreamProxyInfo.port)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_JoinConferenceResponse_Speaker

// optional int32 sessionid = 1;
inline bool YouMeVoice_Command_JoinConferenceResponse_Speaker::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse_Speaker::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.sessionid)
}

// optional string userid = 2;
inline bool YouMeVoice_Command_JoinConferenceResponse_Speaker::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_JoinConferenceResponse_Speaker::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}
inline ::std::string* YouMeVoice_Command_JoinConferenceResponse_Speaker::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_JoinConferenceResponse_Speaker::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_JoinConferenceResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_JoinConferenceResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinConferenceResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinConferenceResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.head)
}

// required int32 udpport = 2;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_udpport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_udpport() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_udpport() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_udpport() {
  udpport_ = 0;
  clear_has_udpport();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::udpport() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.udpport)
  return udpport_;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_udpport(::youmecommon::protobuf::int32 value) {
  set_has_udpport();
  udpport_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.udpport)
}

// required int32 sessionid = 3;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.sessionid)
}

// optional int32 timeout = 4;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.timeout)
  return timeout_;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.timeout)
}

// optional int32 media_ctl_port = 5;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_media_ctl_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_media_ctl_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_media_ctl_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_media_ctl_port() {
  media_ctl_port_ = 0;
  clear_has_media_ctl_port();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::media_ctl_port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.media_ctl_port)
  return media_ctl_port_;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_media_ctl_port(::youmecommon::protobuf::int32 value) {
  set_has_media_ctl_port();
  media_ctl_port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.media_ctl_port)
}

// optional .YouMeProtocol.StreamProxyInfo stream_proxy = 6;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_stream_proxy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_stream_proxy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_stream_proxy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_stream_proxy() {
  if (stream_proxy_ != NULL) stream_proxy_->::YouMeProtocol::StreamProxyInfo::Clear();
  clear_has_stream_proxy();
}
inline const ::YouMeProtocol::StreamProxyInfo& YouMeVoice_Command_JoinConferenceResponse::stream_proxy() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.stream_proxy)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stream_proxy_ != NULL ? *stream_proxy_ : *default_instance().stream_proxy_;
#else
  return stream_proxy_ != NULL ? *stream_proxy_ : *default_instance_->stream_proxy_;
#endif
}
inline ::YouMeProtocol::StreamProxyInfo* YouMeVoice_Command_JoinConferenceResponse::mutable_stream_proxy() {
  set_has_stream_proxy();
  if (stream_proxy_ == NULL) {
    stream_proxy_ = new ::YouMeProtocol::StreamProxyInfo;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.stream_proxy)
  return stream_proxy_;
}
inline ::YouMeProtocol::StreamProxyInfo* YouMeVoice_Command_JoinConferenceResponse::release_stream_proxy() {
  clear_has_stream_proxy();
  ::YouMeProtocol::StreamProxyInfo* temp = stream_proxy_;
  stream_proxy_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_allocated_stream_proxy(::YouMeProtocol::StreamProxyInfo* stream_proxy) {
  delete stream_proxy_;
  stream_proxy_ = stream_proxy;
  if (stream_proxy) {
    set_has_stream_proxy();
  } else {
    clear_has_stream_proxy();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.stream_proxy)
}

// repeated .YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker speaker_list = 7;
inline int YouMeVoice_Command_JoinConferenceResponse::speaker_list_size() const {
  return speaker_list_.size();
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_speaker_list() {
  speaker_list_.Clear();
}
inline const ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker& YouMeVoice_Command_JoinConferenceResponse::speaker_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_.Get(index);
}
inline ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker* YouMeVoice_Command_JoinConferenceResponse::mutable_speaker_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_.Mutable(index);
}
inline ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker* YouMeVoice_Command_JoinConferenceResponse::add_speaker_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker >*
YouMeVoice_Command_JoinConferenceResponse::mutable_speaker_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return &speaker_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker >&
YouMeVoice_Command_JoinConferenceResponse::speaker_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_;
}

// optional uint64 business_id = 10;
inline bool YouMeVoice_Command_JoinConferenceResponse::has_business_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_has_business_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_has_business_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_JoinConferenceResponse::clear_business_id() {
  business_id_ = GOOGLE_ULONGLONG(0);
  clear_has_business_id();
}
inline ::youmecommon::protobuf::uint64 YouMeVoice_Command_JoinConferenceResponse::business_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.business_id)
  return business_id_;
}
inline void YouMeVoice_Command_JoinConferenceResponse::set_business_id(::youmecommon::protobuf::uint64 value) {
  set_has_business_id();
  business_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.business_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_LeaveConference

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_LeaveConference::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_LeaveConference::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_LeaveConference::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_LeaveConference::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_LeaveConference::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConference.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveConference::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveConference.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveConference::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_LeaveConference::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveConference.head)
}

// required string roomid = 2;
inline bool YouMeVoice_Command_LeaveConference::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_LeaveConference::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_LeaveConference::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_LeaveConference::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_LeaveConference::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_LeaveConference::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}
inline void YouMeVoice_Command_LeaveConference::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}
inline void YouMeVoice_Command_LeaveConference::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}
inline ::std::string* YouMeVoice_Command_LeaveConference::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_LeaveConference::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_LeaveConference::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}

// required int32 sessionid = 3;
inline bool YouMeVoice_Command_LeaveConference::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_LeaveConference::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_LeaveConference::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_LeaveConference::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_LeaveConference::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConference.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_LeaveConference::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveConference.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_ChannelUserList_Request

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_ChannelUserList_Request::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_ChannelUserList_Request::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_ChannelUserList_Request::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_ChannelUserList_Request::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_ChannelUserList_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.sessionid)
}

// required string channel_id = 3;
inline bool YouMeVoice_Command_ChannelUserList_Request::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
inline const ::std::string& YouMeVoice_Command_ChannelUserList_Request::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}
inline ::std::string* YouMeVoice_Command_ChannelUserList_Request::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_ChannelUserList_Request::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}

// optional int32 start_index = 4;
inline bool YouMeVoice_Command_ChannelUserList_Request::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::start_index() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.start_index)
  return start_index_;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_start_index(::youmecommon::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.start_index)
}

// optional int32 req_count = 5;
inline bool YouMeVoice_Command_ChannelUserList_Request::has_req_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_has_req_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_has_req_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_req_count() {
  req_count_ = 0;
  clear_has_req_count();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::req_count() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.req_count)
  return req_count_;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_req_count(::youmecommon::protobuf::int32 value) {
  set_has_req_count();
  req_count_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.req_count)
}

// optional int32 notify_flag = 6 [default = 0];
inline bool YouMeVoice_Command_ChannelUserList_Request::has_notify_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_has_notify_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_has_notify_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_ChannelUserList_Request::clear_notify_flag() {
  notify_flag_ = 0;
  clear_has_notify_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::notify_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.notify_flag)
  return notify_flag_;
}
inline void YouMeVoice_Command_ChannelUserList_Request::set_notify_flag(::youmecommon::protobuf::int32 value) {
  set_has_notify_flag();
  notify_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.notify_flag)
}

// -------------------------------------------------------------------

// YouMeVoice_UserInfo

// required string userid = 1;
inline bool YouMeVoice_UserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_UserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_UserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_UserInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.userid)
}
inline void YouMeVoice_UserInfo::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserInfo.userid)
}
inline void YouMeVoice_UserInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserInfo.userid)
}
inline ::std::string* YouMeVoice_UserInfo::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserInfo.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_UserInfo::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserInfo.userid)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_UserInfo::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_UserInfo::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_UserInfo::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_UserInfo::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_UserInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.sessionid)
  return sessionid_;
}
inline void YouMeVoice_UserInfo::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.sessionid)
}

// optional string user_outer_ip = 3;
inline bool YouMeVoice_UserInfo::has_user_outer_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_UserInfo::set_has_user_outer_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_UserInfo::clear_has_user_outer_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_UserInfo::clear_user_outer_ip() {
  user_outer_ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_outer_ip();
}
inline const ::std::string& YouMeVoice_UserInfo::user_outer_ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
  return user_outer_ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserInfo::set_user_outer_ip(const ::std::string& value) {
  set_has_user_outer_ip();
  user_outer_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}
inline void YouMeVoice_UserInfo::set_user_outer_ip(const char* value) {
  set_has_user_outer_ip();
  user_outer_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}
inline void YouMeVoice_UserInfo::set_user_outer_ip(const char* value, size_t size) {
  set_has_user_outer_ip();
  user_outer_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}
inline ::std::string* YouMeVoice_UserInfo::mutable_user_outer_ip() {
  set_has_user_outer_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
  return user_outer_ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_UserInfo::release_user_outer_ip() {
  clear_has_user_outer_ip();
  return user_outer_ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserInfo::set_allocated_user_outer_ip(::std::string* user_outer_ip) {
  if (user_outer_ip != NULL) {
    set_has_user_outer_ip();
  } else {
    clear_has_user_outer_ip();
  }
  user_outer_ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_outer_ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}

// optional string user_inner_ip = 4;
inline bool YouMeVoice_UserInfo::has_user_inner_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_UserInfo::set_has_user_inner_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_UserInfo::clear_has_user_inner_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_UserInfo::clear_user_inner_ip() {
  user_inner_ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_inner_ip();
}
inline const ::std::string& YouMeVoice_UserInfo::user_inner_ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
  return user_inner_ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserInfo::set_user_inner_ip(const ::std::string& value) {
  set_has_user_inner_ip();
  user_inner_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}
inline void YouMeVoice_UserInfo::set_user_inner_ip(const char* value) {
  set_has_user_inner_ip();
  user_inner_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}
inline void YouMeVoice_UserInfo::set_user_inner_ip(const char* value, size_t size) {
  set_has_user_inner_ip();
  user_inner_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}
inline ::std::string* YouMeVoice_UserInfo::mutable_user_inner_ip() {
  set_has_user_inner_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
  return user_inner_ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_UserInfo::release_user_inner_ip() {
  clear_has_user_inner_ip();
  return user_inner_ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserInfo::set_allocated_user_inner_ip(::std::string* user_inner_ip) {
  if (user_inner_ip != NULL) {
    set_has_user_inner_ip();
  } else {
    clear_has_user_inner_ip();
  }
  user_inner_ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_inner_ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}

// optional uint32 user_inner_port = 5;
inline bool YouMeVoice_UserInfo::has_user_inner_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_UserInfo::set_has_user_inner_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_UserInfo::clear_has_user_inner_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_UserInfo::clear_user_inner_port() {
  user_inner_port_ = 0u;
  clear_has_user_inner_port();
}
inline ::youmecommon::protobuf::uint32 YouMeVoice_UserInfo::user_inner_port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.user_inner_port)
  return user_inner_port_;
}
inline void YouMeVoice_UserInfo::set_user_inner_port(::youmecommon::protobuf::uint32 value) {
  set_has_user_inner_port();
  user_inner_port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.user_inner_port)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_ChannelUserList_Response

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_ChannelUserList_Response::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_ChannelUserList_Response::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserList_Response::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserList_Response::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.head)
}

// repeated string userid = 2;
inline int YouMeVoice_Command_ChannelUserList_Response::userid_size() const {
  return userid_.size();
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_userid() {
  userid_.Clear();
}
inline const ::std::string& YouMeVoice_Command_ChannelUserList_Response::userid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return userid_.Get(index);
}
inline ::std::string* YouMeVoice_Command_ChannelUserList_Response::mutable_userid(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return userid_.Mutable(index);
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_userid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  userid_.Mutable(index)->assign(value);
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_userid(int index, const char* value) {
  userid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_userid(int index, const char* value, size_t size) {
  userid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
inline ::std::string* YouMeVoice_Command_ChannelUserList_Response::add_userid() {
  return userid_.Add();
}
inline void YouMeVoice_Command_ChannelUserList_Response::add_userid(const ::std::string& value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
inline void YouMeVoice_Command_ChannelUserList_Response::add_userid(const char* value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
inline void YouMeVoice_Command_ChannelUserList_Response::add_userid(const char* value, size_t size) {
  userid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeVoice_Command_ChannelUserList_Response::userid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return userid_;
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeVoice_Command_ChannelUserList_Response::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return &userid_;
}

// optional string req_channel_id = 3;
inline bool YouMeVoice_Command_ChannelUserList_Response::has_req_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_has_req_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_has_req_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_req_channel_id() {
  req_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_channel_id();
}
inline const ::std::string& YouMeVoice_Command_ChannelUserList_Response::req_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
  return req_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_req_channel_id(const ::std::string& value) {
  set_has_req_channel_id();
  req_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_req_channel_id(const char* value) {
  set_has_req_channel_id();
  req_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_req_channel_id(const char* value, size_t size) {
  set_has_req_channel_id();
  req_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}
inline ::std::string* YouMeVoice_Command_ChannelUserList_Response::mutable_req_channel_id() {
  set_has_req_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
  return req_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_ChannelUserList_Response::release_req_channel_id() {
  clear_has_req_channel_id();
  return req_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_allocated_req_channel_id(::std::string* req_channel_id) {
  if (req_channel_id != NULL) {
    set_has_req_channel_id();
  } else {
    clear_has_req_channel_id();
  }
  req_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), req_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}

// optional int32 start_index = 4;
inline bool YouMeVoice_Command_ChannelUserList_Response::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Response::start_index() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.start_index)
  return start_index_;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_start_index(::youmecommon::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.start_index)
}

// optional int32 left_count = 5;
inline bool YouMeVoice_Command_ChannelUserList_Response::has_left_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_has_left_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_has_left_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_left_count() {
  left_count_ = 0;
  clear_has_left_count();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Response::left_count() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.left_count)
  return left_count_;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_left_count(::youmecommon::protobuf::int32 value) {
  set_has_left_count();
  left_count_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.left_count)
}

// optional int32 next_index = 6;
inline bool YouMeVoice_Command_ChannelUserList_Response::has_next_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_has_next_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_has_next_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_next_index() {
  next_index_ = 0;
  clear_has_next_index();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Response::next_index() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.next_index)
  return next_index_;
}
inline void YouMeVoice_Command_ChannelUserList_Response::set_next_index(::youmecommon::protobuf::int32 value) {
  set_has_next_index();
  next_index_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.next_index)
}

// repeated .YouMeProtocol.YouMeVoice_UserInfo userinfo = 7;
inline int YouMeVoice_Command_ChannelUserList_Response::userinfo_size() const {
  return userinfo_.size();
}
inline void YouMeVoice_Command_ChannelUserList_Response::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::YouMeProtocol::YouMeVoice_UserInfo& YouMeVoice_Command_ChannelUserList_Response::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_.Get(index);
}
inline ::YouMeProtocol::YouMeVoice_UserInfo* YouMeVoice_Command_ChannelUserList_Response::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_.Mutable(index);
}
inline ::YouMeProtocol::YouMeVoice_UserInfo* YouMeVoice_Command_ChannelUserList_Response::add_userinfo() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo >*
YouMeVoice_Command_ChannelUserList_Response::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return &userinfo_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo >&
YouMeVoice_Command_ChannelUserList_Response::userinfo() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_;
}

// -------------------------------------------------------------------

// JoinLeaveUser

// optional string userid = 1;
inline bool JoinLeaveUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinLeaveUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinLeaveUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinLeaveUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& JoinLeaveUser::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.JoinLeaveUser.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinLeaveUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.JoinLeaveUser.userid)
}
inline void JoinLeaveUser::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.JoinLeaveUser.userid)
}
inline void JoinLeaveUser::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.JoinLeaveUser.userid)
}
inline ::std::string* JoinLeaveUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.JoinLeaveUser.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JoinLeaveUser::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JoinLeaveUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.JoinLeaveUser.userid)
}

// optional int32 flag = 2;
inline bool JoinLeaveUser::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinLeaveUser::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinLeaveUser::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinLeaveUser::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::youmecommon::protobuf::int32 JoinLeaveUser::flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.JoinLeaveUser.flag)
  return flag_;
}
inline void JoinLeaveUser::set_flag(::youmecommon::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.JoinLeaveUser.flag)
}

// optional int32 sessionid = 3;
inline bool JoinLeaveUser::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinLeaveUser::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinLeaveUser::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinLeaveUser::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 JoinLeaveUser::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.JoinLeaveUser.sessionid)
  return sessionid_;
}
inline void JoinLeaveUser::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.JoinLeaveUser.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_ChannelUserJoinLeaveNotify

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_ChannelUserJoinLeaveNotify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_ChannelUserJoinLeaveNotify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserJoinLeaveNotify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.head)
}

// required string channel_id = 2;
inline bool YouMeVoice_Command_ChannelUserJoinLeaveNotify::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
inline const ::std::string& YouMeVoice_Command_ChannelUserJoinLeaveNotify::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}
inline ::std::string* YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_ChannelUserJoinLeaveNotify::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}

// repeated .YouMeProtocol.JoinLeaveUser user_list = 3;
inline int YouMeVoice_Command_ChannelUserJoinLeaveNotify::user_list_size() const {
  return user_list_.size();
}
inline void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_user_list() {
  user_list_.Clear();
}
inline const ::YouMeProtocol::JoinLeaveUser& YouMeVoice_Command_ChannelUserJoinLeaveNotify::user_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_.Get(index);
}
inline ::YouMeProtocol::JoinLeaveUser* YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_.Mutable(index);
}
inline ::YouMeProtocol::JoinLeaveUser* YouMeVoice_Command_ChannelUserJoinLeaveNotify::add_user_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser >*
YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return &user_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser >&
YouMeVoice_Command_ChannelUserJoinLeaveNotify::user_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_;
}

// -------------------------------------------------------------------

// YouMeVoice_Command_LeaveConferenceResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_LeaveConferenceResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_LeaveConferenceResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_LeaveConferenceResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_LeaveConferenceResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_LeaveConferenceResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveConferenceResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveConferenceResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_LeaveConferenceResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse.head)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Heart

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Heart::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Heart::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Heart::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Heart::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Heart::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Heart.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Heart::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Heart.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Heart::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Heart::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Heart.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_Heart::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Heart::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Heart::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Heart::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Heart::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Heart.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_Heart::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Heart.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_HeartResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_HeartResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_HeartResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_HeartResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_HeartResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_HeartResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_HeartResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_HeartResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_HeartResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_HeartResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_HeartResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_HeartResponse.head)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Kickout

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Kickout::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Kickout::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Kickout::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Kickout::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Kickout::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Kickout.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Kickout::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Kickout.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Kickout::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Kickout::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Kickout.head)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_MicStatus

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_MicStatus::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_MicStatus::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_MicStatus::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_MicStatus::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_MicStatus::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_MicStatus::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatus.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_MicStatus::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_MicStatus::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatus.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_MicStatus::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_MicStatus::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_MicStatus::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_MicStatus::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MicStatus::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_MicStatus::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatus.sessionid)
}

// required string userid = 3;
inline bool YouMeVoice_Command_MicStatus::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_MicStatus::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_MicStatus::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_MicStatus::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_MicStatus::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MicStatus::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}
inline void YouMeVoice_Command_MicStatus::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}
inline void YouMeVoice_Command_MicStatus::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}
inline ::std::string* YouMeVoice_Command_MicStatus::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MicStatus::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MicStatus::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}

// required int32 status = 4;
inline bool YouMeVoice_Command_MicStatus::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_MicStatus::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_MicStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_MicStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MicStatus::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.status)
  return status_;
}
inline void YouMeVoice_Command_MicStatus::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatus.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_MicStatusServer

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_MicStatusServer::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_MicStatusServer::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_MicStatusServer::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_MicStatusServer::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MicStatusServer::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatusServer.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MicStatusServer::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatusServer.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MicStatusServer::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_MicStatusServer::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatusServer.head)
}

// required string userid = 2;
inline bool YouMeVoice_Command_MicStatusServer::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_MicStatusServer::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_MicStatusServer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_MicStatusServer::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_MicStatusServer::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MicStatusServer::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}
inline void YouMeVoice_Command_MicStatusServer::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}
inline void YouMeVoice_Command_MicStatusServer::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}
inline ::std::string* YouMeVoice_Command_MicStatusServer::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MicStatusServer::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MicStatusServer::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}

// required int32 status = 3;
inline bool YouMeVoice_Command_MicStatusServer::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_MicStatusServer::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_MicStatusServer::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_MicStatusServer::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MicStatusServer::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatusServer.status)
  return status_;
}
inline void YouMeVoice_Command_MicStatusServer::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatusServer.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_CommonStatus

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_CommonStatus::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_CommonStatus::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_CommonStatus::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_CommonStatus::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_CommonStatus::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_CommonStatus::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatus.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_CommonStatus::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_CommonStatus::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatus.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_CommonStatus::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_CommonStatus::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_CommonStatus::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_CommonStatus::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CommonStatus::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_CommonStatus::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.sessionid)
}

// required string userid = 3;
inline bool YouMeVoice_Command_CommonStatus::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_CommonStatus::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_CommonStatus::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_CommonStatus::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_CommonStatus::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_CommonStatus::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}
inline void YouMeVoice_Command_CommonStatus::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}
inline void YouMeVoice_Command_CommonStatus::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}
inline ::std::string* YouMeVoice_Command_CommonStatus::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_CommonStatus::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_CommonStatus::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}

// required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
inline bool YouMeVoice_Command_CommonStatus::has_eventtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_CommonStatus::set_has_eventtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_CommonStatus::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_CommonStatus::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::YouMeProtocol::STATUS_EVENT_TYPE YouMeVoice_Command_CommonStatus::eventtype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.eventType)
  return static_cast< ::YouMeProtocol::STATUS_EVENT_TYPE >(eventtype_);
}
inline void YouMeVoice_Command_CommonStatus::set_eventtype(::YouMeProtocol::STATUS_EVENT_TYPE value) {
  assert(::YouMeProtocol::STATUS_EVENT_TYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.eventType)
}

// required int32 status = 5;
inline bool YouMeVoice_Command_CommonStatus::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_CommonStatus::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_CommonStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_CommonStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CommonStatus::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.status)
  return status_;
}
inline void YouMeVoice_Command_CommonStatus::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_CommonStatusServer

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_CommonStatusServer::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_CommonStatusServer::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_CommonStatusServer::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CommonStatusServer::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CommonStatusServer::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_CommonStatusServer::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.head)
}

// required string userid = 2;
inline bool YouMeVoice_Command_CommonStatusServer::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_CommonStatusServer::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_CommonStatusServer::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_CommonStatusServer::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}
inline void YouMeVoice_Command_CommonStatusServer::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}
inline void YouMeVoice_Command_CommonStatusServer::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}
inline ::std::string* YouMeVoice_Command_CommonStatusServer::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_CommonStatusServer::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_CommonStatusServer::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}

// required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
inline bool YouMeVoice_Command_CommonStatusServer::has_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_CommonStatusServer::set_has_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::YouMeProtocol::STATUS_EVENT_TYPE YouMeVoice_Command_CommonStatusServer::eventtype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.eventType)
  return static_cast< ::YouMeProtocol::STATUS_EVENT_TYPE >(eventtype_);
}
inline void YouMeVoice_Command_CommonStatusServer::set_eventtype(::YouMeProtocol::STATUS_EVENT_TYPE value) {
  assert(::YouMeProtocol::STATUS_EVENT_TYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.eventType)
}

// required int32 status = 4;
inline bool YouMeVoice_Command_CommonStatusServer::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_CommonStatusServer::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_CommonStatusServer::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CommonStatusServer::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.status)
  return status_;
}
inline void YouMeVoice_Command_CommonStatusServer::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Recive_Members

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Recive_Members::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Recive_Members::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Recive_Members::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Recive_Members::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Recive_Members::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Recive_Members.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Recive_Members::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Recive_Members.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Recive_Members::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Recive_Members::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Recive_Members.head)
}

// repeated string userid = 2;
inline int YouMeVoice_Command_Recive_Members::userid_size() const {
  return userid_.size();
}
inline void YouMeVoice_Command_Recive_Members::clear_userid() {
  userid_.Clear();
}
inline const ::std::string& YouMeVoice_Command_Recive_Members::userid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return userid_.Get(index);
}
inline ::std::string* YouMeVoice_Command_Recive_Members::mutable_userid(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return userid_.Mutable(index);
}
inline void YouMeVoice_Command_Recive_Members::set_userid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  userid_.Mutable(index)->assign(value);
}
inline void YouMeVoice_Command_Recive_Members::set_userid(int index, const char* value) {
  userid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
inline void YouMeVoice_Command_Recive_Members::set_userid(int index, const char* value, size_t size) {
  userid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
inline ::std::string* YouMeVoice_Command_Recive_Members::add_userid() {
  return userid_.Add();
}
inline void YouMeVoice_Command_Recive_Members::add_userid(const ::std::string& value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
inline void YouMeVoice_Command_Recive_Members::add_userid(const char* value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
inline void YouMeVoice_Command_Recive_Members::add_userid(const char* value, size_t size) {
  userid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeVoice_Command_Recive_Members::userid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return userid_;
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeVoice_Command_Recive_Members::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return &userid_;
}

// -------------------------------------------------------------------

// YouMeVoice_Command_JoinRoomRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_JoinRoomRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_JoinRoomRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinRoomRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinRoomRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_JoinRoomRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinRoomRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.sessionid)
}

// optional string roomid = 3;
inline bool YouMeVoice_Command_JoinRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_JoinRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}
inline void YouMeVoice_Command_JoinRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}
inline void YouMeVoice_Command_JoinRoomRequest::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}
inline ::std::string* YouMeVoice_Command_JoinRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_JoinRoomRequest::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}

// optional bool check_room_exist = 4 [default = false];
inline bool YouMeVoice_Command_JoinRoomRequest::has_check_room_exist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_has_check_room_exist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_has_check_room_exist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_check_room_exist() {
  check_room_exist_ = false;
  clear_has_check_room_exist();
}
inline bool YouMeVoice_Command_JoinRoomRequest::check_room_exist() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.check_room_exist)
  return check_room_exist_;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_check_room_exist(bool value) {
  set_has_check_room_exist();
  check_room_exist_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.check_room_exist)
}

// optional bool av_notify = 5;
inline bool YouMeVoice_Command_JoinRoomRequest::has_av_notify() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_has_av_notify() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_has_av_notify() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_JoinRoomRequest::clear_av_notify() {
  av_notify_ = false;
  clear_has_av_notify();
}
inline bool YouMeVoice_Command_JoinRoomRequest::av_notify() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.av_notify)
  return av_notify_;
}
inline void YouMeVoice_Command_JoinRoomRequest::set_av_notify(bool value) {
  set_has_av_notify();
  av_notify_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.av_notify)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_JoinRoomResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_JoinRoomResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_JoinRoomResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinRoomResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinRoomResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_JoinRoomResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinRoomResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.sessionid)
}

// optional string roomid = 3;
inline bool YouMeVoice_Command_JoinRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_JoinRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinRoomResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}
inline void YouMeVoice_Command_JoinRoomResponse::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}
inline void YouMeVoice_Command_JoinRoomResponse::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}
inline ::std::string* YouMeVoice_Command_JoinRoomResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_JoinRoomResponse::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_JoinRoomResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}

// optional bool success = 4;
inline bool YouMeVoice_Command_JoinRoomResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_JoinRoomResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool YouMeVoice_Command_JoinRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.success)
  return success_;
}
inline void YouMeVoice_Command_JoinRoomResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.success)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_LeaveRoomRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_LeaveRoomRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_LeaveRoomRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_LeaveRoomRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_LeaveRoomRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveRoomRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveRoomRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_LeaveRoomRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_LeaveRoomRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_LeaveRoomRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_LeaveRoomRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.sessionid)
}

// optional string roomid = 3;
inline bool YouMeVoice_Command_LeaveRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_LeaveRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_LeaveRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_LeaveRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}
inline ::std::string* YouMeVoice_Command_LeaveRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_LeaveRoomRequest::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_LeaveRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_LeaveRoomResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_LeaveRoomResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_LeaveRoomResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveRoomResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveRoomResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_LeaveRoomResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_LeaveRoomResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.sessionid)
}

// optional string roomid = 3;
inline bool YouMeVoice_Command_LeaveRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_LeaveRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}
inline ::std::string* YouMeVoice_Command_LeaveRoomResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_LeaveRoomResponse::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}

// optional bool success = 4;
inline bool YouMeVoice_Command_LeaveRoomResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_LeaveRoomResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool YouMeVoice_Command_LeaveRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.success)
  return success_;
}
inline void YouMeVoice_Command_LeaveRoomResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.success)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_SpeakToRoomRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_SpeakToRoomRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_SpeakToRoomRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_SpeakToRoomRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_SpeakToRoomRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_SpeakToRoomRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_SpeakToRoomRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.sessionid)
}

// optional string roomid = 3;
inline bool YouMeVoice_Command_SpeakToRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_SpeakToRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}
inline ::std::string* YouMeVoice_Command_SpeakToRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_SpeakToRoomRequest::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}

// optional uint32 timestamp = 4;
inline bool YouMeVoice_Command_SpeakToRoomRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::youmecommon::protobuf::uint32 YouMeVoice_Command_SpeakToRoomRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.timestamp)
  return timestamp_;
}
inline void YouMeVoice_Command_SpeakToRoomRequest::set_timestamp(::youmecommon::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.timestamp)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_SpeakToRoomResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_SpeakToRoomResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_SpeakToRoomResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SpeakToRoomResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SpeakToRoomResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_SpeakToRoomResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_SpeakToRoomResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.sessionid)
}

// optional string roomid = 3;
inline bool YouMeVoice_Command_SpeakToRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
inline const ::std::string& YouMeVoice_Command_SpeakToRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}
inline ::std::string* YouMeVoice_Command_SpeakToRoomResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_SpeakToRoomResponse::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}

// optional uint32 timestamp = 4;
inline bool YouMeVoice_Command_SpeakToRoomResponse::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::youmecommon::protobuf::uint32 YouMeVoice_Command_SpeakToRoomResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.timestamp)
  return timestamp_;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_timestamp(::youmecommon::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.timestamp)
}

// optional bool success = 5;
inline bool YouMeVoice_Command_SpeakToRoomResponse::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool YouMeVoice_Command_SpeakToRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.success)
  return success_;
}
inline void YouMeVoice_Command_SpeakToRoomResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.success)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Session2UserIdRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Session2UserIdRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Session2UserIdRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Session2UserIdRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Session2UserIdRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Session2UserIdRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Session2UserIdRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Session2UserIdRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Session2UserIdRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.head)
}

// repeated int32 sessionid = 2;
inline int YouMeVoice_Command_Session2UserIdRequest::sessionid_size() const {
  return sessionid_.size();
}
inline void YouMeVoice_Command_Session2UserIdRequest::clear_sessionid() {
  sessionid_.Clear();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Session2UserIdRequest::sessionid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
  return sessionid_.Get(index);
}
inline void YouMeVoice_Command_Session2UserIdRequest::set_sessionid(int index, ::youmecommon::protobuf::int32 value) {
  sessionid_.Set(index, value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
}
inline void YouMeVoice_Command_Session2UserIdRequest::add_sessionid(::youmecommon::protobuf::int32 value) {
  sessionid_.Add(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
}
inline const ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 >&
YouMeVoice_Command_Session2UserIdRequest::sessionid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
  return sessionid_;
}
inline ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 >*
YouMeVoice_Command_Session2UserIdRequest::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
  return &sessionid_;
}

// optional int32 user_session = 3;
inline bool YouMeVoice_Command_Session2UserIdRequest::has_user_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Session2UserIdRequest::set_has_user_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Session2UserIdRequest::clear_has_user_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Session2UserIdRequest::clear_user_session() {
  user_session_ = 0;
  clear_has_user_session();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Session2UserIdRequest::user_session() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.user_session)
  return user_session_;
}
inline void YouMeVoice_Command_Session2UserIdRequest::set_user_session(::youmecommon::protobuf::int32 value) {
  set_has_user_session();
  user_session_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.user_session)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Session2UserIdResponse_Speaker

// optional int32 sessionid = 1;
inline bool YouMeVoice_Command_Session2UserIdResponse_Speaker::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Session2UserIdResponse_Speaker::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.sessionid)
}

// optional string userid = 2;
inline bool YouMeVoice_Command_Session2UserIdResponse_Speaker::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_Session2UserIdResponse_Speaker::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}
inline ::std::string* YouMeVoice_Command_Session2UserIdResponse_Speaker::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Session2UserIdResponse_Speaker::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Session2UserIdResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Session2UserIdResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Session2UserIdResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Session2UserIdResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Session2UserIdResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Session2UserIdResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Session2UserIdResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Session2UserIdResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Session2UserIdResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.head)
}

// repeated .YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker result = 2;
inline int YouMeVoice_Command_Session2UserIdResponse::result_size() const {
  return result_.size();
}
inline void YouMeVoice_Command_Session2UserIdResponse::clear_result() {
  result_.Clear();
}
inline const ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker& YouMeVoice_Command_Session2UserIdResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_.Get(index);
}
inline ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker* YouMeVoice_Command_Session2UserIdResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_.Mutable(index);
}
inline ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker* YouMeVoice_Command_Session2UserIdResponse::add_result() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker >*
YouMeVoice_Command_Session2UserIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return &result_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker >&
YouMeVoice_Command_Session2UserIdResponse::result() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicInitRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Fight4MicInitRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicInitRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicInitRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.session_id)
}

// required int32 mode = 3;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mode)
  return mode_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mode)
}

// optional string room_id = 4;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicInitRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicInitRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicInitRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}

// optional int32 max_num = 5;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_max_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_max_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_max_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_max_num() {
  max_num_ = 0;
  clear_has_max_num();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::max_num() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.max_num)
  return max_num_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_max_num(::youmecommon::protobuf::int32 value) {
  set_has_max_num();
  max_num_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.max_num)
}

// optional int32 talk_time_out = 6;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.talk_time_out)
  return talk_time_out_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.talk_time_out)
}

// optional int32 judge_time_out = 7;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_judge_time_out() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_judge_time_out() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_judge_time_out() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_judge_time_out() {
  judge_time_out_ = 0;
  clear_has_judge_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::judge_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.judge_time_out)
  return judge_time_out_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_judge_time_out(::youmecommon::protobuf::int32 value) {
  set_has_judge_time_out();
  judge_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.judge_time_out)
}

// optional string json_str = 8;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicInitRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}
inline ::std::string* YouMeVoice_Command_Fight4MicInitRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicInitRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}

// optional int32 notify_flag = 9;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_notify_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_notify_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_notify_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_notify_flag() {
  notify_flag_ = 0;
  clear_has_notify_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::notify_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.notify_flag)
  return notify_flag_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_notify_flag(::youmecommon::protobuf::int32 value) {
  set_has_notify_flag();
  notify_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.notify_flag)
}

// optional int32 mic_enable_flag = 10;
inline bool YouMeVoice_Command_Fight4MicInitRequest::has_mic_enable_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_has_mic_enable_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_has_mic_enable_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::clear_mic_enable_flag() {
  mic_enable_flag_ = 0;
  clear_has_mic_enable_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::mic_enable_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mic_enable_flag)
  return mic_enable_flag_;
}
inline void YouMeVoice_Command_Fight4MicInitRequest::set_mic_enable_flag(::youmecommon::protobuf::int32 value) {
  set_has_mic_enable_flag();
  mic_enable_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mic_enable_flag)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicInitResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicInitResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicInitResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicInitResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicInitResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_Fight4MicInitResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_Fight4MicInitResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.session_id)
}

// optional string room_id = 4;
inline bool YouMeVoice_Command_Fight4MicInitResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicInitResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicInitResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicInitResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicInitResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicInitResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Fight4MicRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_Fight4MicRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.session_id)
}

// optional string room_id = 3;
inline bool YouMeVoice_Command_Fight4MicRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}

// optional int32 score = 4;
inline bool YouMeVoice_Command_Fight4MicRequest::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicRequest::score() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.score)
  return score_;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_score(::youmecommon::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.score)
}

// optional string json_params = 5;
inline bool YouMeVoice_Command_Fight4MicRequest::has_json_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_Fight4MicRequest::set_has_json_params() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_has_json_params() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicRequest::clear_json_params() {
  json_params_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_params();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicRequest::json_params() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
  return json_params_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicRequest::set_json_params(const ::std::string& value) {
  set_has_json_params();
  json_params_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}
inline void YouMeVoice_Command_Fight4MicRequest::set_json_params(const char* value) {
  set_has_json_params();
  json_params_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}
inline void YouMeVoice_Command_Fight4MicRequest::set_json_params(const char* value, size_t size) {
  set_has_json_params();
  json_params_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}
inline ::std::string* YouMeVoice_Command_Fight4MicRequest::mutable_json_params() {
  set_has_json_params();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
  return json_params_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicRequest::release_json_params() {
  clear_has_json_params();
  return json_params_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicRequest::set_allocated_json_params(::std::string* json_params) {
  if (json_params != NULL) {
    set_has_json_params();
  } else {
    clear_has_json_params();
  }
  json_params_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_params);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_Fight4MicResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_Fight4MicResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.session_id)
}

// optional string room_id = 4;
inline bool YouMeVoice_Command_Fight4MicResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}
inline void YouMeVoice_Command_Fight4MicResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}
inline void YouMeVoice_Command_Fight4MicResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}

// optional int32 mic_enable_flag = 5;
inline bool YouMeVoice_Command_Fight4MicResponse::has_mic_enable_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_has_mic_enable_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_has_mic_enable_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_mic_enable_flag() {
  mic_enable_flag_ = 0;
  clear_has_mic_enable_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::mic_enable_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.mic_enable_flag)
  return mic_enable_flag_;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_mic_enable_flag(::youmecommon::protobuf::int32 value) {
  set_has_mic_enable_flag();
  mic_enable_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.mic_enable_flag)
}

// optional int32 talk_time = 6;
inline bool YouMeVoice_Command_Fight4MicResponse::has_talk_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_has_talk_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_has_talk_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_Fight4MicResponse::clear_talk_time() {
  talk_time_ = 0;
  clear_has_talk_time();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::talk_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.talk_time)
  return talk_time_;
}
inline void YouMeVoice_Command_Fight4MicResponse::set_talk_time(::youmecommon::protobuf::int32 value) {
  set_has_talk_time();
  talk_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.talk_time)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicDeinitRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicDeinitRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Fight4MicDeinitRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicDeinitRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicDeinitRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_Fight4MicDeinitRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicDeinitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.session_id)
}

// optional string room_id = 3;
inline bool YouMeVoice_Command_Fight4MicDeinitRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicDeinitRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}

// optional string json_str = 4;
inline bool YouMeVoice_Command_Fight4MicDeinitRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicDeinitRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}
inline ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicDeinitRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicDeinitResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicDeinitResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicDeinitResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicDeinitResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicDeinitResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_Fight4MicDeinitResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicDeinitResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_Fight4MicDeinitResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicDeinitResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.session_id)
}

// optional string room_id = 4;
inline bool YouMeVoice_Command_Fight4MicDeinitResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicDeinitResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicDeinitResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicDeinitResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicDeinitResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Fight4MicNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.head)
}

// optional int32 mode = 2;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mode)
  return mode_;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mode)
}

// optional int32 event_type = 3;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::event_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.event_type)
  return event_type_;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_event_type(::youmecommon::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.event_type)
}

// optional string json_str = 4;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicNotifyRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}
inline ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}

// optional int32 mic_right = 5;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_mic_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_mic_right() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_mic_right() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_mic_right() {
  mic_right_ = 0;
  clear_has_mic_right();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::mic_right() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_right)
  return mic_right_;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_mic_right(::youmecommon::protobuf::int32 value) {
  set_has_mic_right();
  mic_right_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_right)
}

// optional string room_id = 6;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicNotifyRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}

// optional string user_id = 7;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Command_Fight4MicNotifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}
inline ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}

// optional int32 mic_enable_flag = 8;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_mic_enable_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_mic_enable_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_mic_enable_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_mic_enable_flag() {
  mic_enable_flag_ = 0;
  clear_has_mic_enable_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::mic_enable_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_enable_flag)
  return mic_enable_flag_;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_mic_enable_flag(::youmecommon::protobuf::int32 value) {
  set_has_mic_enable_flag();
  mic_enable_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_enable_flag)
}

// optional int32 talk_time = 9;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_talk_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_talk_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_talk_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_talk_time() {
  talk_time_ = 0;
  clear_has_talk_time();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::talk_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.talk_time)
  return talk_time_;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_talk_time(::youmecommon::protobuf::int32 value) {
  set_has_talk_time();
  talk_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.talk_time)
}

// optional int32 is_mic_flag = 10;
inline bool YouMeVoice_Command_Fight4MicNotifyRequest::has_is_mic_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_is_mic_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_is_mic_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::clear_is_mic_flag() {
  is_mic_flag_ = 0;
  clear_has_is_mic_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::is_mic_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.is_mic_flag)
  return is_mic_flag_;
}
inline void YouMeVoice_Command_Fight4MicNotifyRequest::set_is_mic_flag(::youmecommon::protobuf::int32 value) {
  set_has_is_mic_flag();
  is_mic_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.is_mic_flag)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_ReleaseMicRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_ReleaseMicRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_ReleaseMicRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_ReleaseMicRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_ReleaseMicRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_ReleaseMicRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_ReleaseMicRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_ReleaseMicRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_ReleaseMicRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_ReleaseMicRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ReleaseMicRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.session_id)
}

// optional string room_id = 3;
inline bool YouMeVoice_Command_ReleaseMicRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_ReleaseMicRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_ReleaseMicRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_ReleaseMicRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_ReleaseMicRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_ReleaseMicRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ReleaseMicRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_ReleaseMicResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_ReleaseMicResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_ReleaseMicResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ReleaseMicResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ReleaseMicResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_ReleaseMicResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ReleaseMicResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_ReleaseMicResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_ReleaseMicResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.session_id)
}

// optional string room_id = 4;
inline bool YouMeVoice_Command_ReleaseMicResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_ReleaseMicResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_ReleaseMicResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}
inline ::std::string* YouMeVoice_Command_ReleaseMicResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_ReleaseMicResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_ReleaseMicResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteInitRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_InviteInitRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteInitRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_InviteInitRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteInitRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteInitRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteInitRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_InviteInitRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteInitRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_InviteInitRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.session_id)
}

// optional int32 connect_time_out = 3;
inline bool YouMeVoice_Command_InviteInitRequest::has_connect_time_out() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_InviteInitRequest::set_has_connect_time_out() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_has_connect_time_out() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_connect_time_out() {
  connect_time_out_ = 0;
  clear_has_connect_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitRequest::connect_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.connect_time_out)
  return connect_time_out_;
}
inline void YouMeVoice_Command_InviteInitRequest::set_connect_time_out(::youmecommon::protobuf::int32 value) {
  set_has_connect_time_out();
  connect_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.connect_time_out)
}

// optional int32 talk_time_out = 4;
inline bool YouMeVoice_Command_InviteInitRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_InviteInitRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.talk_time_out)
  return talk_time_out_;
}
inline void YouMeVoice_Command_InviteInitRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.talk_time_out)
}

// optional string room_id = 5;
inline bool YouMeVoice_Command_InviteInitRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_InviteInitRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_InviteInitRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_InviteInitRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteInitRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}
inline void YouMeVoice_Command_InviteInitRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}
inline void YouMeVoice_Command_InviteInitRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_InviteInitRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteInitRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteInitRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteInitResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_InviteInitResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteInitResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteInitResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteInitResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteInitResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteInitResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteInitResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteInitResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_InviteInitResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteInitResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteInitResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteInitResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_InviteInitResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_InviteInitResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_InviteInitResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_InviteInitResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_InviteInitResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_InviteInitResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.session_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_InviteRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_InviteRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_InviteRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_InviteRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.session_id)
}

// optional string to_user_id = 3;
inline bool YouMeVoice_Command_InviteRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_InviteRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
inline const ::std::string& YouMeVoice_Command_InviteRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}
inline void YouMeVoice_Command_InviteRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}
inline void YouMeVoice_Command_InviteRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}
inline ::std::string* YouMeVoice_Command_InviteRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}

// optional string room_id = 4;
inline bool YouMeVoice_Command_InviteRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_InviteRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
inline const ::std::string& YouMeVoice_Command_InviteRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}
inline void YouMeVoice_Command_InviteRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}
inline void YouMeVoice_Command_InviteRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}
inline ::std::string* YouMeVoice_Command_InviteRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}

// optional int32 connect_time_out = 5;
inline bool YouMeVoice_Command_InviteRequest::has_connect_time_out() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_connect_time_out() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_connect_time_out() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_InviteRequest::clear_connect_time_out() {
  connect_time_out_ = 0;
  clear_has_connect_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::connect_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.connect_time_out)
  return connect_time_out_;
}
inline void YouMeVoice_Command_InviteRequest::set_connect_time_out(::youmecommon::protobuf::int32 value) {
  set_has_connect_time_out();
  connect_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.connect_time_out)
}

// optional int32 talk_time_out = 6;
inline bool YouMeVoice_Command_InviteRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_InviteRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.talk_time_out)
  return talk_time_out_;
}
inline void YouMeVoice_Command_InviteRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.talk_time_out)
}

// optional int32 notify_flag = 7;
inline bool YouMeVoice_Command_InviteRequest::has_notify_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_notify_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_notify_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Command_InviteRequest::clear_notify_flag() {
  notify_flag_ = 0;
  clear_has_notify_flag();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::notify_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.notify_flag)
  return notify_flag_;
}
inline void YouMeVoice_Command_InviteRequest::set_notify_flag(::youmecommon::protobuf::int32 value) {
  set_has_notify_flag();
  notify_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.notify_flag)
}

// optional string json_str = 8;
inline bool YouMeVoice_Command_InviteRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_InviteRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_InviteRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_InviteRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& YouMeVoice_Command_InviteRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}
inline void YouMeVoice_Command_InviteRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}
inline void YouMeVoice_Command_InviteRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}
inline ::std::string* YouMeVoice_Command_InviteRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_InviteResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_InviteResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_InviteResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_InviteResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_InviteResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_InviteResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_InviteResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_InviteResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteResponse.session_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.head)
}

// optional string from_user_id = 2;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_from_user_id() {
  from_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_id();
}
inline const ::std::string& YouMeVoice_Command_InviteNotifyRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
  return from_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_from_user_id(const char* value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}
inline ::std::string* YouMeVoice_Command_InviteNotifyRequest::mutable_from_user_id() {
  set_has_from_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
  return from_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteNotifyRequest::release_from_user_id() {
  clear_has_from_user_id();
  return from_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id != NULL) {
    set_has_from_user_id();
  } else {
    clear_has_from_user_id();
  }
  from_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}

// optional string to_user_id = 3;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
inline const ::std::string& YouMeVoice_Command_InviteNotifyRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}
inline ::std::string* YouMeVoice_Command_InviteNotifyRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteNotifyRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}

// optional string json_str = 4;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& YouMeVoice_Command_InviteNotifyRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}
inline ::std::string* YouMeVoice_Command_InviteNotifyRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_InviteNotifyRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}

// optional int32 mode = 5;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.mode)
  return mode_;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.mode)
}

// optional int32 event_type = 6;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_event_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_event_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::event_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.event_type)
  return event_type_;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_event_type(::youmecommon::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.event_type)
}

// optional int32 error_code = 7;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_error_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_error_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.error_code)
}

// optional int32 talk_time_out = 8;
inline bool YouMeVoice_Command_InviteNotifyRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_InviteNotifyRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.talk_time_out)
  return talk_time_out_;
}
inline void YouMeVoice_Command_InviteNotifyRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.talk_time_out)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_AcceptRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_AcceptRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_AcceptRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_AcceptRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_AcceptRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_AcceptRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_AcceptRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_AcceptRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_AcceptRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_AcceptRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.session_id)
}

// optional string to_user_id = 3;
inline bool YouMeVoice_Command_AcceptRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_AcceptRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
inline const ::std::string& YouMeVoice_Command_AcceptRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AcceptRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}
inline void YouMeVoice_Command_AcceptRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}
inline void YouMeVoice_Command_AcceptRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}
inline ::std::string* YouMeVoice_Command_AcceptRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_AcceptRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AcceptRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}

// optional int32 error_code = 4;
inline bool YouMeVoice_Command_AcceptRequest::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_AcceptRequest::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptRequest::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_AcceptRequest::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.error_code)
}

// optional string json_str = 5;
inline bool YouMeVoice_Command_AcceptRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_AcceptRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_AcceptRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
inline const ::std::string& YouMeVoice_Command_AcceptRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AcceptRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}
inline void YouMeVoice_Command_AcceptRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}
inline void YouMeVoice_Command_AcceptRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}
inline ::std::string* YouMeVoice_Command_AcceptRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_AcceptRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AcceptRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_AcceptResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_AcceptResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_AcceptResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_AcceptResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AcceptResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AcceptResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_AcceptResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_AcceptResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_AcceptResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_AcceptResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_AcceptResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_AcceptResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_AcceptResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptResponse.session_id)
}

// optional int32 talk_time_out = 4;
inline bool YouMeVoice_Command_AcceptResponse::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_AcceptResponse::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_AcceptResponse::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptResponse::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.talk_time_out)
  return talk_time_out_;
}
inline void YouMeVoice_Command_AcceptResponse::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptResponse.talk_time_out)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteByeRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_InviteByeRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteByeRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteByeRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteByeRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_InviteByeRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteByeRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteByeRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteByeRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.head)
}

// optional int32 session_id = 2;
inline bool YouMeVoice_Command_InviteByeRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteByeRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteByeRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteByeRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteByeRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_InviteByeRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.session_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_InviteByeResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_InviteByeResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_InviteByeResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_InviteByeResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_InviteByeResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteByeResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteByeResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteByeResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_InviteByeResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.head)
}

// optional int32 error_code = 2;
inline bool YouMeVoice_Command_InviteByeResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_InviteByeResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_InviteByeResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_InviteByeResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteByeResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.error_code)
  return error_code_;
}
inline void YouMeVoice_Command_InviteByeResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.error_code)
}

// optional int32 session_id = 3;
inline bool YouMeVoice_Command_InviteByeResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_InviteByeResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_InviteByeResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_InviteByeResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteByeResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.session_id)
  return session_id_;
}
inline void YouMeVoice_Command_InviteByeResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.session_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_MaskVideoByUserIdRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_MaskVideoByUserIdRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_MaskVideoByUserIdRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_MaskVideoByUserIdRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.head)
}

// optional string user_id = 2;
inline bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Command_MaskVideoByUserIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}
inline ::std::string* YouMeVoice_Command_MaskVideoByUserIdRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MaskVideoByUserIdRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}

// optional int32 sessionid = 3;
inline bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoByUserIdRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.sessionid)
}

// optional int32 status = 4;
inline bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoByUserIdRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.status)
  return status_;
}
inline void YouMeVoice_Command_MaskVideoByUserIdRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_MaskVideoByUserIdResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_MaskVideoByUserIdResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MaskVideoByUserIdResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoByUserIdResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoByUserIdResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_MaskVideoByUserIdResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoByUserIdResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_MaskVideoByUserIdResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_MaskVideoNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_MaskVideoNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MaskVideoNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.head)
}

// optional string from_user_id = 2;
inline bool YouMeVoice_Command_MaskVideoNotifyRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_from_user_id() {
  from_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_id();
}
inline const ::std::string& YouMeVoice_Command_MaskVideoNotifyRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
  return from_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_from_user_id(const char* value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}
inline ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::mutable_from_user_id() {
  set_has_from_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
  return from_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::release_from_user_id() {
  clear_has_from_user_id();
  return from_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id != NULL) {
    set_has_from_user_id();
  } else {
    clear_has_from_user_id();
  }
  from_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}

// optional string to_user_id = 3;
inline bool YouMeVoice_Command_MaskVideoNotifyRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
inline const ::std::string& YouMeVoice_Command_MaskVideoNotifyRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}
inline ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}

// optional int32 status = 4;
inline bool YouMeVoice_Command_MaskVideoNotifyRequest::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoNotifyRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.status)
  return status_;
}
inline void YouMeVoice_Command_MaskVideoNotifyRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_CameraStatusChangeRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_CameraStatusChangeRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_CameraStatusChangeRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_CameraStatusChangeRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_CameraStatusChangeRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_CameraStatusChangeRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraStatusChangeRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.sessionid)
}

// optional int32 status = 3;
inline bool YouMeVoice_Command_CameraStatusChangeRequest::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraStatusChangeRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.status)
  return status_;
}
inline void YouMeVoice_Command_CameraStatusChangeRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_CameraStatusChangeResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_CameraStatusChangeResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_CameraStatusChangeResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraStatusChangeResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraStatusChangeResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_CameraStatusChangeResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraStatusChangeResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_CameraStatusChangeResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_CameraNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_CameraNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_CameraNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_CameraNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_CameraNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.head)
}

// optional string user_id = 2;
inline bool YouMeVoice_Command_CameraNotifyRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_CameraNotifyRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_CameraNotifyRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Command_CameraNotifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}
inline ::std::string* YouMeVoice_Command_CameraNotifyRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_CameraNotifyRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}

// optional int32 status = 3;
inline bool YouMeVoice_Command_CameraNotifyRequest::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_CameraNotifyRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_CameraNotifyRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraNotifyRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.status)
  return status_;
}
inline void YouMeVoice_Command_CameraNotifyRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.status)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_SendMessageRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_SendMessageRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_SendMessageRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_SendMessageRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_SendMessageRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_SendMessageRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_SendMessageRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_SendMessageRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_SendMessageRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_SendMessageRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_SendMessageRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.sessionid)
}

// optional string to_channel_id = 3;
inline bool YouMeVoice_Command_SendMessageRequest::has_to_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_SendMessageRequest::set_has_to_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_has_to_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_to_channel_id() {
  to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_channel_id();
}
inline const ::std::string& YouMeVoice_Command_SendMessageRequest::to_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
  return to_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageRequest::set_to_channel_id(const ::std::string& value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}
inline void YouMeVoice_Command_SendMessageRequest::set_to_channel_id(const char* value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}
inline void YouMeVoice_Command_SendMessageRequest::set_to_channel_id(const char* value, size_t size) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}
inline ::std::string* YouMeVoice_Command_SendMessageRequest::mutable_to_channel_id() {
  set_has_to_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
  return to_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_SendMessageRequest::release_to_channel_id() {
  clear_has_to_channel_id();
  return to_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageRequest::set_allocated_to_channel_id(::std::string* to_channel_id) {
  if (to_channel_id != NULL) {
    set_has_to_channel_id();
  } else {
    clear_has_to_channel_id();
  }
  to_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}

// optional bytes msg_content = 4;
inline bool YouMeVoice_Command_SendMessageRequest::has_msg_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_SendMessageRequest::set_has_msg_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
inline const ::std::string& YouMeVoice_Command_SendMessageRequest::msg_content() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageRequest::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}
inline void YouMeVoice_Command_SendMessageRequest::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}
inline void YouMeVoice_Command_SendMessageRequest::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}
inline ::std::string* YouMeVoice_Command_SendMessageRequest::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_SendMessageRequest::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageRequest::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}

// optional uint64 msg_id = 5;
inline bool YouMeVoice_Command_SendMessageRequest::has_msg_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_SendMessageRequest::set_has_msg_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::youmecommon::protobuf::uint64 YouMeVoice_Command_SendMessageRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_id)
  return msg_id_;
}
inline void YouMeVoice_Command_SendMessageRequest::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_id)
}

// optional string to_userid = 9;
inline bool YouMeVoice_Command_SendMessageRequest::has_to_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_SendMessageRequest::set_has_to_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_has_to_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_SendMessageRequest::clear_to_userid() {
  to_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_userid();
}
inline const ::std::string& YouMeVoice_Command_SendMessageRequest::to_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
  return to_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageRequest::set_to_userid(const ::std::string& value) {
  set_has_to_userid();
  to_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}
inline void YouMeVoice_Command_SendMessageRequest::set_to_userid(const char* value) {
  set_has_to_userid();
  to_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}
inline void YouMeVoice_Command_SendMessageRequest::set_to_userid(const char* value, size_t size) {
  set_has_to_userid();
  to_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}
inline ::std::string* YouMeVoice_Command_SendMessageRequest::mutable_to_userid() {
  set_has_to_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
  return to_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_SendMessageRequest::release_to_userid() {
  clear_has_to_userid();
  return to_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageRequest::set_allocated_to_userid(::std::string* to_userid) {
  if (to_userid != NULL) {
    set_has_to_userid();
  } else {
    clear_has_to_userid();
  }
  to_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_SendMessageResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_SendMessageResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_SendMessageResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_SendMessageResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SendMessageResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SendMessageResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_SendMessageResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.head)
}

// optional int32 sessionid = 2;
inline bool YouMeVoice_Command_SendMessageResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_SendMessageResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_SendMessageResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_SendMessageResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.sessionid)
}

// optional string to_channel_id = 3;
inline bool YouMeVoice_Command_SendMessageResponse::has_to_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_SendMessageResponse::set_has_to_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_has_to_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_to_channel_id() {
  to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_channel_id();
}
inline const ::std::string& YouMeVoice_Command_SendMessageResponse::to_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
  return to_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageResponse::set_to_channel_id(const ::std::string& value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}
inline void YouMeVoice_Command_SendMessageResponse::set_to_channel_id(const char* value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}
inline void YouMeVoice_Command_SendMessageResponse::set_to_channel_id(const char* value, size_t size) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}
inline ::std::string* YouMeVoice_Command_SendMessageResponse::mutable_to_channel_id() {
  set_has_to_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
  return to_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_SendMessageResponse::release_to_channel_id() {
  clear_has_to_channel_id();
  return to_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_SendMessageResponse::set_allocated_to_channel_id(::std::string* to_channel_id) {
  if (to_channel_id != NULL) {
    set_has_to_channel_id();
  } else {
    clear_has_to_channel_id();
  }
  to_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}

// optional uint64 msg_id = 4;
inline bool YouMeVoice_Command_SendMessageResponse::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_SendMessageResponse::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_SendMessageResponse::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::youmecommon::protobuf::uint64 YouMeVoice_Command_SendMessageResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.msg_id)
  return msg_id_;
}
inline void YouMeVoice_Command_SendMessageResponse::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.msg_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_MessageNotify

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_MessageNotify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_MessageNotify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_MessageNotify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_MessageNotify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MessageNotify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MessageNotify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MessageNotify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_MessageNotify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.head)
}

// optional int32 from_sessionid = 2;
inline bool YouMeVoice_Command_MessageNotify::has_from_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_MessageNotify::set_has_from_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_MessageNotify::clear_has_from_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_MessageNotify::clear_from_sessionid() {
  from_sessionid_ = 0;
  clear_has_from_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_MessageNotify::from_sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_sessionid)
  return from_sessionid_;
}
inline void YouMeVoice_Command_MessageNotify::set_from_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_from_sessionid();
  from_sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_sessionid)
}

// optional string from_userid = 3;
inline bool YouMeVoice_Command_MessageNotify::has_from_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_MessageNotify::set_has_from_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_MessageNotify::clear_has_from_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_MessageNotify::clear_from_userid() {
  from_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_userid();
}
inline const ::std::string& YouMeVoice_Command_MessageNotify::from_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
  return from_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MessageNotify::set_from_userid(const ::std::string& value) {
  set_has_from_userid();
  from_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}
inline void YouMeVoice_Command_MessageNotify::set_from_userid(const char* value) {
  set_has_from_userid();
  from_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}
inline void YouMeVoice_Command_MessageNotify::set_from_userid(const char* value, size_t size) {
  set_has_from_userid();
  from_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}
inline ::std::string* YouMeVoice_Command_MessageNotify::mutable_from_userid() {
  set_has_from_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
  return from_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MessageNotify::release_from_userid() {
  clear_has_from_userid();
  return from_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MessageNotify::set_allocated_from_userid(::std::string* from_userid) {
  if (from_userid != NULL) {
    set_has_from_userid();
  } else {
    clear_has_from_userid();
  }
  from_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}

// optional string to_channel_id = 4;
inline bool YouMeVoice_Command_MessageNotify::has_to_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_MessageNotify::set_has_to_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_MessageNotify::clear_has_to_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_MessageNotify::clear_to_channel_id() {
  to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_channel_id();
}
inline const ::std::string& YouMeVoice_Command_MessageNotify::to_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
  return to_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MessageNotify::set_to_channel_id(const ::std::string& value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}
inline void YouMeVoice_Command_MessageNotify::set_to_channel_id(const char* value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}
inline void YouMeVoice_Command_MessageNotify::set_to_channel_id(const char* value, size_t size) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}
inline ::std::string* YouMeVoice_Command_MessageNotify::mutable_to_channel_id() {
  set_has_to_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
  return to_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MessageNotify::release_to_channel_id() {
  clear_has_to_channel_id();
  return to_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MessageNotify::set_allocated_to_channel_id(::std::string* to_channel_id) {
  if (to_channel_id != NULL) {
    set_has_to_channel_id();
  } else {
    clear_has_to_channel_id();
  }
  to_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}

// optional bytes msg_content = 5;
inline bool YouMeVoice_Command_MessageNotify::has_msg_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_MessageNotify::set_has_msg_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_MessageNotify::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_MessageNotify::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
inline const ::std::string& YouMeVoice_Command_MessageNotify::msg_content() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MessageNotify::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}
inline void YouMeVoice_Command_MessageNotify::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}
inline void YouMeVoice_Command_MessageNotify::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}
inline ::std::string* YouMeVoice_Command_MessageNotify::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_MessageNotify::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_MessageNotify::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}

// optional uint64 msg_id = 6;
inline bool YouMeVoice_Command_MessageNotify::has_msg_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_MessageNotify::set_has_msg_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_MessageNotify::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_MessageNotify::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
inline ::youmecommon::protobuf::uint64 YouMeVoice_Command_MessageNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_id)
  return msg_id_;
}
inline void YouMeVoice_Command_MessageNotify::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_KickingRequest

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_KickingRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_KickingRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_KickingRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_KickingRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_KickingRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_KickingRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingRequest.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_KickingRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_KickingRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingRequest.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_KickingRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_KickingRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_KickingRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_KickingRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_KickingRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.sessionid)
}

// required string channel_id = 3;
inline bool YouMeVoice_Command_KickingRequest::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_KickingRequest::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_KickingRequest::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_KickingRequest::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
inline const ::std::string& YouMeVoice_Command_KickingRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingRequest::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}
inline void YouMeVoice_Command_KickingRequest::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}
inline void YouMeVoice_Command_KickingRequest::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}
inline ::std::string* YouMeVoice_Command_KickingRequest::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingRequest::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingRequest::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}

// required string user_id = 4;
inline bool YouMeVoice_Command_KickingRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_KickingRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_KickingRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_KickingRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Command_KickingRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}
inline void YouMeVoice_Command_KickingRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}
inline void YouMeVoice_Command_KickingRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}
inline ::std::string* YouMeVoice_Command_KickingRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}

// optional int64 kick_time = 5;
inline bool YouMeVoice_Command_KickingRequest::has_kick_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_KickingRequest::set_has_kick_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_KickingRequest::clear_has_kick_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_KickingRequest::clear_kick_time() {
  kick_time_ = GOOGLE_LONGLONG(0);
  clear_has_kick_time();
}
inline ::youmecommon::protobuf::int64 YouMeVoice_Command_KickingRequest::kick_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.kick_time)
  return kick_time_;
}
inline void YouMeVoice_Command_KickingRequest::set_kick_time(::youmecommon::protobuf::int64 value) {
  set_has_kick_time();
  kick_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.kick_time)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_KickingResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_KickingResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_KickingResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_KickingResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_KickingResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_KickingResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingResponse.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_KickingResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingResponse.head)
}

// optional string channel_id = 2;
inline bool YouMeVoice_Command_KickingResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_KickingResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_KickingResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_KickingResponse::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
inline const ::std::string& YouMeVoice_Command_KickingResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingResponse::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}
inline void YouMeVoice_Command_KickingResponse::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}
inline void YouMeVoice_Command_KickingResponse::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}
inline ::std::string* YouMeVoice_Command_KickingResponse::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingResponse::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingResponse::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}

// optional string user_id = 3;
inline bool YouMeVoice_Command_KickingResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_KickingResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_KickingResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_KickingResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Command_KickingResponse::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingResponse::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}
inline void YouMeVoice_Command_KickingResponse::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}
inline void YouMeVoice_Command_KickingResponse::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}
inline ::std::string* YouMeVoice_Command_KickingResponse::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingResponse::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingResponse::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}

// optional int32 sessionid = 4;
inline bool YouMeVoice_Command_KickingResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_KickingResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_KickingResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_KickingResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_KickingResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingResponse.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_KickingNotify

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_KickingNotify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_KickingNotify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_KickingNotify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingNotify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingNotify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_KickingNotify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.head)
}

// optional string src_user_id = 2;
inline bool YouMeVoice_Command_KickingNotify::has_src_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_src_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_src_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_KickingNotify::clear_src_user_id() {
  src_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_user_id();
}
inline const ::std::string& YouMeVoice_Command_KickingNotify::src_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
  return src_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_src_user_id(const ::std::string& value) {
  set_has_src_user_id();
  src_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}
inline void YouMeVoice_Command_KickingNotify::set_src_user_id(const char* value) {
  set_has_src_user_id();
  src_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}
inline void YouMeVoice_Command_KickingNotify::set_src_user_id(const char* value, size_t size) {
  set_has_src_user_id();
  src_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}
inline ::std::string* YouMeVoice_Command_KickingNotify::mutable_src_user_id() {
  set_has_src_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
  return src_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingNotify::release_src_user_id() {
  clear_has_src_user_id();
  return src_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_allocated_src_user_id(::std::string* src_user_id) {
  if (src_user_id != NULL) {
    set_has_src_user_id();
  } else {
    clear_has_src_user_id();
  }
  src_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), src_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}

// optional string kick_msg = 3;
inline bool YouMeVoice_Command_KickingNotify::has_kick_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_kick_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_kick_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_KickingNotify::clear_kick_msg() {
  kick_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kick_msg();
}
inline const ::std::string& YouMeVoice_Command_KickingNotify::kick_msg() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
  return kick_msg_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_kick_msg(const ::std::string& value) {
  set_has_kick_msg();
  kick_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}
inline void YouMeVoice_Command_KickingNotify::set_kick_msg(const char* value) {
  set_has_kick_msg();
  kick_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}
inline void YouMeVoice_Command_KickingNotify::set_kick_msg(const char* value, size_t size) {
  set_has_kick_msg();
  kick_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}
inline ::std::string* YouMeVoice_Command_KickingNotify::mutable_kick_msg() {
  set_has_kick_msg();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
  return kick_msg_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingNotify::release_kick_msg() {
  clear_has_kick_msg();
  return kick_msg_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_allocated_kick_msg(::std::string* kick_msg) {
  if (kick_msg != NULL) {
    set_has_kick_msg();
  } else {
    clear_has_kick_msg();
  }
  kick_msg_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), kick_msg);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}

// required string channel_id = 4;
inline bool YouMeVoice_Command_KickingNotify::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_KickingNotify::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
inline const ::std::string& YouMeVoice_Command_KickingNotify::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}
inline void YouMeVoice_Command_KickingNotify::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}
inline void YouMeVoice_Command_KickingNotify::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}
inline ::std::string* YouMeVoice_Command_KickingNotify::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingNotify::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}

// optional int32 sessionid = 5;
inline bool YouMeVoice_Command_KickingNotify::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_KickingNotify::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingNotify::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_KickingNotify::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.sessionid)
}

// optional int32 kick_code = 6;
inline bool YouMeVoice_Command_KickingNotify::has_kick_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_kick_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_kick_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Command_KickingNotify::clear_kick_code() {
  kick_code_ = 0;
  clear_has_kick_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingNotify::kick_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_code)
  return kick_code_;
}
inline void YouMeVoice_Command_KickingNotify::set_kick_code(::youmecommon::protobuf::int32 value) {
  set_has_kick_code();
  kick_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_code)
}

// optional int64 kick_time = 7;
inline bool YouMeVoice_Command_KickingNotify::has_kick_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_kick_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_kick_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Command_KickingNotify::clear_kick_time() {
  kick_time_ = GOOGLE_LONGLONG(0);
  clear_has_kick_time();
}
inline ::youmecommon::protobuf::int64 YouMeVoice_Command_KickingNotify::kick_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_time)
  return kick_time_;
}
inline void YouMeVoice_Command_KickingNotify::set_kick_time(::youmecommon::protobuf::int64 value) {
  set_has_kick_time();
  kick_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_time)
}

// optional string kicked_user_id = 8;
inline bool YouMeVoice_Command_KickingNotify::has_kicked_user_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Command_KickingNotify::set_has_kicked_user_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Command_KickingNotify::clear_has_kicked_user_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Command_KickingNotify::clear_kicked_user_id() {
  kicked_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kicked_user_id();
}
inline const ::std::string& YouMeVoice_Command_KickingNotify::kicked_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
  return kicked_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_kicked_user_id(const ::std::string& value) {
  set_has_kicked_user_id();
  kicked_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}
inline void YouMeVoice_Command_KickingNotify::set_kicked_user_id(const char* value) {
  set_has_kicked_user_id();
  kicked_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}
inline void YouMeVoice_Command_KickingNotify::set_kicked_user_id(const char* value, size_t size) {
  set_has_kicked_user_id();
  kicked_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}
inline ::std::string* YouMeVoice_Command_KickingNotify::mutable_kicked_user_id() {
  set_has_kicked_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
  return kicked_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_KickingNotify::release_kicked_user_id() {
  clear_has_kicked_user_id();
  return kicked_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_KickingNotify::set_allocated_kicked_user_id(::std::string* kicked_user_id) {
  if (kicked_user_id != NULL) {
    set_has_kicked_user_id();
  } else {
    clear_has_kicked_user_id();
  }
  kicked_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), kicked_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Media_ctl_Header

// required int32 cmd = 1;
inline bool YouMeVoice_Media_ctl_Header::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Media_ctl_Header::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Media_ctl_Header::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Media_ctl_Header::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::cmd() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.cmd)
  return cmd_;
}
inline void YouMeVoice_Media_ctl_Header::set_cmd(::youmecommon::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.cmd)
}

// required int32 seq = 2;
inline bool YouMeVoice_Media_ctl_Header::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Media_ctl_Header::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Media_ctl_Header::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Media_ctl_Header::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::seq() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.seq)
  return seq_;
}
inline void YouMeVoice_Media_ctl_Header::set_seq(::youmecommon::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.seq)
}

// required int64 timestamp = 3;
inline bool YouMeVoice_Media_ctl_Header::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Media_ctl_Header::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Media_ctl_Header::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Media_ctl_Header::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::youmecommon::protobuf::int64 YouMeVoice_Media_ctl_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.timestamp)
  return timestamp_;
}
inline void YouMeVoice_Media_ctl_Header::set_timestamp(::youmecommon::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.timestamp)
}

// required int32 session = 4;
inline bool YouMeVoice_Media_ctl_Header::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Media_ctl_Header::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Media_ctl_Header::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Media_ctl_Header::clear_session() {
  session_ = 0;
  clear_has_session();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::session() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.session)
  return session_;
}
inline void YouMeVoice_Media_ctl_Header::set_session(::youmecommon::protobuf::int32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.session)
}

// optional int32 ret_code = 5;
inline bool YouMeVoice_Media_ctl_Header::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Media_ctl_Header::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Media_ctl_Header::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Media_ctl_Header::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::ret_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.ret_code)
  return ret_code_;
}
inline void YouMeVoice_Media_ctl_Header::set_ret_code(::youmecommon::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.ret_code)
}

// -------------------------------------------------------------------

// LostPacketStatNotify

// required int32 min_seq = 1;
inline bool LostPacketStatNotify::has_min_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LostPacketStatNotify::set_has_min_seq() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LostPacketStatNotify::clear_has_min_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LostPacketStatNotify::clear_min_seq() {
  min_seq_ = 0;
  clear_has_min_seq();
}
inline ::youmecommon::protobuf::int32 LostPacketStatNotify::min_seq() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.min_seq)
  return min_seq_;
}
inline void LostPacketStatNotify::set_min_seq(::youmecommon::protobuf::int32 value) {
  set_has_min_seq();
  min_seq_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.min_seq)
}

// required int32 max_seq = 2;
inline bool LostPacketStatNotify::has_max_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LostPacketStatNotify::set_has_max_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LostPacketStatNotify::clear_has_max_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LostPacketStatNotify::clear_max_seq() {
  max_seq_ = 0;
  clear_has_max_seq();
}
inline ::youmecommon::protobuf::int32 LostPacketStatNotify::max_seq() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.max_seq)
  return max_seq_;
}
inline void LostPacketStatNotify::set_max_seq(::youmecommon::protobuf::int32 value) {
  set_has_max_seq();
  max_seq_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.max_seq)
}

// required int32 total_recv_num = 3;
inline bool LostPacketStatNotify::has_total_recv_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LostPacketStatNotify::set_has_total_recv_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LostPacketStatNotify::clear_has_total_recv_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LostPacketStatNotify::clear_total_recv_num() {
  total_recv_num_ = 0;
  clear_has_total_recv_num();
}
inline ::youmecommon::protobuf::int32 LostPacketStatNotify::total_recv_num() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.total_recv_num)
  return total_recv_num_;
}
inline void LostPacketStatNotify::set_total_recv_num(::youmecommon::protobuf::int32 value) {
  set_has_total_recv_num();
  total_recv_num_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.total_recv_num)
}

// required int64 last_stat_st = 4;
inline bool LostPacketStatNotify::has_last_stat_st() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LostPacketStatNotify::set_has_last_stat_st() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LostPacketStatNotify::clear_has_last_stat_st() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LostPacketStatNotify::clear_last_stat_st() {
  last_stat_st_ = GOOGLE_LONGLONG(0);
  clear_has_last_stat_st();
}
inline ::youmecommon::protobuf::int64 LostPacketStatNotify::last_stat_st() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.last_stat_st)
  return last_stat_st_;
}
inline void LostPacketStatNotify::set_last_stat_st(::youmecommon::protobuf::int64 value) {
  set_has_last_stat_st();
  last_stat_st_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.last_stat_st)
}

// required int64 curr_stat_st = 5;
inline bool LostPacketStatNotify::has_curr_stat_st() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LostPacketStatNotify::set_has_curr_stat_st() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LostPacketStatNotify::clear_has_curr_stat_st() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LostPacketStatNotify::clear_curr_stat_st() {
  curr_stat_st_ = GOOGLE_LONGLONG(0);
  clear_has_curr_stat_st();
}
inline ::youmecommon::protobuf::int64 LostPacketStatNotify::curr_stat_st() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.curr_stat_st)
  return curr_stat_st_;
}
inline void LostPacketStatNotify::set_curr_stat_st(::youmecommon::protobuf::int64 value) {
  set_has_curr_stat_st();
  curr_stat_st_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.curr_stat_st)
}

// optional int32 media_type = 6 [default = 1];
inline bool LostPacketStatNotify::has_media_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LostPacketStatNotify::set_has_media_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LostPacketStatNotify::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LostPacketStatNotify::clear_media_type() {
  media_type_ = 1;
  clear_has_media_type();
}
inline ::youmecommon::protobuf::int32 LostPacketStatNotify::media_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.media_type)
  return media_type_;
}
inline void LostPacketStatNotify::set_media_type(::youmecommon::protobuf::int32 value) {
  set_has_media_type();
  media_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.media_type)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Media_ctl_req

// required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
inline bool YouMeVoice_Command_Media_ctl_req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Media_ctl_req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Media_ctl_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Media_ctl_req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::YouMeVoice_Media_ctl_Header::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::YouMeVoice_Media_ctl_Header& YouMeVoice_Command_Media_ctl_req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::YouMeVoice_Media_ctl_Header;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.head)
  return head_;
}
inline ::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_req::release_head() {
  clear_has_head();
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Media_ctl_req::set_allocated_head(::YouMeProtocol::YouMeVoice_Media_ctl_Header* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.head)
}

// optional int32 stat_interval = 2;
inline bool YouMeVoice_Command_Media_ctl_req::has_stat_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Media_ctl_req::set_has_stat_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Media_ctl_req::clear_has_stat_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Media_ctl_req::clear_stat_interval() {
  stat_interval_ = 0;
  clear_has_stat_interval();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Media_ctl_req::stat_interval() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_interval)
  return stat_interval_;
}
inline void YouMeVoice_Command_Media_ctl_req::set_stat_interval(::youmecommon::protobuf::int32 value) {
  set_has_stat_interval();
  stat_interval_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_interval)
}

// optional int32 stat_type = 3;
inline bool YouMeVoice_Command_Media_ctl_req::has_stat_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Media_ctl_req::set_has_stat_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Media_ctl_req::clear_has_stat_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Media_ctl_req::clear_stat_type() {
  stat_type_ = 0;
  clear_has_stat_type();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Media_ctl_req::stat_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_type)
  return stat_type_;
}
inline void YouMeVoice_Command_Media_ctl_req::set_stat_type(::youmecommon::protobuf::int32 value) {
  set_has_stat_type();
  stat_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_type)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Media_ctl_rsp

// required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
inline bool YouMeVoice_Command_Media_ctl_rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Media_ctl_rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Media_ctl_rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Media_ctl_rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::YouMeVoice_Media_ctl_Header::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::YouMeVoice_Media_ctl_Header& YouMeVoice_Command_Media_ctl_rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::YouMeVoice_Media_ctl_Header;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.head)
  return head_;
}
inline ::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Media_ctl_rsp::set_allocated_head(::YouMeProtocol::YouMeVoice_Media_ctl_Header* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.head)
}

// optional .YouMeProtocol.LostPacketStatNotify packet_stat = 2;
inline bool YouMeVoice_Command_Media_ctl_rsp::has_packet_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Media_ctl_rsp::set_has_packet_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Media_ctl_rsp::clear_has_packet_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Media_ctl_rsp::clear_packet_stat() {
  if (packet_stat_ != NULL) packet_stat_->::YouMeProtocol::LostPacketStatNotify::Clear();
  clear_has_packet_stat();
}
inline const ::YouMeProtocol::LostPacketStatNotify& YouMeVoice_Command_Media_ctl_rsp::packet_stat() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.packet_stat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return packet_stat_ != NULL ? *packet_stat_ : *default_instance().packet_stat_;
#else
  return packet_stat_ != NULL ? *packet_stat_ : *default_instance_->packet_stat_;
#endif
}
inline ::YouMeProtocol::LostPacketStatNotify* YouMeVoice_Command_Media_ctl_rsp::mutable_packet_stat() {
  set_has_packet_stat();
  if (packet_stat_ == NULL) {
    packet_stat_ = new ::YouMeProtocol::LostPacketStatNotify;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.packet_stat)
  return packet_stat_;
}
inline ::YouMeProtocol::LostPacketStatNotify* YouMeVoice_Command_Media_ctl_rsp::release_packet_stat() {
  clear_has_packet_stat();
  ::YouMeProtocol::LostPacketStatNotify* temp = packet_stat_;
  packet_stat_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Media_ctl_rsp::set_allocated_packet_stat(::YouMeProtocol::LostPacketStatNotify* packet_stat) {
  delete packet_stat_;
  packet_stat_ = packet_stat;
  if (packet_stat) {
    set_has_packet_stat();
  } else {
    clear_has_packet_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.packet_stat)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_AVInput_Status_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_AVInput_Status_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_AVInput_Status_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_AVInput_Status_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_AVInput_Status_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_AVInput_Status_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.sessionid)
}

// required string userid = 3;
inline bool YouMeVoice_Command_AVInput_Status_Req::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_AVInput_Status_Req::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}
inline ::std::string* YouMeVoice_Command_AVInput_Status_Req::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_AVInput_Status_Req::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}

// required int32 media_type = 4;
inline bool YouMeVoice_Command_AVInput_Status_Req::has_media_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_has_media_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_media_type() {
  media_type_ = 0;
  clear_has_media_type();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Req::media_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.media_type)
  return media_type_;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_media_type(::youmecommon::protobuf::int32 value) {
  set_has_media_type();
  media_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.media_type)
}

// required int32 op = 5;
inline bool YouMeVoice_Command_AVInput_Status_Req::has_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_has_op() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_has_op() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_AVInput_Status_Req::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Req::op() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.op)
  return op_;
}
inline void YouMeVoice_Command_AVInput_Status_Req::set_op(::youmecommon::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.op)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_AVInput_Status_Rsq

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_AVInput_Status_Rsq::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_AVInput_Status_Rsq::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Status_Rsq::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Status_Rsq::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.head)
}

// required string userid = 2;
inline bool YouMeVoice_Command_AVInput_Status_Rsq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_AVInput_Status_Rsq::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}
inline ::std::string* YouMeVoice_Command_AVInput_Status_Rsq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_AVInput_Status_Rsq::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}

// required int32 sessionid = 3;
inline bool YouMeVoice_Command_AVInput_Status_Rsq::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Rsq::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_AVInput_Status_Rsq::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_AVInput_Notify

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_AVInput_Notify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_AVInput_Notify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_AVInput_Notify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Notify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Notify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_AVInput_Notify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_AVInput_Notify::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_AVInput_Notify::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Notify::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_AVInput_Notify::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.sessionid)
}

// required string userid = 3;
inline bool YouMeVoice_Command_AVInput_Notify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_AVInput_Notify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Command_AVInput_Notify::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AVInput_Notify::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}
inline void YouMeVoice_Command_AVInput_Notify::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}
inline void YouMeVoice_Command_AVInput_Notify::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}
inline ::std::string* YouMeVoice_Command_AVInput_Notify::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_AVInput_Notify::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_AVInput_Notify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}

// required int32 media_type = 4;
inline bool YouMeVoice_Command_AVInput_Notify::has_media_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_AVInput_Notify::set_has_media_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_media_type() {
  media_type_ = 0;
  clear_has_media_type();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Notify::media_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.media_type)
  return media_type_;
}
inline void YouMeVoice_Command_AVInput_Notify::set_media_type(::youmecommon::protobuf::int32 value) {
  set_has_media_type();
  media_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.media_type)
}

// required int32 op = 5;
inline bool YouMeVoice_Command_AVInput_Notify::has_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Command_AVInput_Notify::set_has_op() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_has_op() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Command_AVInput_Notify::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Notify::op() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.op)
  return op_;
}
inline void YouMeVoice_Command_AVInput_Notify::set_op(::youmecommon::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.op)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Query_User_Video_Info_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Query_User_Video_Info_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Query_User_Video_Info_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Query_User_Video_Info_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Query_User_Video_Info_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_Query_User_Video_Info_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Query_User_Video_Info_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.sessionid)
}

// repeated string other_userid_list = 3;
inline int YouMeVoice_Command_Query_User_Video_Info_Req::other_userid_list_size() const {
  return other_userid_list_.size();
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::clear_other_userid_list() {
  other_userid_list_.Clear();
}
inline const ::std::string& YouMeVoice_Command_Query_User_Video_Info_Req::other_userid_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return other_userid_list_.Get(index);
}
inline ::std::string* YouMeVoice_Command_Query_User_Video_Info_Req::mutable_other_userid_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return other_userid_list_.Mutable(index);
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_other_userid_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  other_userid_list_.Mutable(index)->assign(value);
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_other_userid_list(int index, const char* value) {
  other_userid_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::set_other_userid_list(int index, const char* value, size_t size) {
  other_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
inline ::std::string* YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list() {
  return other_userid_list_.Add();
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list(const ::std::string& value) {
  other_userid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list(const char* value) {
  other_userid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
inline void YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list(const char* value, size_t size) {
  other_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeVoice_Command_Query_User_Video_Info_Req::other_userid_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return other_userid_list_;
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeVoice_Command_Query_User_Video_Info_Req::mutable_other_userid_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return &other_userid_list_;
}

// -------------------------------------------------------------------

// YouMeVoice_UserVedioInfo

// required int32 other_sessionid = 1;
inline bool YouMeVoice_UserVedioInfo::has_other_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_UserVedioInfo::set_has_other_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_UserVedioInfo::clear_has_other_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_UserVedioInfo::clear_other_sessionid() {
  other_sessionid_ = 0;
  clear_has_other_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_UserVedioInfo::other_sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserVedioInfo.other_sessionid)
  return other_sessionid_;
}
inline void YouMeVoice_UserVedioInfo::set_other_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_other_sessionid();
  other_sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserVedioInfo.other_sessionid)
}

// required string other_userid = 2;
inline bool YouMeVoice_UserVedioInfo::has_other_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_UserVedioInfo::set_has_other_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_UserVedioInfo::clear_has_other_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_UserVedioInfo::clear_other_userid() {
  other_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_userid();
}
inline const ::std::string& YouMeVoice_UserVedioInfo::other_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
  return other_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserVedioInfo::set_other_userid(const ::std::string& value) {
  set_has_other_userid();
  other_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}
inline void YouMeVoice_UserVedioInfo::set_other_userid(const char* value) {
  set_has_other_userid();
  other_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}
inline void YouMeVoice_UserVedioInfo::set_other_userid(const char* value, size_t size) {
  set_has_other_userid();
  other_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}
inline ::std::string* YouMeVoice_UserVedioInfo::mutable_other_userid() {
  set_has_other_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
  return other_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_UserVedioInfo::release_other_userid() {
  clear_has_other_userid();
  return other_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_UserVedioInfo::set_allocated_other_userid(::std::string* other_userid) {
  if (other_userid != NULL) {
    set_has_other_userid();
  } else {
    clear_has_other_userid();
  }
  other_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), other_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}

// repeated .YouMeProtocol.YouMeVoice_Video_info video_info_list = 3;
inline int YouMeVoice_UserVedioInfo::video_info_list_size() const {
  return video_info_list_.size();
}
inline void YouMeVoice_UserVedioInfo::clear_video_info_list() {
  video_info_list_.Clear();
}
inline const ::YouMeProtocol::YouMeVoice_Video_info& YouMeVoice_UserVedioInfo::video_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_.Get(index);
}
inline ::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_UserVedioInfo::mutable_video_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_.Mutable(index);
}
inline ::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_UserVedioInfo::add_video_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info >*
YouMeVoice_UserVedioInfo::mutable_video_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return &video_info_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info >&
YouMeVoice_UserVedioInfo::video_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_;
}

// -------------------------------------------------------------------

// YouMeVoice_Video_info

// required int32 resolution_type = 1;
inline bool YouMeVoice_Video_info::has_resolution_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_info::set_has_resolution_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_info::clear_has_resolution_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_info::clear_resolution_type() {
  resolution_type_ = 0;
  clear_has_resolution_type();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_info::resolution_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_info.resolution_type)
  return resolution_type_;
}
inline void YouMeVoice_Video_info::set_resolution_type(::youmecommon::protobuf::int32 value) {
  set_has_resolution_type();
  resolution_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_info.resolution_type)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Query_User_Video_Info_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Query_User_Video_Info_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Query_User_Video_Info_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Query_User_Video_Info_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Query_User_Video_Info_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_Query_User_Video_Info_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Query_User_Video_Info_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.sessionid)
}

// repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
inline int YouMeVoice_Command_Query_User_Video_Info_Rsp::user_video_info_list_size() const {
  return user_video_info_list_.size();
}
inline void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_user_video_info_list() {
  user_video_info_list_.Clear();
}
inline const ::YouMeProtocol::YouMeVoice_UserVedioInfo& YouMeVoice_Command_Query_User_Video_Info_Rsp::user_video_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_.Get(index);
}
inline ::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Query_User_Video_Info_Rsp::mutable_user_video_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_.Mutable(index);
}
inline ::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Query_User_Video_Info_Rsp::add_user_video_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >*
YouMeVoice_Command_Query_User_Video_Info_Rsp::mutable_user_video_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return &user_video_info_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >&
YouMeVoice_Command_Query_User_Video_Info_Rsp::user_video_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_;
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Set_User_Video_Info_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_Set_User_Video_Info_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Set_User_Video_Info_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Set_User_Video_Info_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_Set_User_Video_Info_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_Set_User_Video_Info_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Set_User_Video_Info_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.sessionid)
}

// repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
inline int YouMeVoice_Command_Set_User_Video_Info_Req::user_video_info_list_size() const {
  return user_video_info_list_.size();
}
inline void YouMeVoice_Command_Set_User_Video_Info_Req::clear_user_video_info_list() {
  user_video_info_list_.Clear();
}
inline const ::YouMeProtocol::YouMeVoice_UserVedioInfo& YouMeVoice_Command_Set_User_Video_Info_Req::user_video_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_.Get(index);
}
inline ::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Set_User_Video_Info_Req::mutable_user_video_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_.Mutable(index);
}
inline ::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Set_User_Video_Info_Req::add_user_video_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_.Add();
}
inline ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >*
YouMeVoice_Command_Set_User_Video_Info_Req::mutable_user_video_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return &user_video_info_list_;
}
inline const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >&
YouMeVoice_Command_Set_User_Video_Info_Req::user_video_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_;
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Set_User_Video_Info_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Set_User_Video_Info_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Set_User_Video_Info_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_Set_User_Video_Info_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Set_User_Video_Info_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Set_User_Video_Info_Notify

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Set_User_Video_Info_Notify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Notify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Notify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.head)
}

// required int32 set_sessionid = 2;
inline bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_set_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_set_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_set_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_set_sessionid() {
  set_sessionid_ = 0;
  clear_has_set_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_Set_User_Video_Info_Notify::set_sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_sessionid)
  return set_sessionid_;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_set_sessionid();
  set_sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_sessionid)
}

// required string set_user_id = 3;
inline bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_set_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_set_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_set_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_set_user_id() {
  set_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_set_user_id();
}
inline const ::std::string& YouMeVoice_Command_Set_User_Video_Info_Notify::set_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
  return set_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_user_id(const ::std::string& value) {
  set_has_set_user_id();
  set_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_user_id(const char* value) {
  set_has_set_user_id();
  set_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_user_id(const char* value, size_t size) {
  set_has_set_user_id();
  set_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}
inline ::std::string* YouMeVoice_Command_Set_User_Video_Info_Notify::mutable_set_user_id() {
  set_has_set_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
  return set_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_Set_User_Video_Info_Notify::release_set_user_id() {
  clear_has_set_user_id();
  return set_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_allocated_set_user_id(::std::string* set_user_id) {
  if (set_user_id != NULL) {
    set_has_set_user_id();
  } else {
    clear_has_set_user_id();
  }
  set_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), set_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}

// required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
inline bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_video_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_video_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_video_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_video_info() {
  if (video_info_ != NULL) video_info_->::YouMeProtocol::YouMeVoice_Video_info::Clear();
  clear_has_video_info();
}
inline const ::YouMeProtocol::YouMeVoice_Video_info& YouMeVoice_Command_Set_User_Video_Info_Notify::video_info() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.video_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_info_ != NULL ? *video_info_ : *default_instance().video_info_;
#else
  return video_info_ != NULL ? *video_info_ : *default_instance_->video_info_;
#endif
}
inline ::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_Command_Set_User_Video_Info_Notify::mutable_video_info() {
  set_has_video_info();
  if (video_info_ == NULL) {
    video_info_ = new ::YouMeProtocol::YouMeVoice_Video_info;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.video_info)
  return video_info_;
}
inline ::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_Command_Set_User_Video_Info_Notify::release_video_info() {
  clear_has_video_info();
  ::YouMeProtocol::YouMeVoice_Video_info* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_Set_User_Video_Info_Notify::set_allocated_video_info(::YouMeProtocol::YouMeVoice_Video_info* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    set_has_video_info();
  } else {
    clear_has_video_info();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.video_info)
}

// -------------------------------------------------------------------

// YouMeVoice_Media_Info

// optional int32 v_frame_rate = 1;
inline bool YouMeVoice_Media_Info::has_v_frame_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Media_Info::set_has_v_frame_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Media_Info::clear_has_v_frame_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Media_Info::clear_v_frame_rate() {
  v_frame_rate_ = 0;
  clear_has_v_frame_rate();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::v_frame_rate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.v_frame_rate)
  return v_frame_rate_;
}
inline void YouMeVoice_Media_Info::set_v_frame_rate(::youmecommon::protobuf::int32 value) {
  set_has_v_frame_rate();
  v_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.v_frame_rate)
}

// optional int32 v_bit_rate = 2;
inline bool YouMeVoice_Media_Info::has_v_bit_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Media_Info::set_has_v_bit_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Media_Info::clear_has_v_bit_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Media_Info::clear_v_bit_rate() {
  v_bit_rate_ = 0;
  clear_has_v_bit_rate();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::v_bit_rate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.v_bit_rate)
  return v_bit_rate_;
}
inline void YouMeVoice_Media_Info::set_v_bit_rate(::youmecommon::protobuf::int32 value) {
  set_has_v_bit_rate();
  v_bit_rate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.v_bit_rate)
}

// optional int32 v_lost_packet = 3;
inline bool YouMeVoice_Media_Info::has_v_lost_packet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Media_Info::set_has_v_lost_packet() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Media_Info::clear_has_v_lost_packet() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Media_Info::clear_v_lost_packet() {
  v_lost_packet_ = 0;
  clear_has_v_lost_packet();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::v_lost_packet() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.v_lost_packet)
  return v_lost_packet_;
}
inline void YouMeVoice_Media_Info::set_v_lost_packet(::youmecommon::protobuf::int32 value) {
  set_has_v_lost_packet();
  v_lost_packet_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.v_lost_packet)
}

// optional int32 a_bit_rate = 4;
inline bool YouMeVoice_Media_Info::has_a_bit_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Media_Info::set_has_a_bit_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Media_Info::clear_has_a_bit_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Media_Info::clear_a_bit_rate() {
  a_bit_rate_ = 0;
  clear_has_a_bit_rate();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::a_bit_rate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.a_bit_rate)
  return a_bit_rate_;
}
inline void YouMeVoice_Media_Info::set_a_bit_rate(::youmecommon::protobuf::int32 value) {
  set_has_a_bit_rate();
  a_bit_rate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.a_bit_rate)
}

// optional int32 a_lost_packet = 5;
inline bool YouMeVoice_Media_Info::has_a_lost_packet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Media_Info::set_has_a_lost_packet() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Media_Info::clear_has_a_lost_packet() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Media_Info::clear_a_lost_packet() {
  a_lost_packet_ = 0;
  clear_has_a_lost_packet();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::a_lost_packet() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.a_lost_packet)
  return a_lost_packet_;
}
inline void YouMeVoice_Media_Info::set_a_lost_packet(::youmecommon::protobuf::int32 value) {
  set_has_a_lost_packet();
  a_lost_packet_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.a_lost_packet)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_BussReport_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Command_BussReport_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_BussReport_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Command_BussReport_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_BussReport_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Command_BussReport_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_BussReport_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_BussReport_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_BussReport_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_BussReport_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_BussReport_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_BussReport_Req.sessionid)
}

// optional .YouMeProtocol.YouMeVoice_Media_Info video_info = 3;
inline bool YouMeVoice_Command_BussReport_Req::has_video_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Command_BussReport_Req::set_has_video_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_has_video_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_video_info() {
  if (video_info_ != NULL) video_info_->::YouMeProtocol::YouMeVoice_Media_Info::Clear();
  clear_has_video_info();
}
inline const ::YouMeProtocol::YouMeVoice_Media_Info& YouMeVoice_Command_BussReport_Req::video_info() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.video_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_info_ != NULL ? *video_info_ : *default_instance().video_info_;
#else
  return video_info_ != NULL ? *video_info_ : *default_instance_->video_info_;
#endif
}
inline ::YouMeProtocol::YouMeVoice_Media_Info* YouMeVoice_Command_BussReport_Req::mutable_video_info() {
  set_has_video_info();
  if (video_info_ == NULL) {
    video_info_ = new ::YouMeProtocol::YouMeVoice_Media_Info;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Req.video_info)
  return video_info_;
}
inline ::YouMeProtocol::YouMeVoice_Media_Info* YouMeVoice_Command_BussReport_Req::release_video_info() {
  clear_has_video_info();
  ::YouMeProtocol::YouMeVoice_Media_Info* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_BussReport_Req::set_allocated_video_info(::YouMeProtocol::YouMeVoice_Media_Info* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    set_has_video_info();
  } else {
    clear_has_video_info();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Req.video_info)
}

// optional string business_infos = 99;
inline bool YouMeVoice_Command_BussReport_Req::has_business_infos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Command_BussReport_Req::set_has_business_infos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_has_business_infos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Command_BussReport_Req::clear_business_infos() {
  business_infos_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_business_infos();
}
inline const ::std::string& YouMeVoice_Command_BussReport_Req::business_infos() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
  return business_infos_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_BussReport_Req::set_business_infos(const ::std::string& value) {
  set_has_business_infos();
  business_infos_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}
inline void YouMeVoice_Command_BussReport_Req::set_business_infos(const char* value) {
  set_has_business_infos();
  business_infos_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}
inline void YouMeVoice_Command_BussReport_Req::set_business_infos(const char* value, size_t size) {
  set_has_business_infos();
  business_infos_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}
inline ::std::string* YouMeVoice_Command_BussReport_Req::mutable_business_infos() {
  set_has_business_infos();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
  return business_infos_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Command_BussReport_Req::release_business_infos() {
  clear_has_business_infos();
  return business_infos_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Command_BussReport_Req::set_allocated_business_infos(::std::string* business_infos) {
  if (business_infos != NULL) {
    set_has_business_infos();
  } else {
    clear_has_business_infos();
  }
  business_infos_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), business_infos);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_BussReport_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Command_BussReport_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Command_BussReport_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Command_BussReport_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Command_BussReport_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_BussReport_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_BussReport_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_BussReport_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Command_BussReport_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Command_BussReport_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Command_BussReport_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Command_BussReport_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Command_BussReport_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Command_BussReport_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Command_BussReport_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.sessionid)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_SetPushSingle_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Video_SetPushSingle_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Video_SetPushSingle_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushSingle_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushSingle_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_SetPushSingle_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushSingle_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_SetPushSingle_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_SetPushSingle_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}

// required string user_id = 4;
inline bool YouMeVoice_Video_SetPushSingle_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Video_SetPushSingle_Req::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Req::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}

// required string push_url = 5;
inline bool YouMeVoice_Video_SetPushSingle_Req::has_push_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_has_push_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_has_push_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_SetPushSingle_Req::clear_push_url() {
  push_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_push_url();
}
inline const ::std::string& YouMeVoice_Video_SetPushSingle_Req::push_url() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
  return push_url_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_push_url(const ::std::string& value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_push_url(const char* value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_push_url(const char* value, size_t size) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Req::mutable_push_url() {
  set_has_push_url();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
  return push_url_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Req::release_push_url() {
  clear_has_push_url();
  return push_url_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Req::set_allocated_push_url(::std::string* push_url) {
  if (push_url != NULL) {
    set_has_push_url();
  } else {
    clear_has_push_url();
  }
  push_url_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), push_url);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_SetPushSingle_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_SetPushSingle_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_SetPushSingle_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushSingle_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushSingle_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_SetPushSingle_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushSingle_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_SetPushSingle_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_SetPushSingle_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}

// required string user_id = 4;
inline bool YouMeVoice_Video_SetPushSingle_Rsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Video_SetPushSingle_Rsp::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}

// required int32 result = 5;
inline bool YouMeVoice_Video_SetPushSingle_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushSingle_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.result)
  return result_;
}
inline void YouMeVoice_Video_SetPushSingle_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.result)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_RemovePushSingle_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Video_RemovePushSingle_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Video_RemovePushSingle_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_RemovePushSingle_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_RemovePushSingle_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_RemovePushSingle_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_RemovePushSingle_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_RemovePushSingle_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_RemovePushSingle_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}

// required string user_id = 4;
inline bool YouMeVoice_Video_RemovePushSingle_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_RemovePushSingle_Req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Video_RemovePushSingle_Req::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Req::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_RemovePushSingle_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_RemovePushSingle_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_RemovePushSingle_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_RemovePushSingle_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_RemovePushSingle_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_RemovePushSingle_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_RemovePushSingle_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_RemovePushSingle_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_RemovePushSingle_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}

// required string user_id = 4;
inline bool YouMeVoice_Video_RemovePushSingle_Rsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
inline const ::std::string& YouMeVoice_Video_RemovePushSingle_Rsp::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}

// required int32 result = 5;
inline bool YouMeVoice_Video_RemovePushSingle_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_RemovePushSingle_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.result)
  return result_;
}
inline void YouMeVoice_Video_RemovePushSingle_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.result)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_SetPushMix_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Video_SetPushMix_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Video_SetPushMix_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushMix_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushMix_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_SetPushMix_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_SetPushMix_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_SetPushMix_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}
inline void YouMeVoice_Video_SetPushMix_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}
inline void YouMeVoice_Video_SetPushMix_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}

// required string primary_userid = 4;
inline bool YouMeVoice_Video_SetPushMix_Req::has_primary_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_primary_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_primary_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_primary_userid() {
  primary_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_userid();
}
inline const ::std::string& YouMeVoice_Video_SetPushMix_Req::primary_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
  return primary_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Req::set_primary_userid(const ::std::string& value) {
  set_has_primary_userid();
  primary_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}
inline void YouMeVoice_Video_SetPushMix_Req::set_primary_userid(const char* value) {
  set_has_primary_userid();
  primary_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}
inline void YouMeVoice_Video_SetPushMix_Req::set_primary_userid(const char* value, size_t size) {
  set_has_primary_userid();
  primary_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Req::mutable_primary_userid() {
  set_has_primary_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
  return primary_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Req::release_primary_userid() {
  clear_has_primary_userid();
  return primary_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Req::set_allocated_primary_userid(::std::string* primary_userid) {
  if (primary_userid != NULL) {
    set_has_primary_userid();
  } else {
    clear_has_primary_userid();
  }
  primary_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), primary_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}

// required string push_url = 5;
inline bool YouMeVoice_Video_SetPushMix_Req::has_push_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_push_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_push_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_push_url() {
  push_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_push_url();
}
inline const ::std::string& YouMeVoice_Video_SetPushMix_Req::push_url() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
  return push_url_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Req::set_push_url(const ::std::string& value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}
inline void YouMeVoice_Video_SetPushMix_Req::set_push_url(const char* value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}
inline void YouMeVoice_Video_SetPushMix_Req::set_push_url(const char* value, size_t size) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Req::mutable_push_url() {
  set_has_push_url();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
  return push_url_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Req::release_push_url() {
  clear_has_push_url();
  return push_url_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Req::set_allocated_push_url(::std::string* push_url) {
  if (push_url != NULL) {
    set_has_push_url();
  } else {
    clear_has_push_url();
  }
  push_url_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), push_url);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}

// optional int32 video_width = 6;
inline bool YouMeVoice_Video_SetPushMix_Req::has_video_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_video_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_video_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_video_width() {
  video_width_ = 0;
  clear_has_video_width();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Req::video_width() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_width)
  return video_width_;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_video_width(::youmecommon::protobuf::int32 value) {
  set_has_video_width();
  video_width_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_width)
}

// optional int32 video_height = 7;
inline bool YouMeVoice_Video_SetPushMix_Req::has_video_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_has_video_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_has_video_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Video_SetPushMix_Req::clear_video_height() {
  video_height_ = 0;
  clear_has_video_height();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Req::video_height() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_height)
  return video_height_;
}
inline void YouMeVoice_Video_SetPushMix_Req::set_video_height(::youmecommon::protobuf::int32 value) {
  set_has_video_height();
  video_height_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_height)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_SetPushMix_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_SetPushMix_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_SetPushMix_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushMix_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushMix_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_SetPushMix_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_SetPushMix_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_SetPushMix_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_SetPushMix_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}

// required int32 result = 4;
inline bool YouMeVoice_Video_SetPushMix_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.result)
  return result_;
}
inline void YouMeVoice_Video_SetPushMix_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.result)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_ClearPushMix_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Video_ClearPushMix_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_ClearPushMix_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_ClearPushMix_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Video_ClearPushMix_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_ClearPushMix_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_ClearPushMix_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_ClearPushMix_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_ClearPushMix_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_ClearPushMix_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_ClearPushMix_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_ClearPushMix_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_ClearPushMix_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_ClearPushMix_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_ClearPushMix_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}
inline ::std::string* YouMeVoice_Video_ClearPushMix_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_ClearPushMix_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_ClearPushMix_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_ClearPushMix_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_ClearPushMix_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_ClearPushMix_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_ClearPushMix_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_ClearPushMix_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_ClearPushMix_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_ClearPushMix_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_ClearPushMix_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_ClearPushMix_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}
inline ::std::string* YouMeVoice_Video_ClearPushMix_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_ClearPushMix_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}

// required int32 result = 4;
inline bool YouMeVoice_Video_ClearPushMix_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_ClearPushMix_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.result)
  return result_;
}
inline void YouMeVoice_Video_ClearPushMix_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.result)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_AddPushMixUser_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Video_AddPushMixUser_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_AddPushMixUser_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_AddPushMixUser_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_AddPushMixUser_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}

// required string userid = 4;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Video_AddPushMixUser_Req::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Req::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Req::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}

// required int32 x = 5;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::x() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.x)
  return x_;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_x(::youmecommon::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.x)
}

// required int32 y = 6;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::y() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.y)
  return y_;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_y(::youmecommon::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.y)
}

// required int32 z = 7;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::z() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.z)
  return z_;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_z(::youmecommon::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.z)
}

// required int32 video_width = 8;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_video_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_video_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_video_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_video_width() {
  video_width_ = 0;
  clear_has_video_width();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::video_width() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_width)
  return video_width_;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_video_width(::youmecommon::protobuf::int32 value) {
  set_has_video_width();
  video_width_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_width)
}

// required int32 video_height = 9;
inline bool YouMeVoice_Video_AddPushMixUser_Req::has_video_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_has_video_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_has_video_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::clear_video_height() {
  video_height_ = 0;
  clear_has_video_height();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::video_height() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_height)
  return video_height_;
}
inline void YouMeVoice_Video_AddPushMixUser_Req::set_video_height(::youmecommon::protobuf::int32 value) {
  set_has_video_height();
  video_height_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_height)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_AddPushMixUser_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_AddPushMixUser_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_AddPushMixUser_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_AddPushMixUser_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_AddPushMixUser_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_AddPushMixUser_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_AddPushMixUser_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_AddPushMixUser_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}

// required string userid = 4;
inline bool YouMeVoice_Video_AddPushMixUser_Rsp::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Video_AddPushMixUser_Rsp::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}

// required int32 result = 5;
inline bool YouMeVoice_Video_AddPushMixUser_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.result)
  return result_;
}
inline void YouMeVoice_Video_AddPushMixUser_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.result)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_DelPushMixUser_Req

// required .YouMeProtocol.PacketHead head = 1;
inline bool YouMeVoice_Video_DelPushMixUser_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& YouMeVoice_Video_DelPushMixUser_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_DelPushMixUser_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* YouMeVoice_Video_DelPushMixUser_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_DelPushMixUser_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_DelPushMixUser_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_DelPushMixUser_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_DelPushMixUser_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}

// required string userid = 4;
inline bool YouMeVoice_Video_DelPushMixUser_Req::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_DelPushMixUser_Req::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Video_DelPushMixUser_Req::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Req::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Req::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Req::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_DelPushMixUser_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_DelPushMixUser_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_DelPushMixUser_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_DelPushMixUser_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_DelPushMixUser_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.head)
}

// required int32 sessionid = 2;
inline bool YouMeVoice_Video_DelPushMixUser_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_DelPushMixUser_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.sessionid)
  return sessionid_;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.sessionid)
}

// required string channelid = 3;
inline bool YouMeVoice_Video_DelPushMixUser_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_DelPushMixUser_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}

// required string userid = 4;
inline bool YouMeVoice_Video_DelPushMixUser_Rsp::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Video_DelPushMixUser_Rsp::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}

// required int32 result = 5;
inline bool YouMeVoice_Video_DelPushMixUser_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::youmecommon::protobuf::int32 YouMeVoice_Video_DelPushMixUser_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.result)
  return result_;
}
inline void YouMeVoice_Video_DelPushMixUser_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.result)
}

// -------------------------------------------------------------------

// YouMeVoice_Video_OtherSetPushMix_Notify

// required .YouMeProtocol.ServerPacketHead head = 1;
inline bool YouMeVoice_Video_OtherSetPushMix_Notify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_OtherSetPushMix_Notify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_OtherSetPushMix_Notify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.head)
  return head_;
}
inline ::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_OtherSetPushMix_Notify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.head)
}

// required string channelid = 2;
inline bool YouMeVoice_Video_OtherSetPushMix_Notify::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
inline const ::std::string& YouMeVoice_Video_OtherSetPushMix_Notify::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}
inline ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}

// required string userid = 3;
inline bool YouMeVoice_Video_OtherSetPushMix_Notify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& YouMeVoice_Video_OtherSetPushMix_Notify::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}
inline ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YouMeVoice_Video_OtherSetPushMix_Notify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YouMeProtocol::FIGHT_MIC_ERROR_CODE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YouMeProtocol::FIGHT_MIC_EVENT_TYPE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YouMeProtocol::INVITE_ERROR_CODE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YouMeProtocol::INVITE_EVENT_TYPE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YouMeProtocol::KICK_CODE> : ::youmecommon::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::YouMeProtocol::MEDIA_CTL> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace youmecommon
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_serverlogin_2eproto__INCLUDED
