// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverlogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "serverlogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeProtocol {

void protobuf_ShutdownFile_serverlogin_2eproto() {
  delete Bridge::default_instance_;
  delete Serveraddr::default_instance_;
  delete YouMeVoice_Command_JoinConference::default_instance_;
  delete StreamProxyInfo::default_instance_;
  delete YouMeVoice_Command_JoinConferenceResponse::default_instance_;
  delete YouMeVoice_Command_JoinConferenceResponse_Speaker::default_instance_;
  delete YouMeVoice_Command_LeaveConference::default_instance_;
  delete YouMeVoice_Command_ChannelUserList_Request::default_instance_;
  delete YouMeVoice_UserInfo::default_instance_;
  delete YouMeVoice_Command_ChannelUserList_Response::default_instance_;
  delete JoinLeaveUser::default_instance_;
  delete YouMeVoice_Command_ChannelUserJoinLeaveNotify::default_instance_;
  delete YouMeVoice_Command_LeaveConferenceResponse::default_instance_;
  delete YouMeVoice_Command_Heart::default_instance_;
  delete YouMeVoice_Command_HeartResponse::default_instance_;
  delete YouMeVoice_Command_Kickout::default_instance_;
  delete YouMeVoice_Command_MicStatus::default_instance_;
  delete YouMeVoice_Command_MicStatusServer::default_instance_;
  delete YouMeVoice_Command_CommonStatus::default_instance_;
  delete YouMeVoice_Command_CommonStatusServer::default_instance_;
  delete YouMeVoice_Command_Recive_Members::default_instance_;
  delete YouMeVoice_Command_JoinRoomRequest::default_instance_;
  delete YouMeVoice_Command_JoinRoomResponse::default_instance_;
  delete YouMeVoice_Command_LeaveRoomRequest::default_instance_;
  delete YouMeVoice_Command_LeaveRoomResponse::default_instance_;
  delete YouMeVoice_Command_SpeakToRoomRequest::default_instance_;
  delete YouMeVoice_Command_SpeakToRoomResponse::default_instance_;
  delete YouMeVoice_Command_Session2UserIdRequest::default_instance_;
  delete YouMeVoice_Command_Session2UserIdResponse::default_instance_;
  delete YouMeVoice_Command_Session2UserIdResponse_Speaker::default_instance_;
  delete YouMeVoice_Command_Fight4MicInitRequest::default_instance_;
  delete YouMeVoice_Command_Fight4MicInitResponse::default_instance_;
  delete YouMeVoice_Command_Fight4MicRequest::default_instance_;
  delete YouMeVoice_Command_Fight4MicResponse::default_instance_;
  delete YouMeVoice_Command_Fight4MicDeinitRequest::default_instance_;
  delete YouMeVoice_Command_Fight4MicDeinitResponse::default_instance_;
  delete YouMeVoice_Command_Fight4MicNotifyRequest::default_instance_;
  delete YouMeVoice_Command_ReleaseMicRequest::default_instance_;
  delete YouMeVoice_Command_ReleaseMicResponse::default_instance_;
  delete YouMeVoice_Command_InviteInitRequest::default_instance_;
  delete YouMeVoice_Command_InviteInitResponse::default_instance_;
  delete YouMeVoice_Command_InviteRequest::default_instance_;
  delete YouMeVoice_Command_InviteResponse::default_instance_;
  delete YouMeVoice_Command_InviteNotifyRequest::default_instance_;
  delete YouMeVoice_Command_AcceptRequest::default_instance_;
  delete YouMeVoice_Command_AcceptResponse::default_instance_;
  delete YouMeVoice_Command_InviteByeRequest::default_instance_;
  delete YouMeVoice_Command_InviteByeResponse::default_instance_;
  delete YouMeVoice_Command_MaskVideoByUserIdRequest::default_instance_;
  delete YouMeVoice_Command_MaskVideoByUserIdResponse::default_instance_;
  delete YouMeVoice_Command_MaskVideoNotifyRequest::default_instance_;
  delete YouMeVoice_Command_CameraStatusChangeRequest::default_instance_;
  delete YouMeVoice_Command_CameraStatusChangeResponse::default_instance_;
  delete YouMeVoice_Command_CameraNotifyRequest::default_instance_;
  delete YouMeVoice_Command_SendMessageRequest::default_instance_;
  delete YouMeVoice_Command_SendMessageResponse::default_instance_;
  delete YouMeVoice_Command_MessageNotify::default_instance_;
  delete YouMeVoice_Command_KickingRequest::default_instance_;
  delete YouMeVoice_Command_KickingResponse::default_instance_;
  delete YouMeVoice_Command_KickingNotify::default_instance_;
  delete YouMeVoice_Media_ctl_Header::default_instance_;
  delete LostPacketStatNotify::default_instance_;
  delete YouMeVoice_Command_Media_ctl_req::default_instance_;
  delete YouMeVoice_Command_Media_ctl_rsp::default_instance_;
  delete YouMeVoice_Command_AVInput_Status_Req::default_instance_;
  delete YouMeVoice_Command_AVInput_Status_Rsq::default_instance_;
  delete YouMeVoice_Command_AVInput_Notify::default_instance_;
  delete YouMeVoice_Command_Query_User_Video_Info_Req::default_instance_;
  delete YouMeVoice_UserVedioInfo::default_instance_;
  delete YouMeVoice_Video_info::default_instance_;
  delete YouMeVoice_Command_Query_User_Video_Info_Rsp::default_instance_;
  delete YouMeVoice_Command_Set_User_Video_Info_Req::default_instance_;
  delete YouMeVoice_Command_Set_User_Video_Info_Rsp::default_instance_;
  delete YouMeVoice_Command_Set_User_Video_Info_Notify::default_instance_;
  delete YouMeVoice_Media_Info::default_instance_;
  delete YouMeVoice_Command_BussReport_Req::default_instance_;
  delete YouMeVoice_Command_BussReport_Rsp::default_instance_;
  delete YouMeVoice_Video_SetPushSingle_Req::default_instance_;
  delete YouMeVoice_Video_SetPushSingle_Rsp::default_instance_;
  delete YouMeVoice_Video_RemovePushSingle_Req::default_instance_;
  delete YouMeVoice_Video_RemovePushSingle_Rsp::default_instance_;
  delete YouMeVoice_Video_SetPushMix_Req::default_instance_;
  delete YouMeVoice_Video_SetPushMix_Rsp::default_instance_;
  delete YouMeVoice_Video_ClearPushMix_Req::default_instance_;
  delete YouMeVoice_Video_ClearPushMix_Rsp::default_instance_;
  delete YouMeVoice_Video_AddPushMixUser_Req::default_instance_;
  delete YouMeVoice_Video_AddPushMixUser_Rsp::default_instance_;
  delete YouMeVoice_Video_DelPushMixUser_Req::default_instance_;
  delete YouMeVoice_Video_DelPushMixUser_Rsp::default_instance_;
  delete YouMeVoice_Video_OtherSetPushMix_Notify::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_serverlogin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_serverlogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YouMeProtocol::protobuf_AddDesc_common_2eproto();
  Bridge::default_instance_ = new Bridge();
  Serveraddr::default_instance_ = new Serveraddr();
  YouMeVoice_Command_JoinConference::default_instance_ = new YouMeVoice_Command_JoinConference();
  StreamProxyInfo::default_instance_ = new StreamProxyInfo();
  YouMeVoice_Command_JoinConferenceResponse::default_instance_ = new YouMeVoice_Command_JoinConferenceResponse();
  YouMeVoice_Command_JoinConferenceResponse_Speaker::default_instance_ = new YouMeVoice_Command_JoinConferenceResponse_Speaker();
  YouMeVoice_Command_LeaveConference::default_instance_ = new YouMeVoice_Command_LeaveConference();
  YouMeVoice_Command_ChannelUserList_Request::default_instance_ = new YouMeVoice_Command_ChannelUserList_Request();
  YouMeVoice_UserInfo::default_instance_ = new YouMeVoice_UserInfo();
  YouMeVoice_Command_ChannelUserList_Response::default_instance_ = new YouMeVoice_Command_ChannelUserList_Response();
  JoinLeaveUser::default_instance_ = new JoinLeaveUser();
  YouMeVoice_Command_ChannelUserJoinLeaveNotify::default_instance_ = new YouMeVoice_Command_ChannelUserJoinLeaveNotify();
  YouMeVoice_Command_LeaveConferenceResponse::default_instance_ = new YouMeVoice_Command_LeaveConferenceResponse();
  YouMeVoice_Command_Heart::default_instance_ = new YouMeVoice_Command_Heart();
  YouMeVoice_Command_HeartResponse::default_instance_ = new YouMeVoice_Command_HeartResponse();
  YouMeVoice_Command_Kickout::default_instance_ = new YouMeVoice_Command_Kickout();
  YouMeVoice_Command_MicStatus::default_instance_ = new YouMeVoice_Command_MicStatus();
  YouMeVoice_Command_MicStatusServer::default_instance_ = new YouMeVoice_Command_MicStatusServer();
  YouMeVoice_Command_CommonStatus::default_instance_ = new YouMeVoice_Command_CommonStatus();
  YouMeVoice_Command_CommonStatusServer::default_instance_ = new YouMeVoice_Command_CommonStatusServer();
  YouMeVoice_Command_Recive_Members::default_instance_ = new YouMeVoice_Command_Recive_Members();
  YouMeVoice_Command_JoinRoomRequest::default_instance_ = new YouMeVoice_Command_JoinRoomRequest();
  YouMeVoice_Command_JoinRoomResponse::default_instance_ = new YouMeVoice_Command_JoinRoomResponse();
  YouMeVoice_Command_LeaveRoomRequest::default_instance_ = new YouMeVoice_Command_LeaveRoomRequest();
  YouMeVoice_Command_LeaveRoomResponse::default_instance_ = new YouMeVoice_Command_LeaveRoomResponse();
  YouMeVoice_Command_SpeakToRoomRequest::default_instance_ = new YouMeVoice_Command_SpeakToRoomRequest();
  YouMeVoice_Command_SpeakToRoomResponse::default_instance_ = new YouMeVoice_Command_SpeakToRoomResponse();
  YouMeVoice_Command_Session2UserIdRequest::default_instance_ = new YouMeVoice_Command_Session2UserIdRequest();
  YouMeVoice_Command_Session2UserIdResponse::default_instance_ = new YouMeVoice_Command_Session2UserIdResponse();
  YouMeVoice_Command_Session2UserIdResponse_Speaker::default_instance_ = new YouMeVoice_Command_Session2UserIdResponse_Speaker();
  YouMeVoice_Command_Fight4MicInitRequest::default_instance_ = new YouMeVoice_Command_Fight4MicInitRequest();
  YouMeVoice_Command_Fight4MicInitResponse::default_instance_ = new YouMeVoice_Command_Fight4MicInitResponse();
  YouMeVoice_Command_Fight4MicRequest::default_instance_ = new YouMeVoice_Command_Fight4MicRequest();
  YouMeVoice_Command_Fight4MicResponse::default_instance_ = new YouMeVoice_Command_Fight4MicResponse();
  YouMeVoice_Command_Fight4MicDeinitRequest::default_instance_ = new YouMeVoice_Command_Fight4MicDeinitRequest();
  YouMeVoice_Command_Fight4MicDeinitResponse::default_instance_ = new YouMeVoice_Command_Fight4MicDeinitResponse();
  YouMeVoice_Command_Fight4MicNotifyRequest::default_instance_ = new YouMeVoice_Command_Fight4MicNotifyRequest();
  YouMeVoice_Command_ReleaseMicRequest::default_instance_ = new YouMeVoice_Command_ReleaseMicRequest();
  YouMeVoice_Command_ReleaseMicResponse::default_instance_ = new YouMeVoice_Command_ReleaseMicResponse();
  YouMeVoice_Command_InviteInitRequest::default_instance_ = new YouMeVoice_Command_InviteInitRequest();
  YouMeVoice_Command_InviteInitResponse::default_instance_ = new YouMeVoice_Command_InviteInitResponse();
  YouMeVoice_Command_InviteRequest::default_instance_ = new YouMeVoice_Command_InviteRequest();
  YouMeVoice_Command_InviteResponse::default_instance_ = new YouMeVoice_Command_InviteResponse();
  YouMeVoice_Command_InviteNotifyRequest::default_instance_ = new YouMeVoice_Command_InviteNotifyRequest();
  YouMeVoice_Command_AcceptRequest::default_instance_ = new YouMeVoice_Command_AcceptRequest();
  YouMeVoice_Command_AcceptResponse::default_instance_ = new YouMeVoice_Command_AcceptResponse();
  YouMeVoice_Command_InviteByeRequest::default_instance_ = new YouMeVoice_Command_InviteByeRequest();
  YouMeVoice_Command_InviteByeResponse::default_instance_ = new YouMeVoice_Command_InviteByeResponse();
  YouMeVoice_Command_MaskVideoByUserIdRequest::default_instance_ = new YouMeVoice_Command_MaskVideoByUserIdRequest();
  YouMeVoice_Command_MaskVideoByUserIdResponse::default_instance_ = new YouMeVoice_Command_MaskVideoByUserIdResponse();
  YouMeVoice_Command_MaskVideoNotifyRequest::default_instance_ = new YouMeVoice_Command_MaskVideoNotifyRequest();
  YouMeVoice_Command_CameraStatusChangeRequest::default_instance_ = new YouMeVoice_Command_CameraStatusChangeRequest();
  YouMeVoice_Command_CameraStatusChangeResponse::default_instance_ = new YouMeVoice_Command_CameraStatusChangeResponse();
  YouMeVoice_Command_CameraNotifyRequest::default_instance_ = new YouMeVoice_Command_CameraNotifyRequest();
  YouMeVoice_Command_SendMessageRequest::default_instance_ = new YouMeVoice_Command_SendMessageRequest();
  YouMeVoice_Command_SendMessageResponse::default_instance_ = new YouMeVoice_Command_SendMessageResponse();
  YouMeVoice_Command_MessageNotify::default_instance_ = new YouMeVoice_Command_MessageNotify();
  YouMeVoice_Command_KickingRequest::default_instance_ = new YouMeVoice_Command_KickingRequest();
  YouMeVoice_Command_KickingResponse::default_instance_ = new YouMeVoice_Command_KickingResponse();
  YouMeVoice_Command_KickingNotify::default_instance_ = new YouMeVoice_Command_KickingNotify();
  YouMeVoice_Media_ctl_Header::default_instance_ = new YouMeVoice_Media_ctl_Header();
  LostPacketStatNotify::default_instance_ = new LostPacketStatNotify();
  YouMeVoice_Command_Media_ctl_req::default_instance_ = new YouMeVoice_Command_Media_ctl_req();
  YouMeVoice_Command_Media_ctl_rsp::default_instance_ = new YouMeVoice_Command_Media_ctl_rsp();
  YouMeVoice_Command_AVInput_Status_Req::default_instance_ = new YouMeVoice_Command_AVInput_Status_Req();
  YouMeVoice_Command_AVInput_Status_Rsq::default_instance_ = new YouMeVoice_Command_AVInput_Status_Rsq();
  YouMeVoice_Command_AVInput_Notify::default_instance_ = new YouMeVoice_Command_AVInput_Notify();
  YouMeVoice_Command_Query_User_Video_Info_Req::default_instance_ = new YouMeVoice_Command_Query_User_Video_Info_Req();
  YouMeVoice_UserVedioInfo::default_instance_ = new YouMeVoice_UserVedioInfo();
  YouMeVoice_Video_info::default_instance_ = new YouMeVoice_Video_info();
  YouMeVoice_Command_Query_User_Video_Info_Rsp::default_instance_ = new YouMeVoice_Command_Query_User_Video_Info_Rsp();
  YouMeVoice_Command_Set_User_Video_Info_Req::default_instance_ = new YouMeVoice_Command_Set_User_Video_Info_Req();
  YouMeVoice_Command_Set_User_Video_Info_Rsp::default_instance_ = new YouMeVoice_Command_Set_User_Video_Info_Rsp();
  YouMeVoice_Command_Set_User_Video_Info_Notify::default_instance_ = new YouMeVoice_Command_Set_User_Video_Info_Notify();
  YouMeVoice_Media_Info::default_instance_ = new YouMeVoice_Media_Info();
  YouMeVoice_Command_BussReport_Req::default_instance_ = new YouMeVoice_Command_BussReport_Req();
  YouMeVoice_Command_BussReport_Rsp::default_instance_ = new YouMeVoice_Command_BussReport_Rsp();
  YouMeVoice_Video_SetPushSingle_Req::default_instance_ = new YouMeVoice_Video_SetPushSingle_Req();
  YouMeVoice_Video_SetPushSingle_Rsp::default_instance_ = new YouMeVoice_Video_SetPushSingle_Rsp();
  YouMeVoice_Video_RemovePushSingle_Req::default_instance_ = new YouMeVoice_Video_RemovePushSingle_Req();
  YouMeVoice_Video_RemovePushSingle_Rsp::default_instance_ = new YouMeVoice_Video_RemovePushSingle_Rsp();
  YouMeVoice_Video_SetPushMix_Req::default_instance_ = new YouMeVoice_Video_SetPushMix_Req();
  YouMeVoice_Video_SetPushMix_Rsp::default_instance_ = new YouMeVoice_Video_SetPushMix_Rsp();
  YouMeVoice_Video_ClearPushMix_Req::default_instance_ = new YouMeVoice_Video_ClearPushMix_Req();
  YouMeVoice_Video_ClearPushMix_Rsp::default_instance_ = new YouMeVoice_Video_ClearPushMix_Rsp();
  YouMeVoice_Video_AddPushMixUser_Req::default_instance_ = new YouMeVoice_Video_AddPushMixUser_Req();
  YouMeVoice_Video_AddPushMixUser_Rsp::default_instance_ = new YouMeVoice_Video_AddPushMixUser_Rsp();
  YouMeVoice_Video_DelPushMixUser_Req::default_instance_ = new YouMeVoice_Video_DelPushMixUser_Req();
  YouMeVoice_Video_DelPushMixUser_Rsp::default_instance_ = new YouMeVoice_Video_DelPushMixUser_Rsp();
  YouMeVoice_Video_OtherSetPushMix_Notify::default_instance_ = new YouMeVoice_Video_OtherSetPushMix_Notify();
  Bridge::default_instance_->InitAsDefaultInstance();
  Serveraddr::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_JoinConference::default_instance_->InitAsDefaultInstance();
  StreamProxyInfo::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_JoinConferenceResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_JoinConferenceResponse_Speaker::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_LeaveConference::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_ChannelUserList_Request::default_instance_->InitAsDefaultInstance();
  YouMeVoice_UserInfo::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_ChannelUserList_Response::default_instance_->InitAsDefaultInstance();
  JoinLeaveUser::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_ChannelUserJoinLeaveNotify::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_LeaveConferenceResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Heart::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_HeartResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Kickout::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_MicStatus::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_MicStatusServer::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_CommonStatus::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_CommonStatusServer::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Recive_Members::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_JoinRoomRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_JoinRoomResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_LeaveRoomRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_LeaveRoomResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_SpeakToRoomRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_SpeakToRoomResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Session2UserIdRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Session2UserIdResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Session2UserIdResponse_Speaker::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicInitRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicInitResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicDeinitRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicDeinitResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Fight4MicNotifyRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_ReleaseMicRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_ReleaseMicResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteInitRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteInitResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteNotifyRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_AcceptRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_AcceptResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteByeRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_InviteByeResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_MaskVideoByUserIdRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_MaskVideoByUserIdResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_MaskVideoNotifyRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_CameraStatusChangeRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_CameraStatusChangeResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_CameraNotifyRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_SendMessageRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_SendMessageResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_MessageNotify::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_KickingRequest::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_KickingResponse::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_KickingNotify::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Media_ctl_Header::default_instance_->InitAsDefaultInstance();
  LostPacketStatNotify::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Media_ctl_req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Media_ctl_rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_AVInput_Status_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_AVInput_Status_Rsq::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_AVInput_Notify::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Query_User_Video_Info_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_UserVedioInfo::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_info::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Query_User_Video_Info_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Set_User_Video_Info_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Set_User_Video_Info_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_Set_User_Video_Info_Notify::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Media_Info::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_BussReport_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Command_BussReport_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_SetPushSingle_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_SetPushSingle_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_RemovePushSingle_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_RemovePushSingle_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_SetPushMix_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_SetPushMix_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_ClearPushMix_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_ClearPushMix_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_AddPushMixUser_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_AddPushMixUser_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_DelPushMixUser_Req::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_DelPushMixUser_Rsp::default_instance_->InitAsDefaultInstance();
  YouMeVoice_Video_OtherSetPushMix_Notify::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_serverlogin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_serverlogin_2eproto_once_);
void protobuf_AddDesc_serverlogin_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_serverlogin_2eproto_once_,
                 &protobuf_AddDesc_serverlogin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_serverlogin_2eproto {
  StaticDescriptorInitializer_serverlogin_2eproto() {
    protobuf_AddDesc_serverlogin_2eproto();
  }
} static_descriptor_initializer_serverlogin_2eproto_;
#endif
bool FIGHT_MIC_ERROR_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 98:
    case 99:
      return true;
    default:
      return false;
  }
}

bool FIGHT_MIC_EVENT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool INVITE_ERROR_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 99:
      return true;
    default:
      return false;
  }
}

bool INVITE_EVENT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool KICK_CODE_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}

bool MEDIA_CTL_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Bridge::kBridgeidFieldNumber;
const int Bridge::kHeadFieldNumber;
const int Bridge::kModeFieldNumber;
const int Bridge::kAreaFieldNumber;
#endif  // !_MSC_VER

Bridge::Bridge()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.Bridge)
}

void Bridge::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

Bridge::Bridge(const Bridge& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.Bridge)
}

void Bridge::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  bridgeid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  mode_ = 0;
  area_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bridge::~Bridge() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.Bridge)
  SharedDtor();
}

void Bridge::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  bridgeid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  area_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void Bridge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Bridge& Bridge::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

Bridge* Bridge::default_instance_ = NULL;

Bridge* Bridge::New(::youmecommon::protobuf::Arena* arena) const {
  Bridge* n = new Bridge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bridge::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_bridgeid()) {
      bridgeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    mode_ = 0;
    if (has_area()) {
      area_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Bridge::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.Bridge)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bridgeid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bridgeid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_head;
        break;
      }

      // optional .YouMeProtocol.PacketHead head = 2;
      case 2: {
        if (tag == 18) {
         parse_head:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional int32 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_area;
        break;
      }

      // optional string area = 4;
      case 4: {
        if (tag == 34) {
         parse_area:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.Bridge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.Bridge)
  return false;
#undef DO_
}

void Bridge::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.Bridge)
  // required string bridgeid = 1;
  if (has_bridgeid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bridgeid(), output);
  }

  // optional .YouMeProtocol.PacketHead head = 2;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->head_, output);
  }

  // optional int32 mode = 3;
  if (has_mode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional string area = 4;
  if (has_area()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->area(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.Bridge)
}

int Bridge::ByteSize() const {
  int total_size = 0;

  // required string bridgeid = 1;
  if (has_bridgeid()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->bridgeid());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional .YouMeProtocol.PacketHead head = 2;
    if (has_head()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->head_);
    }

    // optional int32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional string area = 4;
    if (has_area()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->area());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bridge::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const Bridge*>(&from));
}

void Bridge::MergeFrom(const Bridge& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bridgeid()) {
      set_has_bridgeid();
      bridgeid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.bridgeid_);
    }
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_area()) {
      set_has_area();
      area_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.area_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Bridge::CopyFrom(const Bridge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bridge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void Bridge::Swap(Bridge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bridge::InternalSwap(Bridge* other) {
  bridgeid_.Swap(&other->bridgeid_);
  std::swap(head_, other->head_);
  std::swap(mode_, other->mode_);
  area_.Swap(&other->area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Bridge::GetTypeName() const {
  return "YouMeProtocol.Bridge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bridge

// required string bridgeid = 1;
bool Bridge::has_bridgeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Bridge::set_has_bridgeid() {
  _has_bits_[0] |= 0x00000001u;
}
void Bridge::clear_has_bridgeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Bridge::clear_bridgeid() {
  bridgeid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bridgeid();
}
 const ::std::string& Bridge::bridgeid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.bridgeid)
  return bridgeid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bridge::set_bridgeid(const ::std::string& value) {
  set_has_bridgeid();
  bridgeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.Bridge.bridgeid)
}
 void Bridge::set_bridgeid(const char* value) {
  set_has_bridgeid();
  bridgeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.Bridge.bridgeid)
}
 void Bridge::set_bridgeid(const char* value, size_t size) {
  set_has_bridgeid();
  bridgeid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.Bridge.bridgeid)
}
 ::std::string* Bridge::mutable_bridgeid() {
  set_has_bridgeid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Bridge.bridgeid)
  return bridgeid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bridge::release_bridgeid() {
  clear_has_bridgeid();
  return bridgeid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bridge::set_allocated_bridgeid(::std::string* bridgeid) {
  if (bridgeid != NULL) {
    set_has_bridgeid();
  } else {
    clear_has_bridgeid();
  }
  bridgeid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), bridgeid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Bridge.bridgeid)
}

// optional .YouMeProtocol.PacketHead head = 2;
bool Bridge::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Bridge::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
void Bridge::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
void Bridge::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& Bridge::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* Bridge::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Bridge.head)
  return head_;
}
::YouMeProtocol::PacketHead* Bridge::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Bridge::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Bridge.head)
}

// optional int32 mode = 3;
bool Bridge::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Bridge::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void Bridge::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void Bridge::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::youmecommon::protobuf::int32 Bridge::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.mode)
  return mode_;
}
 void Bridge::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Bridge.mode)
}

// optional string area = 4;
bool Bridge::has_area() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Bridge::set_has_area() {
  _has_bits_[0] |= 0x00000008u;
}
void Bridge::clear_has_area() {
  _has_bits_[0] &= ~0x00000008u;
}
void Bridge::clear_area() {
  area_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_area();
}
 const ::std::string& Bridge::area() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Bridge.area)
  return area_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bridge::set_area(const ::std::string& value) {
  set_has_area();
  area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.Bridge.area)
}
 void Bridge::set_area(const char* value) {
  set_has_area();
  area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.Bridge.area)
}
 void Bridge::set_area(const char* value, size_t size) {
  set_has_area();
  area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.Bridge.area)
}
 ::std::string* Bridge::mutable_area() {
  set_has_area();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Bridge.area)
  return area_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Bridge::release_area() {
  clear_has_area();
  return area_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Bridge::set_allocated_area(::std::string* area) {
  if (area != NULL) {
    set_has_area();
  } else {
    clear_has_area();
  }
  area_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Bridge.area)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Serveraddr::kIpFieldNumber;
const int Serveraddr::kPortFieldNumber;
const int Serveraddr::kStatusFieldNumber;
const int Serveraddr::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Serveraddr::Serveraddr()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.Serveraddr)
}

void Serveraddr::InitAsDefaultInstance() {
}

Serveraddr::Serveraddr(const Serveraddr& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.Serveraddr)
}

void Serveraddr::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  status_ = 0;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Serveraddr::~Serveraddr() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.Serveraddr)
  SharedDtor();
}

void Serveraddr::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Serveraddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Serveraddr& Serveraddr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

Serveraddr* Serveraddr::default_instance_ = NULL;

Serveraddr* Serveraddr::New(::youmecommon::protobuf::Arena* arena) const {
  Serveraddr* n = new Serveraddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Serveraddr::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Serveraddr*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(port_, timeout_);
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Serveraddr::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.Serveraddr)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.Serveraddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.Serveraddr)
  return false;
#undef DO_
}

void Serveraddr::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.Serveraddr)
  // required string ip = 1;
  if (has_ip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // optional int32 timeout = 4;
  if (has_timeout()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.Serveraddr)
}

int Serveraddr::ByteSize() const {
  int total_size = 0;

  // required string ip = 1;
  if (has_ip()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serveraddr::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const Serveraddr*>(&from));
}

void Serveraddr::MergeFrom(const Serveraddr& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void Serveraddr::CopyFrom(const Serveraddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serveraddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Serveraddr::Swap(Serveraddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Serveraddr::InternalSwap(Serveraddr* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(status_, other->status_);
  std::swap(timeout_, other->timeout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Serveraddr::GetTypeName() const {
  return "YouMeProtocol.Serveraddr";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Serveraddr

// required string ip = 1;
bool Serveraddr::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Serveraddr::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void Serveraddr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void Serveraddr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& Serveraddr::ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.ip)
  return ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Serveraddr::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.ip)
}
 void Serveraddr::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.Serveraddr.ip)
}
 void Serveraddr::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.Serveraddr.ip)
}
 ::std::string* Serveraddr::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.Serveraddr.ip)
  return ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Serveraddr::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Serveraddr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.Serveraddr.ip)
}

// optional int32 port = 2;
bool Serveraddr::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Serveraddr::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Serveraddr::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Serveraddr::clear_port() {
  port_ = 0;
  clear_has_port();
}
 ::youmecommon::protobuf::int32 Serveraddr::port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.port)
  return port_;
}
 void Serveraddr::set_port(::youmecommon::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.port)
}

// optional int32 status = 3;
bool Serveraddr::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Serveraddr::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void Serveraddr::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void Serveraddr::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 Serveraddr::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.status)
  return status_;
}
 void Serveraddr::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.status)
}

// optional int32 timeout = 4;
bool Serveraddr::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Serveraddr::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void Serveraddr::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void Serveraddr::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
 ::youmecommon::protobuf::int32 Serveraddr::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.Serveraddr.timeout)
  return timeout_;
}
 void Serveraddr::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.Serveraddr.timeout)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_JoinConference::kHeadFieldNumber;
const int YouMeVoice_Command_JoinConference::kRoomidFieldNumber;
const int YouMeVoice_Command_JoinConference::kCapturerateFieldNumber;
const int YouMeVoice_Command_JoinConference::kEncodecomplexFieldNumber;
const int YouMeVoice_Command_JoinConference::kEnablevbrFieldNumber;
const int YouMeVoice_Command_JoinConference::kMaxbandlimitedFieldNumber;
const int YouMeVoice_Command_JoinConference::kInterbandfecFieldNumber;
const int YouMeVoice_Command_JoinConference::kOutbandfecFieldNumber;
const int YouMeVoice_Command_JoinConference::kFeclostFieldNumber;
const int YouMeVoice_Command_JoinConference::kEnabledtxFieldNumber;
const int YouMeVoice_Command_JoinConference::kUseridFieldNumber;
const int YouMeVoice_Command_JoinConference::kNeedUserListFieldNumber;
const int YouMeVoice_Command_JoinConference::kTokenFieldNumber;
const int YouMeVoice_Command_JoinConference::kCheckRoomExistFieldNumber;
const int YouMeVoice_Command_JoinConference::kAvNotifyFieldNumber;
const int YouMeVoice_Command_JoinConference::kUserRoleFieldNumber;
const int YouMeVoice_Command_JoinConference::kSourceFieldNumber;
const int YouMeVoice_Command_JoinConference::kAutoReciveFieldNumber;
const int YouMeVoice_Command_JoinConference::kTimestampFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_JoinConference::YouMeVoice_Command_JoinConference()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_JoinConference)
}

void YouMeVoice_Command_JoinConference::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_JoinConference::YouMeVoice_Command_JoinConference(const YouMeVoice_Command_JoinConference& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_JoinConference)
}

void YouMeVoice_Command_JoinConference::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  capturerate_ = 0;
  encodecomplex_ = 0;
  enablevbr_ = false;
  maxbandlimited_ = 0;
  interbandfec_ = false;
  outbandfec_ = false;
  feclost_ = 0;
  enabledtx_ = false;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  needuserlist_ = false;
  token_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  check_room_exist_ = false;
  av_notify_ = false;
  user_role_ = 0;
  source_ = 0;
  auto_recive_ = true;
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_JoinConference::~YouMeVoice_Command_JoinConference() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_JoinConference)
  SharedDtor();
}

void YouMeVoice_Command_JoinConference::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_JoinConference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_JoinConference& YouMeVoice_Command_JoinConference::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_JoinConference* YouMeVoice_Command_JoinConference::default_instance_ = NULL;

YouMeVoice_Command_JoinConference* YouMeVoice_Command_JoinConference::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_JoinConference* n = new YouMeVoice_Command_JoinConference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_JoinConference::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_JoinConference*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(capturerate_, outbandfec_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(feclost_, av_notify_);
    enabledtx_ = false;
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    user_role_ = 0;
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ZR_(source_, timestamp_);
    auto_recive_ = true;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_JoinConference::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_JoinConference)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // required string roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_capturerate;
        break;
      }

      // optional int32 capturerate = 3;
      case 3: {
        if (tag == 24) {
         parse_capturerate:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capturerate_)));
          set_has_capturerate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_encodecomplex;
        break;
      }

      // optional int32 encodecomplex = 4;
      case 4: {
        if (tag == 32) {
         parse_encodecomplex:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &encodecomplex_)));
          set_has_encodecomplex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enablevbr;
        break;
      }

      // optional bool enablevbr = 5;
      case 5: {
        if (tag == 40) {
         parse_enablevbr:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablevbr_)));
          set_has_enablevbr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_maxbandlimited;
        break;
      }

      // optional int32 maxbandlimited = 6;
      case 6: {
        if (tag == 48) {
         parse_maxbandlimited:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbandlimited_)));
          set_has_maxbandlimited();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_interbandfec;
        break;
      }

      // optional bool interbandfec = 7;
      case 7: {
        if (tag == 56) {
         parse_interbandfec:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &interbandfec_)));
          set_has_interbandfec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_outbandfec;
        break;
      }

      // optional bool outbandfec = 8;
      case 8: {
        if (tag == 64) {
         parse_outbandfec:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &outbandfec_)));
          set_has_outbandfec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_feclost;
        break;
      }

      // optional int32 feclost = 9;
      case 9: {
        if (tag == 72) {
         parse_feclost:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feclost_)));
          set_has_feclost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_enabledtx;
        break;
      }

      // optional bool enabledtx = 10;
      case 10: {
        if (tag == 80) {
         parse_enabledtx:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabledtx_)));
          set_has_enabledtx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_userid;
        break;
      }

      // optional string userid = 11;
      case 11: {
        if (tag == 90) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_needUserList;
        break;
      }

      // optional bool needUserList = 12;
      case 12: {
        if (tag == 96) {
         parse_needUserList:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needuserlist_)));
          set_has_needuserlist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_token;
        break;
      }

      // optional string token = 13;
      case 13: {
        if (tag == 106) {
         parse_token:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_check_room_exist;
        break;
      }

      // optional bool check_room_exist = 14 [default = false];
      case 14: {
        if (tag == 112) {
         parse_check_room_exist:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_room_exist_)));
          set_has_check_room_exist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_av_notify;
        break;
      }

      // optional bool av_notify = 15;
      case 15: {
        if (tag == 120) {
         parse_av_notify:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &av_notify_)));
          set_has_av_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_user_role;
        break;
      }

      // optional .YouMeProtocol.YouMeUserRole user_role = 16;
      case 16: {
        if (tag == 128) {
         parse_user_role:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeProtocol::YouMeUserRole_IsValid(value)) {
            set_user_role(static_cast< ::YouMeProtocol::YouMeUserRole >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_source;
        break;
      }

      // optional int32 source = 17;
      case 17: {
        if (tag == 136) {
         parse_source:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_auto_recive;
        break;
      }

      // optional bool auto_recive = 18 [default = true];
      case 18: {
        if (tag == 144) {
         parse_auto_recive:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto_recive_)));
          set_has_auto_recive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 21;
      case 21: {
        if (tag == 168) {
         parse_timestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_JoinConference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_JoinConference)
  return false;
#undef DO_
}

void YouMeVoice_Command_JoinConference::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_JoinConference)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string roomid = 2;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomid(), output);
  }

  // optional int32 capturerate = 3;
  if (has_capturerate()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->capturerate(), output);
  }

  // optional int32 encodecomplex = 4;
  if (has_encodecomplex()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->encodecomplex(), output);
  }

  // optional bool enablevbr = 5;
  if (has_enablevbr()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(5, this->enablevbr(), output);
  }

  // optional int32 maxbandlimited = 6;
  if (has_maxbandlimited()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->maxbandlimited(), output);
  }

  // optional bool interbandfec = 7;
  if (has_interbandfec()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(7, this->interbandfec(), output);
  }

  // optional bool outbandfec = 8;
  if (has_outbandfec()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(8, this->outbandfec(), output);
  }

  // optional int32 feclost = 9;
  if (has_feclost()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(9, this->feclost(), output);
  }

  // optional bool enabledtx = 10;
  if (has_enabledtx()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(10, this->enabledtx(), output);
  }

  // optional string userid = 11;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->userid(), output);
  }

  // optional bool needUserList = 12;
  if (has_needuserlist()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(12, this->needuserlist(), output);
  }

  // optional string token = 13;
  if (has_token()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->token(), output);
  }

  // optional bool check_room_exist = 14 [default = false];
  if (has_check_room_exist()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(14, this->check_room_exist(), output);
  }

  // optional bool av_notify = 15;
  if (has_av_notify()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(15, this->av_notify(), output);
  }

  // optional .YouMeProtocol.YouMeUserRole user_role = 16;
  if (has_user_role()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->user_role(), output);
  }

  // optional int32 source = 17;
  if (has_source()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(17, this->source(), output);
  }

  // optional bool auto_recive = 18 [default = true];
  if (has_auto_recive()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(18, this->auto_recive(), output);
  }

  // optional uint32 timestamp = 21;
  if (has_timestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(21, this->timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_JoinConference)
}

int YouMeVoice_Command_JoinConference::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_roomid()) {
    // required string roomid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  return total_size;
}
int YouMeVoice_Command_JoinConference::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string roomid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional int32 capturerate = 3;
    if (has_capturerate()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->capturerate());
    }

    // optional int32 encodecomplex = 4;
    if (has_encodecomplex()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->encodecomplex());
    }

    // optional bool enablevbr = 5;
    if (has_enablevbr()) {
      total_size += 1 + 1;
    }

    // optional int32 maxbandlimited = 6;
    if (has_maxbandlimited()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbandlimited());
    }

    // optional bool interbandfec = 7;
    if (has_interbandfec()) {
      total_size += 1 + 1;
    }

    // optional bool outbandfec = 8;
    if (has_outbandfec()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 feclost = 9;
    if (has_feclost()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->feclost());
    }

    // optional bool enabledtx = 10;
    if (has_enabledtx()) {
      total_size += 1 + 1;
    }

    // optional string userid = 11;
    if (has_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional bool needUserList = 12;
    if (has_needuserlist()) {
      total_size += 1 + 1;
    }

    // optional string token = 13;
    if (has_token()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional bool check_room_exist = 14 [default = false];
    if (has_check_room_exist()) {
      total_size += 1 + 1;
    }

    // optional bool av_notify = 15;
    if (has_av_notify()) {
      total_size += 1 + 1;
    }

    // optional .YouMeProtocol.YouMeUserRole user_role = 16;
    if (has_user_role()) {
      total_size += 2 +
        ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->user_role());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 source = 17;
    if (has_source()) {
      total_size += 2 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional bool auto_recive = 18 [default = true];
    if (has_auto_recive()) {
      total_size += 2 + 1;
    }

    // optional uint32 timestamp = 21;
    if (has_timestamp()) {
      total_size += 2 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_JoinConference::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_JoinConference*>(&from));
}

void YouMeVoice_Command_JoinConference::MergeFrom(const YouMeVoice_Command_JoinConference& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_capturerate()) {
      set_capturerate(from.capturerate());
    }
    if (from.has_encodecomplex()) {
      set_encodecomplex(from.encodecomplex());
    }
    if (from.has_enablevbr()) {
      set_enablevbr(from.enablevbr());
    }
    if (from.has_maxbandlimited()) {
      set_maxbandlimited(from.maxbandlimited());
    }
    if (from.has_interbandfec()) {
      set_interbandfec(from.interbandfec());
    }
    if (from.has_outbandfec()) {
      set_outbandfec(from.outbandfec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_feclost()) {
      set_feclost(from.feclost());
    }
    if (from.has_enabledtx()) {
      set_enabledtx(from.enabledtx());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_needuserlist()) {
      set_needuserlist(from.needuserlist());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_check_room_exist()) {
      set_check_room_exist(from.check_room_exist());
    }
    if (from.has_av_notify()) {
      set_av_notify(from.av_notify());
    }
    if (from.has_user_role()) {
      set_user_role(from.user_role());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_auto_recive()) {
      set_auto_recive(from.auto_recive());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_JoinConference::CopyFrom(const YouMeVoice_Command_JoinConference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_JoinConference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_JoinConference::Swap(YouMeVoice_Command_JoinConference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_JoinConference::InternalSwap(YouMeVoice_Command_JoinConference* other) {
  std::swap(head_, other->head_);
  roomid_.Swap(&other->roomid_);
  std::swap(capturerate_, other->capturerate_);
  std::swap(encodecomplex_, other->encodecomplex_);
  std::swap(enablevbr_, other->enablevbr_);
  std::swap(maxbandlimited_, other->maxbandlimited_);
  std::swap(interbandfec_, other->interbandfec_);
  std::swap(outbandfec_, other->outbandfec_);
  std::swap(feclost_, other->feclost_);
  std::swap(enabledtx_, other->enabledtx_);
  userid_.Swap(&other->userid_);
  std::swap(needuserlist_, other->needuserlist_);
  token_.Swap(&other->token_);
  std::swap(check_room_exist_, other->check_room_exist_);
  std::swap(av_notify_, other->av_notify_);
  std::swap(user_role_, other->user_role_);
  std::swap(source_, other->source_);
  std::swap(auto_recive_, other->auto_recive_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_JoinConference::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_JoinConference";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_JoinConference

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_JoinConference::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_JoinConference::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_JoinConference::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_JoinConference::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinConference::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinConference::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_JoinConference::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.head)
}

// required string roomid = 2;
bool YouMeVoice_Command_JoinConference::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_JoinConference::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_JoinConference::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_JoinConference::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConference::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}
 void YouMeVoice_Command_JoinConference::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}
 void YouMeVoice_Command_JoinConference::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}
 ::std::string* YouMeVoice_Command_JoinConference::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_JoinConference::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConference::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.roomid)
}

// optional int32 capturerate = 3;
bool YouMeVoice_Command_JoinConference::has_capturerate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_capturerate() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_JoinConference::clear_has_capturerate() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_JoinConference::clear_capturerate() {
  capturerate_ = 0;
  clear_has_capturerate();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::capturerate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.capturerate)
  return capturerate_;
}
 void YouMeVoice_Command_JoinConference::set_capturerate(::youmecommon::protobuf::int32 value) {
  set_has_capturerate();
  capturerate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.capturerate)
}

// optional int32 encodecomplex = 4;
bool YouMeVoice_Command_JoinConference::has_encodecomplex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_encodecomplex() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_JoinConference::clear_has_encodecomplex() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_JoinConference::clear_encodecomplex() {
  encodecomplex_ = 0;
  clear_has_encodecomplex();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::encodecomplex() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.encodecomplex)
  return encodecomplex_;
}
 void YouMeVoice_Command_JoinConference::set_encodecomplex(::youmecommon::protobuf::int32 value) {
  set_has_encodecomplex();
  encodecomplex_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.encodecomplex)
}

// optional bool enablevbr = 5;
bool YouMeVoice_Command_JoinConference::has_enablevbr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_enablevbr() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_JoinConference::clear_has_enablevbr() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_JoinConference::clear_enablevbr() {
  enablevbr_ = false;
  clear_has_enablevbr();
}
 bool YouMeVoice_Command_JoinConference::enablevbr() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.enablevbr)
  return enablevbr_;
}
 void YouMeVoice_Command_JoinConference::set_enablevbr(bool value) {
  set_has_enablevbr();
  enablevbr_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.enablevbr)
}

// optional int32 maxbandlimited = 6;
bool YouMeVoice_Command_JoinConference::has_maxbandlimited() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_maxbandlimited() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_JoinConference::clear_has_maxbandlimited() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_JoinConference::clear_maxbandlimited() {
  maxbandlimited_ = 0;
  clear_has_maxbandlimited();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::maxbandlimited() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.maxbandlimited)
  return maxbandlimited_;
}
 void YouMeVoice_Command_JoinConference::set_maxbandlimited(::youmecommon::protobuf::int32 value) {
  set_has_maxbandlimited();
  maxbandlimited_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.maxbandlimited)
}

// optional bool interbandfec = 7;
bool YouMeVoice_Command_JoinConference::has_interbandfec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_interbandfec() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Command_JoinConference::clear_has_interbandfec() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Command_JoinConference::clear_interbandfec() {
  interbandfec_ = false;
  clear_has_interbandfec();
}
 bool YouMeVoice_Command_JoinConference::interbandfec() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.interbandfec)
  return interbandfec_;
}
 void YouMeVoice_Command_JoinConference::set_interbandfec(bool value) {
  set_has_interbandfec();
  interbandfec_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.interbandfec)
}

// optional bool outbandfec = 8;
bool YouMeVoice_Command_JoinConference::has_outbandfec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_outbandfec() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_JoinConference::clear_has_outbandfec() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_JoinConference::clear_outbandfec() {
  outbandfec_ = false;
  clear_has_outbandfec();
}
 bool YouMeVoice_Command_JoinConference::outbandfec() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.outbandfec)
  return outbandfec_;
}
 void YouMeVoice_Command_JoinConference::set_outbandfec(bool value) {
  set_has_outbandfec();
  outbandfec_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.outbandfec)
}

// optional int32 feclost = 9;
bool YouMeVoice_Command_JoinConference::has_feclost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_feclost() {
  _has_bits_[0] |= 0x00000100u;
}
void YouMeVoice_Command_JoinConference::clear_has_feclost() {
  _has_bits_[0] &= ~0x00000100u;
}
void YouMeVoice_Command_JoinConference::clear_feclost() {
  feclost_ = 0;
  clear_has_feclost();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::feclost() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.feclost)
  return feclost_;
}
 void YouMeVoice_Command_JoinConference::set_feclost(::youmecommon::protobuf::int32 value) {
  set_has_feclost();
  feclost_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.feclost)
}

// optional bool enabledtx = 10;
bool YouMeVoice_Command_JoinConference::has_enabledtx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_enabledtx() {
  _has_bits_[0] |= 0x00000200u;
}
void YouMeVoice_Command_JoinConference::clear_has_enabledtx() {
  _has_bits_[0] &= ~0x00000200u;
}
void YouMeVoice_Command_JoinConference::clear_enabledtx() {
  enabledtx_ = false;
  clear_has_enabledtx();
}
 bool YouMeVoice_Command_JoinConference::enabledtx() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.enabledtx)
  return enabledtx_;
}
 void YouMeVoice_Command_JoinConference::set_enabledtx(bool value) {
  set_has_enabledtx();
  enabledtx_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.enabledtx)
}

// optional string userid = 11;
bool YouMeVoice_Command_JoinConference::has_userid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_userid() {
  _has_bits_[0] |= 0x00000400u;
}
void YouMeVoice_Command_JoinConference::clear_has_userid() {
  _has_bits_[0] &= ~0x00000400u;
}
void YouMeVoice_Command_JoinConference::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_JoinConference::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConference::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}
 void YouMeVoice_Command_JoinConference::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}
 void YouMeVoice_Command_JoinConference::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}
 ::std::string* YouMeVoice_Command_JoinConference::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_JoinConference::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConference::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.userid)
}

// optional bool needUserList = 12;
bool YouMeVoice_Command_JoinConference::has_needuserlist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_needuserlist() {
  _has_bits_[0] |= 0x00000800u;
}
void YouMeVoice_Command_JoinConference::clear_has_needuserlist() {
  _has_bits_[0] &= ~0x00000800u;
}
void YouMeVoice_Command_JoinConference::clear_needuserlist() {
  needuserlist_ = false;
  clear_has_needuserlist();
}
 bool YouMeVoice_Command_JoinConference::needuserlist() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.needUserList)
  return needuserlist_;
}
 void YouMeVoice_Command_JoinConference::set_needuserlist(bool value) {
  set_has_needuserlist();
  needuserlist_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.needUserList)
}

// optional string token = 13;
bool YouMeVoice_Command_JoinConference::has_token() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_token() {
  _has_bits_[0] |= 0x00001000u;
}
void YouMeVoice_Command_JoinConference::clear_has_token() {
  _has_bits_[0] &= ~0x00001000u;
}
void YouMeVoice_Command_JoinConference::clear_token() {
  token_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& YouMeVoice_Command_JoinConference::token() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
  return token_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConference::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}
 void YouMeVoice_Command_JoinConference::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}
 void YouMeVoice_Command_JoinConference::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}
 ::std::string* YouMeVoice_Command_JoinConference::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
  return token_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_JoinConference::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConference::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConference.token)
}

// optional bool check_room_exist = 14 [default = false];
bool YouMeVoice_Command_JoinConference::has_check_room_exist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_check_room_exist() {
  _has_bits_[0] |= 0x00002000u;
}
void YouMeVoice_Command_JoinConference::clear_has_check_room_exist() {
  _has_bits_[0] &= ~0x00002000u;
}
void YouMeVoice_Command_JoinConference::clear_check_room_exist() {
  check_room_exist_ = false;
  clear_has_check_room_exist();
}
 bool YouMeVoice_Command_JoinConference::check_room_exist() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.check_room_exist)
  return check_room_exist_;
}
 void YouMeVoice_Command_JoinConference::set_check_room_exist(bool value) {
  set_has_check_room_exist();
  check_room_exist_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.check_room_exist)
}

// optional bool av_notify = 15;
bool YouMeVoice_Command_JoinConference::has_av_notify() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_av_notify() {
  _has_bits_[0] |= 0x00004000u;
}
void YouMeVoice_Command_JoinConference::clear_has_av_notify() {
  _has_bits_[0] &= ~0x00004000u;
}
void YouMeVoice_Command_JoinConference::clear_av_notify() {
  av_notify_ = false;
  clear_has_av_notify();
}
 bool YouMeVoice_Command_JoinConference::av_notify() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.av_notify)
  return av_notify_;
}
 void YouMeVoice_Command_JoinConference::set_av_notify(bool value) {
  set_has_av_notify();
  av_notify_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.av_notify)
}

// optional .YouMeProtocol.YouMeUserRole user_role = 16;
bool YouMeVoice_Command_JoinConference::has_user_role() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_user_role() {
  _has_bits_[0] |= 0x00008000u;
}
void YouMeVoice_Command_JoinConference::clear_has_user_role() {
  _has_bits_[0] &= ~0x00008000u;
}
void YouMeVoice_Command_JoinConference::clear_user_role() {
  user_role_ = 0;
  clear_has_user_role();
}
 ::YouMeProtocol::YouMeUserRole YouMeVoice_Command_JoinConference::user_role() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.user_role)
  return static_cast< ::YouMeProtocol::YouMeUserRole >(user_role_);
}
 void YouMeVoice_Command_JoinConference::set_user_role(::YouMeProtocol::YouMeUserRole value) {
  assert(::YouMeProtocol::YouMeUserRole_IsValid(value));
  set_has_user_role();
  user_role_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.user_role)
}

// optional int32 source = 17;
bool YouMeVoice_Command_JoinConference::has_source() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_source() {
  _has_bits_[0] |= 0x00010000u;
}
void YouMeVoice_Command_JoinConference::clear_has_source() {
  _has_bits_[0] &= ~0x00010000u;
}
void YouMeVoice_Command_JoinConference::clear_source() {
  source_ = 0;
  clear_has_source();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConference::source() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.source)
  return source_;
}
 void YouMeVoice_Command_JoinConference::set_source(::youmecommon::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.source)
}

// optional bool auto_recive = 18 [default = true];
bool YouMeVoice_Command_JoinConference::has_auto_recive() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_auto_recive() {
  _has_bits_[0] |= 0x00020000u;
}
void YouMeVoice_Command_JoinConference::clear_has_auto_recive() {
  _has_bits_[0] &= ~0x00020000u;
}
void YouMeVoice_Command_JoinConference::clear_auto_recive() {
  auto_recive_ = true;
  clear_has_auto_recive();
}
 bool YouMeVoice_Command_JoinConference::auto_recive() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.auto_recive)
  return auto_recive_;
}
 void YouMeVoice_Command_JoinConference::set_auto_recive(bool value) {
  set_has_auto_recive();
  auto_recive_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.auto_recive)
}

// optional uint32 timestamp = 21;
bool YouMeVoice_Command_JoinConference::has_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void YouMeVoice_Command_JoinConference::set_has_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
void YouMeVoice_Command_JoinConference::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void YouMeVoice_Command_JoinConference::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::youmecommon::protobuf::uint32 YouMeVoice_Command_JoinConference::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConference.timestamp)
  return timestamp_;
}
 void YouMeVoice_Command_JoinConference::set_timestamp(::youmecommon::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConference.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StreamProxyInfo::kIpFieldNumber;
const int StreamProxyInfo::kPortFieldNumber;
#endif  // !_MSC_VER

StreamProxyInfo::StreamProxyInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.StreamProxyInfo)
}

void StreamProxyInfo::InitAsDefaultInstance() {
}

StreamProxyInfo::StreamProxyInfo(const StreamProxyInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.StreamProxyInfo)
}

void StreamProxyInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamProxyInfo::~StreamProxyInfo() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.StreamProxyInfo)
  SharedDtor();
}

void StreamProxyInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StreamProxyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StreamProxyInfo& StreamProxyInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

StreamProxyInfo* StreamProxyInfo::default_instance_ = NULL;

StreamProxyInfo* StreamProxyInfo::New(::youmecommon::protobuf::Arena* arena) const {
  StreamProxyInfo* n = new StreamProxyInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamProxyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StreamProxyInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.StreamProxyInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.StreamProxyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.StreamProxyInfo)
  return false;
#undef DO_
}

void StreamProxyInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.StreamProxyInfo)
  // required string ip = 1;
  if (has_ip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.StreamProxyInfo)
}

int StreamProxyInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_ip()) {
    // required string ip = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
int StreamProxyInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->ip());

    // required uint32 port = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamProxyInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const StreamProxyInfo*>(&from));
}

void StreamProxyInfo::MergeFrom(const StreamProxyInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void StreamProxyInfo::CopyFrom(const StreamProxyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamProxyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StreamProxyInfo::Swap(StreamProxyInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamProxyInfo::InternalSwap(StreamProxyInfo* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string StreamProxyInfo::GetTypeName() const {
  return "YouMeProtocol.StreamProxyInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamProxyInfo

// required string ip = 1;
bool StreamProxyInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StreamProxyInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void StreamProxyInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void StreamProxyInfo::clear_ip() {
  ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
 const ::std::string& StreamProxyInfo::ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.StreamProxyInfo.ip)
  return ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamProxyInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.StreamProxyInfo.ip)
}
 void StreamProxyInfo::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.StreamProxyInfo.ip)
}
 void StreamProxyInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.StreamProxyInfo.ip)
}
 ::std::string* StreamProxyInfo::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.StreamProxyInfo.ip)
  return ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StreamProxyInfo::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StreamProxyInfo::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.StreamProxyInfo.ip)
}

// required uint32 port = 2;
bool StreamProxyInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StreamProxyInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void StreamProxyInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void StreamProxyInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::youmecommon::protobuf::uint32 StreamProxyInfo::port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.StreamProxyInfo.port)
  return port_;
}
 void StreamProxyInfo::set_port(::youmecommon::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.StreamProxyInfo.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_JoinConferenceResponse_Speaker::kSessionidFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse_Speaker::kUseridFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_JoinConferenceResponse_Speaker::YouMeVoice_Command_JoinConferenceResponse_Speaker()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::InitAsDefaultInstance() {
}

YouMeVoice_Command_JoinConferenceResponse_Speaker::YouMeVoice_Command_JoinConferenceResponse_Speaker(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_JoinConferenceResponse_Speaker::~YouMeVoice_Command_JoinConferenceResponse_Speaker() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
  SharedDtor();
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_JoinConferenceResponse_Speaker& YouMeVoice_Command_JoinConferenceResponse_Speaker::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_JoinConferenceResponse_Speaker* YouMeVoice_Command_JoinConferenceResponse_Speaker::default_instance_ = NULL;

YouMeVoice_Command_JoinConferenceResponse_Speaker* YouMeVoice_Command_JoinConferenceResponse_Speaker::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_JoinConferenceResponse_Speaker* n = new YouMeVoice_Command_JoinConferenceResponse_Speaker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    sessionid_ = 0;
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_JoinConferenceResponse_Speaker::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sessionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // optional string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
  return false;
#undef DO_
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
  // optional int32 sessionid = 1;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->sessionid(), output);
  }

  // optional string userid = 2;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker)
}

int YouMeVoice_Command_JoinConferenceResponse_Speaker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_JoinConferenceResponse_Speaker*>(&from));
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::MergeFrom(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::CopyFrom(const YouMeVoice_Command_JoinConferenceResponse_Speaker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_JoinConferenceResponse_Speaker::IsInitialized() const {

  return true;
}

void YouMeVoice_Command_JoinConferenceResponse_Speaker::Swap(YouMeVoice_Command_JoinConferenceResponse_Speaker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::InternalSwap(YouMeVoice_Command_JoinConferenceResponse_Speaker* other) {
  std::swap(sessionid_, other->sessionid_);
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_JoinConferenceResponse_Speaker::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int YouMeVoice_Command_JoinConferenceResponse::kHeadFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kUdpportFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kSessionidFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kTimeoutFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kMediaCtlPortFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kStreamProxyFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kSpeakerListFieldNumber;
const int YouMeVoice_Command_JoinConferenceResponse::kBusinessIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_JoinConferenceResponse::YouMeVoice_Command_JoinConferenceResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
}

void YouMeVoice_Command_JoinConferenceResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stream_proxy_ = const_cast< ::YouMeProtocol::StreamProxyInfo*>(
      ::YouMeProtocol::StreamProxyInfo::internal_default_instance());
#else
  stream_proxy_ = const_cast< ::YouMeProtocol::StreamProxyInfo*>(&::YouMeProtocol::StreamProxyInfo::default_instance());
#endif
}

YouMeVoice_Command_JoinConferenceResponse::YouMeVoice_Command_JoinConferenceResponse(const YouMeVoice_Command_JoinConferenceResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
}

void YouMeVoice_Command_JoinConferenceResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  udpport_ = 0;
  sessionid_ = 0;
  timeout_ = 0;
  media_ctl_port_ = 0;
  stream_proxy_ = NULL;
  business_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_JoinConferenceResponse::~YouMeVoice_Command_JoinConferenceResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
  SharedDtor();
}

void YouMeVoice_Command_JoinConferenceResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
    delete stream_proxy_;
  }
}

void YouMeVoice_Command_JoinConferenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_JoinConferenceResponse& YouMeVoice_Command_JoinConferenceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_JoinConferenceResponse* YouMeVoice_Command_JoinConferenceResponse::default_instance_ = NULL;

YouMeVoice_Command_JoinConferenceResponse* YouMeVoice_Command_JoinConferenceResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_JoinConferenceResponse* n = new YouMeVoice_Command_JoinConferenceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_JoinConferenceResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_JoinConferenceResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 191u) {
    ZR_(udpport_, media_ctl_port_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_stream_proxy()) {
      if (stream_proxy_ != NULL) stream_proxy_->::YouMeProtocol::StreamProxyInfo::Clear();
    }
    business_id_ = GOOGLE_ULONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  speaker_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_JoinConferenceResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_udpport;
        break;
      }

      // required int32 udpport = 2;
      case 2: {
        if (tag == 16) {
         parse_udpport:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &udpport_)));
          set_has_udpport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_media_ctl_port;
        break;
      }

      // optional int32 media_ctl_port = 5;
      case 5: {
        if (tag == 40) {
         parse_media_ctl_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_ctl_port_)));
          set_has_media_ctl_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stream_proxy;
        break;
      }

      // optional .YouMeProtocol.StreamProxyInfo stream_proxy = 6;
      case 6: {
        if (tag == 50) {
         parse_stream_proxy:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stream_proxy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_speaker_list;
        break;
      }

      // repeated .YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker speaker_list = 7;
      case 7: {
        if (tag == 58) {
         parse_speaker_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_speaker_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_speaker_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_speaker_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_business_id;
        break;
      }

      // optional uint64 business_id = 10;
      case 10: {
        if (tag == 80) {
         parse_business_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &business_id_)));
          set_has_business_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_JoinConferenceResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 udpport = 2;
  if (has_udpport()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->udpport(), output);
  }

  // required int32 sessionid = 3;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  // optional int32 timeout = 4;
  if (has_timeout()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  // optional int32 media_ctl_port = 5;
  if (has_media_ctl_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->media_ctl_port(), output);
  }

  // optional .YouMeProtocol.StreamProxyInfo stream_proxy = 6;
  if (has_stream_proxy()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->stream_proxy_, output);
  }

  // repeated .YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker speaker_list = 7;
  for (unsigned int i = 0, n = this->speaker_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->speaker_list(i), output);
  }

  // optional uint64 business_id = 10;
  if (has_business_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(10, this->business_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse)
}

int YouMeVoice_Command_JoinConferenceResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_udpport()) {
    // required int32 udpport = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->udpport());
  }

  if (has_sessionid()) {
    // required int32 sessionid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_JoinConferenceResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 udpport = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->udpport());

    // required int32 sessionid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 184u) {
    // optional int32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional int32 media_ctl_port = 5;
    if (has_media_ctl_port()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->media_ctl_port());
    }

    // optional .YouMeProtocol.StreamProxyInfo stream_proxy = 6;
    if (has_stream_proxy()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stream_proxy_);
    }

    // optional uint64 business_id = 10;
    if (has_business_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
          this->business_id());
    }

  }
  // repeated .YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker speaker_list = 7;
  total_size += 1 * this->speaker_list_size();
  for (int i = 0; i < this->speaker_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->speaker_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_JoinConferenceResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_JoinConferenceResponse*>(&from));
}

void YouMeVoice_Command_JoinConferenceResponse::MergeFrom(const YouMeVoice_Command_JoinConferenceResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  speaker_list_.MergeFrom(from.speaker_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_udpport()) {
      set_udpport(from.udpport());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_media_ctl_port()) {
      set_media_ctl_port(from.media_ctl_port());
    }
    if (from.has_stream_proxy()) {
      mutable_stream_proxy()->::YouMeProtocol::StreamProxyInfo::MergeFrom(from.stream_proxy());
    }
    if (from.has_business_id()) {
      set_business_id(from.business_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_JoinConferenceResponse::CopyFrom(const YouMeVoice_Command_JoinConferenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_JoinConferenceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  if (has_stream_proxy()) {
    if (!this->stream_proxy_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_JoinConferenceResponse::Swap(YouMeVoice_Command_JoinConferenceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_JoinConferenceResponse::InternalSwap(YouMeVoice_Command_JoinConferenceResponse* other) {
  std::swap(head_, other->head_);
  std::swap(udpport_, other->udpport_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(timeout_, other->timeout_);
  std::swap(media_ctl_port_, other->media_ctl_port_);
  std::swap(stream_proxy_, other->stream_proxy_);
  speaker_list_.UnsafeArenaSwap(&other->speaker_list_);
  std::swap(business_id_, other->business_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_JoinConferenceResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_JoinConferenceResponse_Speaker

// optional int32 sessionid = 1;
bool YouMeVoice_Command_JoinConferenceResponse_Speaker::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse_Speaker::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.sessionid)
}

// optional string userid = 2;
bool YouMeVoice_Command_JoinConferenceResponse_Speaker::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_JoinConferenceResponse_Speaker::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_JoinConferenceResponse_Speaker::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}
 void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}
 void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}
 ::std::string* YouMeVoice_Command_JoinConferenceResponse_Speaker::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_JoinConferenceResponse_Speaker::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinConferenceResponse_Speaker::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker.userid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_JoinConferenceResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_JoinConferenceResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_JoinConferenceResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinConferenceResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinConferenceResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_JoinConferenceResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.head)
}

// required int32 udpport = 2;
bool YouMeVoice_Command_JoinConferenceResponse::has_udpport() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_udpport() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_udpport() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_udpport() {
  udpport_ = 0;
  clear_has_udpport();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::udpport() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.udpport)
  return udpport_;
}
 void YouMeVoice_Command_JoinConferenceResponse::set_udpport(::youmecommon::protobuf::int32 value) {
  set_has_udpport();
  udpport_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.udpport)
}

// required int32 sessionid = 3;
bool YouMeVoice_Command_JoinConferenceResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_JoinConferenceResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.sessionid)
}

// optional int32 timeout = 4;
bool YouMeVoice_Command_JoinConferenceResponse::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.timeout)
  return timeout_;
}
 void YouMeVoice_Command_JoinConferenceResponse::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.timeout)
}

// optional int32 media_ctl_port = 5;
bool YouMeVoice_Command_JoinConferenceResponse::has_media_ctl_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_media_ctl_port() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_media_ctl_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_media_ctl_port() {
  media_ctl_port_ = 0;
  clear_has_media_ctl_port();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinConferenceResponse::media_ctl_port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.media_ctl_port)
  return media_ctl_port_;
}
 void YouMeVoice_Command_JoinConferenceResponse::set_media_ctl_port(::youmecommon::protobuf::int32 value) {
  set_has_media_ctl_port();
  media_ctl_port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.media_ctl_port)
}

// optional .YouMeProtocol.StreamProxyInfo stream_proxy = 6;
bool YouMeVoice_Command_JoinConferenceResponse::has_stream_proxy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_stream_proxy() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_stream_proxy() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_stream_proxy() {
  if (stream_proxy_ != NULL) stream_proxy_->::YouMeProtocol::StreamProxyInfo::Clear();
  clear_has_stream_proxy();
}
const ::YouMeProtocol::StreamProxyInfo& YouMeVoice_Command_JoinConferenceResponse::stream_proxy() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.stream_proxy)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return stream_proxy_ != NULL ? *stream_proxy_ : *default_instance().stream_proxy_;
#else
  return stream_proxy_ != NULL ? *stream_proxy_ : *default_instance_->stream_proxy_;
#endif
}
::YouMeProtocol::StreamProxyInfo* YouMeVoice_Command_JoinConferenceResponse::mutable_stream_proxy() {
  set_has_stream_proxy();
  if (stream_proxy_ == NULL) {
    stream_proxy_ = new ::YouMeProtocol::StreamProxyInfo;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.stream_proxy)
  return stream_proxy_;
}
::YouMeProtocol::StreamProxyInfo* YouMeVoice_Command_JoinConferenceResponse::release_stream_proxy() {
  clear_has_stream_proxy();
  ::YouMeProtocol::StreamProxyInfo* temp = stream_proxy_;
  stream_proxy_ = NULL;
  return temp;
}
void YouMeVoice_Command_JoinConferenceResponse::set_allocated_stream_proxy(::YouMeProtocol::StreamProxyInfo* stream_proxy) {
  delete stream_proxy_;
  stream_proxy_ = stream_proxy;
  if (stream_proxy) {
    set_has_stream_proxy();
  } else {
    clear_has_stream_proxy();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.stream_proxy)
}

// repeated .YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.Speaker speaker_list = 7;
int YouMeVoice_Command_JoinConferenceResponse::speaker_list_size() const {
  return speaker_list_.size();
}
void YouMeVoice_Command_JoinConferenceResponse::clear_speaker_list() {
  speaker_list_.Clear();
}
const ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker& YouMeVoice_Command_JoinConferenceResponse::speaker_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_.Get(index);
}
::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker* YouMeVoice_Command_JoinConferenceResponse::mutable_speaker_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_.Mutable(index);
}
::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker* YouMeVoice_Command_JoinConferenceResponse::add_speaker_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker >*
YouMeVoice_Command_JoinConferenceResponse::mutable_speaker_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return &speaker_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_JoinConferenceResponse_Speaker >&
YouMeVoice_Command_JoinConferenceResponse::speaker_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.speaker_list)
  return speaker_list_;
}

// optional uint64 business_id = 10;
bool YouMeVoice_Command_JoinConferenceResponse::has_business_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_JoinConferenceResponse::set_has_business_id() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_has_business_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_JoinConferenceResponse::clear_business_id() {
  business_id_ = GOOGLE_ULONGLONG(0);
  clear_has_business_id();
}
 ::youmecommon::protobuf::uint64 YouMeVoice_Command_JoinConferenceResponse::business_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.business_id)
  return business_id_;
}
 void YouMeVoice_Command_JoinConferenceResponse::set_business_id(::youmecommon::protobuf::uint64 value) {
  set_has_business_id();
  business_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinConferenceResponse.business_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_LeaveConference::kHeadFieldNumber;
const int YouMeVoice_Command_LeaveConference::kRoomidFieldNumber;
const int YouMeVoice_Command_LeaveConference::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_LeaveConference::YouMeVoice_Command_LeaveConference()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_LeaveConference)
}

void YouMeVoice_Command_LeaveConference::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_LeaveConference::YouMeVoice_Command_LeaveConference(const YouMeVoice_Command_LeaveConference& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_LeaveConference)
}

void YouMeVoice_Command_LeaveConference::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_LeaveConference::~YouMeVoice_Command_LeaveConference() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_LeaveConference)
  SharedDtor();
}

void YouMeVoice_Command_LeaveConference::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_LeaveConference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_LeaveConference& YouMeVoice_Command_LeaveConference::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_LeaveConference* YouMeVoice_Command_LeaveConference::default_instance_ = NULL;

YouMeVoice_Command_LeaveConference* YouMeVoice_Command_LeaveConference::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_LeaveConference* n = new YouMeVoice_Command_LeaveConference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_LeaveConference::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_LeaveConference::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_LeaveConference)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roomid;
        break;
      }

      // required string roomid = 2;
      case 2: {
        if (tag == 18) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_LeaveConference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_LeaveConference)
  return false;
#undef DO_
}

void YouMeVoice_Command_LeaveConference::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_LeaveConference)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string roomid = 2;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomid(), output);
  }

  // required int32 sessionid = 3;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_LeaveConference)
}

int YouMeVoice_Command_LeaveConference::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_roomid()) {
    // required string roomid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  if (has_sessionid()) {
    // required int32 sessionid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_LeaveConference::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string roomid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->roomid());

    // required int32 sessionid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_LeaveConference::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_LeaveConference*>(&from));
}

void YouMeVoice_Command_LeaveConference::MergeFrom(const YouMeVoice_Command_LeaveConference& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_LeaveConference::CopyFrom(const YouMeVoice_Command_LeaveConference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_LeaveConference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_LeaveConference::Swap(YouMeVoice_Command_LeaveConference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_LeaveConference::InternalSwap(YouMeVoice_Command_LeaveConference* other) {
  std::swap(head_, other->head_);
  roomid_.Swap(&other->roomid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_LeaveConference::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_LeaveConference";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_LeaveConference

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_LeaveConference::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_LeaveConference::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_LeaveConference::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_LeaveConference::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_LeaveConference::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConference.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveConference::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveConference.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveConference::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_LeaveConference::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveConference.head)
}

// required string roomid = 2;
bool YouMeVoice_Command_LeaveConference::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_LeaveConference::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_LeaveConference::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_LeaveConference::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_LeaveConference::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_LeaveConference::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}
 void YouMeVoice_Command_LeaveConference::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}
 void YouMeVoice_Command_LeaveConference::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}
 ::std::string* YouMeVoice_Command_LeaveConference::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_LeaveConference::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_LeaveConference::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveConference.roomid)
}

// required int32 sessionid = 3;
bool YouMeVoice_Command_LeaveConference::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_LeaveConference::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_LeaveConference::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_LeaveConference::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_LeaveConference::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConference.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_LeaveConference::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveConference.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_ChannelUserList_Request::kHeadFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Request::kSessionidFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Request::kChannelIdFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Request::kStartIndexFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Request::kReqCountFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Request::kNotifyFlagFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_ChannelUserList_Request::YouMeVoice_Command_ChannelUserList_Request()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
}

void YouMeVoice_Command_ChannelUserList_Request::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_ChannelUserList_Request::YouMeVoice_Command_ChannelUserList_Request(const YouMeVoice_Command_ChannelUserList_Request& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
}

void YouMeVoice_Command_ChannelUserList_Request::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  start_index_ = 0;
  req_count_ = 0;
  notify_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_ChannelUserList_Request::~YouMeVoice_Command_ChannelUserList_Request() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
  SharedDtor();
}

void YouMeVoice_Command_ChannelUserList_Request::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_ChannelUserList_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_ChannelUserList_Request& YouMeVoice_Command_ChannelUserList_Request::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_ChannelUserList_Request* YouMeVoice_Command_ChannelUserList_Request::default_instance_ = NULL;

YouMeVoice_Command_ChannelUserList_Request* YouMeVoice_Command_ChannelUserList_Request::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_ChannelUserList_Request* n = new YouMeVoice_Command_ChannelUserList_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_ChannelUserList_Request::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_ChannelUserList_Request*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(sessionid_, notify_flag_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_channel_id()) {
      channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_ChannelUserList_Request::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 3;
      case 3: {
        if (tag == 26) {
         parse_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 4;
      case 4: {
        if (tag == 32) {
         parse_start_index:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_req_count;
        break;
      }

      // optional int32 req_count = 5;
      case 5: {
        if (tag == 40) {
         parse_req_count:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_count_)));
          set_has_req_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_notify_flag;
        break;
      }

      // optional int32 notify_flag = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_notify_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_flag_)));
          set_has_notify_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
  return false;
#undef DO_
}

void YouMeVoice_Command_ChannelUserList_Request::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channel_id = 3;
  if (has_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel_id(), output);
  }

  // optional int32 start_index = 4;
  if (has_start_index()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_index(), output);
  }

  // optional int32 req_count = 5;
  if (has_req_count()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->req_count(), output);
  }

  // optional int32 notify_flag = 6 [default = 0];
  if (has_notify_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->notify_flag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request)
}

int YouMeVoice_Command_ChannelUserList_Request::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channel_id()) {
    // required string channel_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  return total_size;
}
int YouMeVoice_Command_ChannelUserList_Request::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channel_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 56u) {
    // optional int32 start_index = 4;
    if (has_start_index()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 req_count = 5;
    if (has_req_count()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->req_count());
    }

    // optional int32 notify_flag = 6 [default = 0];
    if (has_notify_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_flag());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_ChannelUserList_Request::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_ChannelUserList_Request*>(&from));
}

void YouMeVoice_Command_ChannelUserList_Request::MergeFrom(const YouMeVoice_Command_ChannelUserList_Request& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channel_id()) {
      set_has_channel_id();
      channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_req_count()) {
      set_req_count(from.req_count());
    }
    if (from.has_notify_flag()) {
      set_notify_flag(from.notify_flag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_ChannelUserList_Request::CopyFrom(const YouMeVoice_Command_ChannelUserList_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_ChannelUserList_Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_ChannelUserList_Request::Swap(YouMeVoice_Command_ChannelUserList_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_ChannelUserList_Request::InternalSwap(YouMeVoice_Command_ChannelUserList_Request* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channel_id_.Swap(&other->channel_id_);
  std::swap(start_index_, other->start_index_);
  std::swap(req_count_, other->req_count_);
  std::swap(notify_flag_, other->notify_flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_ChannelUserList_Request::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_ChannelUserList_Request

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_ChannelUserList_Request::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Request::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_ChannelUserList_Request::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_ChannelUserList_Request::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_ChannelUserList_Request::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_ChannelUserList_Request::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_ChannelUserList_Request::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Request::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_ChannelUserList_Request::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.sessionid)
}

// required string channel_id = 3;
bool YouMeVoice_Command_ChannelUserList_Request::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Request::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
 const ::std::string& YouMeVoice_Command_ChannelUserList_Request::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ChannelUserList_Request::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}
 void YouMeVoice_Command_ChannelUserList_Request::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}
 void YouMeVoice_Command_ChannelUserList_Request::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}
 ::std::string* YouMeVoice_Command_ChannelUserList_Request::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_ChannelUserList_Request::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ChannelUserList_Request::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.channel_id)
}

// optional int32 start_index = 4;
bool YouMeVoice_Command_ChannelUserList_Request::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Request::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::start_index() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.start_index)
  return start_index_;
}
 void YouMeVoice_Command_ChannelUserList_Request::set_start_index(::youmecommon::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.start_index)
}

// optional int32 req_count = 5;
bool YouMeVoice_Command_ChannelUserList_Request::has_req_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Request::set_has_req_count() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_has_req_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_req_count() {
  req_count_ = 0;
  clear_has_req_count();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::req_count() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.req_count)
  return req_count_;
}
 void YouMeVoice_Command_ChannelUserList_Request::set_req_count(::youmecommon::protobuf::int32 value) {
  set_has_req_count();
  req_count_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.req_count)
}

// optional int32 notify_flag = 6 [default = 0];
bool YouMeVoice_Command_ChannelUserList_Request::has_notify_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Request::set_has_notify_flag() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_has_notify_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_ChannelUserList_Request::clear_notify_flag() {
  notify_flag_ = 0;
  clear_has_notify_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Request::notify_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.notify_flag)
  return notify_flag_;
}
 void YouMeVoice_Command_ChannelUserList_Request::set_notify_flag(::youmecommon::protobuf::int32 value) {
  set_has_notify_flag();
  notify_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Request.notify_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_UserInfo::kUseridFieldNumber;
const int YouMeVoice_UserInfo::kSessionidFieldNumber;
const int YouMeVoice_UserInfo::kUserOuterIpFieldNumber;
const int YouMeVoice_UserInfo::kUserInnerIpFieldNumber;
const int YouMeVoice_UserInfo::kUserInnerPortFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_UserInfo::YouMeVoice_UserInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_UserInfo)
}

void YouMeVoice_UserInfo::InitAsDefaultInstance() {
}

YouMeVoice_UserInfo::YouMeVoice_UserInfo(const YouMeVoice_UserInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_UserInfo)
}

void YouMeVoice_UserInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  user_outer_ip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_inner_ip_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_inner_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_UserInfo::~YouMeVoice_UserInfo() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_UserInfo)
  SharedDtor();
}

void YouMeVoice_UserInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_outer_ip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_inner_ip_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_UserInfo& YouMeVoice_UserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_UserInfo* YouMeVoice_UserInfo::default_instance_ = NULL;

YouMeVoice_UserInfo* YouMeVoice_UserInfo::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_UserInfo* n = new YouMeVoice_UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_UserInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_UserInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, user_inner_port_);
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_outer_ip()) {
      user_outer_ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_inner_ip()) {
      user_inner_ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_UserInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_UserInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_outer_ip;
        break;
      }

      // optional string user_outer_ip = 3;
      case 3: {
        if (tag == 26) {
         parse_user_outer_ip:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_outer_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_inner_ip;
        break;
      }

      // optional string user_inner_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_user_inner_ip:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_inner_ip()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_user_inner_port;
        break;
      }

      // optional uint32 user_inner_port = 5;
      case 5: {
        if (tag == 40) {
         parse_user_inner_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_inner_port_)));
          set_has_user_inner_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_UserInfo)
  return false;
#undef DO_
}

void YouMeVoice_UserInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_UserInfo)
  // required string userid = 1;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string user_outer_ip = 3;
  if (has_user_outer_ip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_outer_ip(), output);
  }

  // optional string user_inner_ip = 4;
  if (has_user_inner_ip()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_inner_ip(), output);
  }

  // optional uint32 user_inner_port = 5;
  if (has_user_inner_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(5, this->user_inner_port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_UserInfo)
}

int YouMeVoice_UserInfo::ByteSize() const {
  int total_size = 0;

  // required string userid = 1;
  if (has_userid()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string user_outer_ip = 3;
    if (has_user_outer_ip()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_outer_ip());
    }

    // optional string user_inner_ip = 4;
    if (has_user_inner_ip()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_inner_ip());
    }

    // optional uint32 user_inner_port = 5;
    if (has_user_inner_port()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_inner_port());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_UserInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_UserInfo*>(&from));
}

void YouMeVoice_UserInfo::MergeFrom(const YouMeVoice_UserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_user_outer_ip()) {
      set_has_user_outer_ip();
      user_outer_ip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_outer_ip_);
    }
    if (from.has_user_inner_ip()) {
      set_has_user_inner_ip();
      user_inner_ip_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_inner_ip_);
    }
    if (from.has_user_inner_port()) {
      set_user_inner_port(from.user_inner_port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_UserInfo::CopyFrom(const YouMeVoice_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void YouMeVoice_UserInfo::Swap(YouMeVoice_UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_UserInfo::InternalSwap(YouMeVoice_UserInfo* other) {
  userid_.Swap(&other->userid_);
  std::swap(sessionid_, other->sessionid_);
  user_outer_ip_.Swap(&other->user_outer_ip_);
  user_inner_ip_.Swap(&other->user_inner_ip_);
  std::swap(user_inner_port_, other->user_inner_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_UserInfo::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_UserInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_UserInfo

// required string userid = 1;
bool YouMeVoice_UserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_UserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_UserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_UserInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserInfo::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.userid)
}
 void YouMeVoice_UserInfo::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserInfo.userid)
}
 void YouMeVoice_UserInfo::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserInfo.userid)
}
 ::std::string* YouMeVoice_UserInfo::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserInfo.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_UserInfo::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserInfo.userid)
}

// optional int32 sessionid = 2;
bool YouMeVoice_UserInfo::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_UserInfo::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_UserInfo::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_UserInfo::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_UserInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.sessionid)
  return sessionid_;
}
 void YouMeVoice_UserInfo::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.sessionid)
}

// optional string user_outer_ip = 3;
bool YouMeVoice_UserInfo::has_user_outer_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_UserInfo::set_has_user_outer_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_UserInfo::clear_has_user_outer_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_UserInfo::clear_user_outer_ip() {
  user_outer_ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_outer_ip();
}
 const ::std::string& YouMeVoice_UserInfo::user_outer_ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
  return user_outer_ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserInfo::set_user_outer_ip(const ::std::string& value) {
  set_has_user_outer_ip();
  user_outer_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}
 void YouMeVoice_UserInfo::set_user_outer_ip(const char* value) {
  set_has_user_outer_ip();
  user_outer_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}
 void YouMeVoice_UserInfo::set_user_outer_ip(const char* value, size_t size) {
  set_has_user_outer_ip();
  user_outer_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}
 ::std::string* YouMeVoice_UserInfo::mutable_user_outer_ip() {
  set_has_user_outer_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
  return user_outer_ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_UserInfo::release_user_outer_ip() {
  clear_has_user_outer_ip();
  return user_outer_ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserInfo::set_allocated_user_outer_ip(::std::string* user_outer_ip) {
  if (user_outer_ip != NULL) {
    set_has_user_outer_ip();
  } else {
    clear_has_user_outer_ip();
  }
  user_outer_ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_outer_ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserInfo.user_outer_ip)
}

// optional string user_inner_ip = 4;
bool YouMeVoice_UserInfo::has_user_inner_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_UserInfo::set_has_user_inner_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_UserInfo::clear_has_user_inner_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_UserInfo::clear_user_inner_ip() {
  user_inner_ip_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_inner_ip();
}
 const ::std::string& YouMeVoice_UserInfo::user_inner_ip() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
  return user_inner_ip_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserInfo::set_user_inner_ip(const ::std::string& value) {
  set_has_user_inner_ip();
  user_inner_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}
 void YouMeVoice_UserInfo::set_user_inner_ip(const char* value) {
  set_has_user_inner_ip();
  user_inner_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}
 void YouMeVoice_UserInfo::set_user_inner_ip(const char* value, size_t size) {
  set_has_user_inner_ip();
  user_inner_ip_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}
 ::std::string* YouMeVoice_UserInfo::mutable_user_inner_ip() {
  set_has_user_inner_ip();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
  return user_inner_ip_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_UserInfo::release_user_inner_ip() {
  clear_has_user_inner_ip();
  return user_inner_ip_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserInfo::set_allocated_user_inner_ip(::std::string* user_inner_ip) {
  if (user_inner_ip != NULL) {
    set_has_user_inner_ip();
  } else {
    clear_has_user_inner_ip();
  }
  user_inner_ip_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_inner_ip);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserInfo.user_inner_ip)
}

// optional uint32 user_inner_port = 5;
bool YouMeVoice_UserInfo::has_user_inner_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_UserInfo::set_has_user_inner_port() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_UserInfo::clear_has_user_inner_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_UserInfo::clear_user_inner_port() {
  user_inner_port_ = 0u;
  clear_has_user_inner_port();
}
 ::youmecommon::protobuf::uint32 YouMeVoice_UserInfo::user_inner_port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserInfo.user_inner_port)
  return user_inner_port_;
}
 void YouMeVoice_UserInfo::set_user_inner_port(::youmecommon::protobuf::uint32 value) {
  set_has_user_inner_port();
  user_inner_port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserInfo.user_inner_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_ChannelUserList_Response::kHeadFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Response::kUseridFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Response::kReqChannelIdFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Response::kStartIndexFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Response::kLeftCountFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Response::kNextIndexFieldNumber;
const int YouMeVoice_Command_ChannelUserList_Response::kUserinfoFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_ChannelUserList_Response::YouMeVoice_Command_ChannelUserList_Response()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
}

void YouMeVoice_Command_ChannelUserList_Response::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_ChannelUserList_Response::YouMeVoice_Command_ChannelUserList_Response(const YouMeVoice_Command_ChannelUserList_Response& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
}

void YouMeVoice_Command_ChannelUserList_Response::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  req_channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  start_index_ = 0;
  left_count_ = 0;
  next_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_ChannelUserList_Response::~YouMeVoice_Command_ChannelUserList_Response() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
  SharedDtor();
}

void YouMeVoice_Command_ChannelUserList_Response::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  req_channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_ChannelUserList_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_ChannelUserList_Response& YouMeVoice_Command_ChannelUserList_Response::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_ChannelUserList_Response* YouMeVoice_Command_ChannelUserList_Response::default_instance_ = NULL;

YouMeVoice_Command_ChannelUserList_Response* YouMeVoice_Command_ChannelUserList_Response::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_ChannelUserList_Response* n = new YouMeVoice_Command_ChannelUserList_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_ChannelUserList_Response::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_ChannelUserList_Response*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 61u) {
    ZR_(start_index_, left_count_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_req_channel_id()) {
      req_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    next_index_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  userid_.Clear();
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_ChannelUserList_Response::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // repeated string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        if (input->ExpectTag(26)) goto parse_req_channel_id;
        break;
      }

      // optional string req_channel_id = 3;
      case 3: {
        if (tag == 26) {
         parse_req_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 4;
      case 4: {
        if (tag == 32) {
         parse_start_index:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_left_count;
        break;
      }

      // optional int32 left_count = 5;
      case 5: {
        if (tag == 40) {
         parse_left_count:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_count_)));
          set_has_left_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_next_index;
        break;
      }

      // optional int32 next_index = 6;
      case 6: {
        if (tag == 48) {
         parse_next_index:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_index_)));
          set_has_next_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_userinfo;
        break;
      }

      // repeated .YouMeProtocol.YouMeVoice_UserInfo userinfo = 7;
      case 7: {
        if (tag == 58) {
         parse_userinfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_userinfo:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_userinfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
  return false;
#undef DO_
}

void YouMeVoice_Command_ChannelUserList_Response::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // repeated string userid = 2;
  for (int i = 0; i < this->userid_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(i), output);
  }

  // optional string req_channel_id = 3;
  if (has_req_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->req_channel_id(), output);
  }

  // optional int32 start_index = 4;
  if (has_start_index()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_index(), output);
  }

  // optional int32 left_count = 5;
  if (has_left_count()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_count(), output);
  }

  // optional int32 next_index = 6;
  if (has_next_index()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->next_index(), output);
  }

  // repeated .YouMeProtocol.YouMeVoice_UserInfo userinfo = 7;
  for (unsigned int i = 0, n = this->userinfo_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->userinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response)
}

int YouMeVoice_Command_ChannelUserList_Response::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional string req_channel_id = 3;
    if (has_req_channel_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->req_channel_id());
    }

    // optional int32 start_index = 4;
    if (has_start_index()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 left_count = 5;
    if (has_left_count()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->left_count());
    }

    // optional int32 next_index = 6;
    if (has_next_index()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->next_index());
    }

  }
  // repeated string userid = 2;
  total_size += 1 * this->userid_size();
  for (int i = 0; i < this->userid_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
      this->userid(i));
  }

  // repeated .YouMeProtocol.YouMeVoice_UserInfo userinfo = 7;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_ChannelUserList_Response::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_ChannelUserList_Response*>(&from));
}

void YouMeVoice_Command_ChannelUserList_Response::MergeFrom(const YouMeVoice_Command_ChannelUserList_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  userid_.MergeFrom(from.userid_);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_req_channel_id()) {
      set_has_req_channel_id();
      req_channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_channel_id_);
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_left_count()) {
      set_left_count(from.left_count());
    }
    if (from.has_next_index()) {
      set_next_index(from.next_index());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_ChannelUserList_Response::CopyFrom(const YouMeVoice_Command_ChannelUserList_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_ChannelUserList_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->userinfo())) return false;
  return true;
}

void YouMeVoice_Command_ChannelUserList_Response::Swap(YouMeVoice_Command_ChannelUserList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_ChannelUserList_Response::InternalSwap(YouMeVoice_Command_ChannelUserList_Response* other) {
  std::swap(head_, other->head_);
  userid_.UnsafeArenaSwap(&other->userid_);
  req_channel_id_.Swap(&other->req_channel_id_);
  std::swap(start_index_, other->start_index_);
  std::swap(left_count_, other->left_count_);
  std::swap(next_index_, other->next_index_);
  userinfo_.UnsafeArenaSwap(&other->userinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_ChannelUserList_Response::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_ChannelUserList_Response

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_ChannelUserList_Response::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Response::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_ChannelUserList_Response::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserList_Response::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserList_Response::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_ChannelUserList_Response::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.head)
}

// repeated string userid = 2;
int YouMeVoice_Command_ChannelUserList_Response::userid_size() const {
  return userid_.size();
}
void YouMeVoice_Command_ChannelUserList_Response::clear_userid() {
  userid_.Clear();
}
 const ::std::string& YouMeVoice_Command_ChannelUserList_Response::userid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return userid_.Get(index);
}
 ::std::string* YouMeVoice_Command_ChannelUserList_Response::mutable_userid(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return userid_.Mutable(index);
}
 void YouMeVoice_Command_ChannelUserList_Response::set_userid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  userid_.Mutable(index)->assign(value);
}
 void YouMeVoice_Command_ChannelUserList_Response::set_userid(int index, const char* value) {
  userid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
 void YouMeVoice_Command_ChannelUserList_Response::set_userid(int index, const char* value, size_t size) {
  userid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
 ::std::string* YouMeVoice_Command_ChannelUserList_Response::add_userid() {
  return userid_.Add();
}
 void YouMeVoice_Command_ChannelUserList_Response::add_userid(const ::std::string& value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
 void YouMeVoice_Command_ChannelUserList_Response::add_userid(const char* value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
 void YouMeVoice_Command_ChannelUserList_Response::add_userid(const char* value, size_t size) {
  userid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeVoice_Command_ChannelUserList_Response::userid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return userid_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeVoice_Command_ChannelUserList_Response::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userid)
  return &userid_;
}

// optional string req_channel_id = 3;
bool YouMeVoice_Command_ChannelUserList_Response::has_req_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Response::set_has_req_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_has_req_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_req_channel_id() {
  req_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_req_channel_id();
}
 const ::std::string& YouMeVoice_Command_ChannelUserList_Response::req_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
  return req_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ChannelUserList_Response::set_req_channel_id(const ::std::string& value) {
  set_has_req_channel_id();
  req_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}
 void YouMeVoice_Command_ChannelUserList_Response::set_req_channel_id(const char* value) {
  set_has_req_channel_id();
  req_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}
 void YouMeVoice_Command_ChannelUserList_Response::set_req_channel_id(const char* value, size_t size) {
  set_has_req_channel_id();
  req_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}
 ::std::string* YouMeVoice_Command_ChannelUserList_Response::mutable_req_channel_id() {
  set_has_req_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
  return req_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_ChannelUserList_Response::release_req_channel_id() {
  clear_has_req_channel_id();
  return req_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ChannelUserList_Response::set_allocated_req_channel_id(::std::string* req_channel_id) {
  if (req_channel_id != NULL) {
    set_has_req_channel_id();
  } else {
    clear_has_req_channel_id();
  }
  req_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), req_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.req_channel_id)
}

// optional int32 start_index = 4;
bool YouMeVoice_Command_ChannelUserList_Response::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Response::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Response::start_index() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.start_index)
  return start_index_;
}
 void YouMeVoice_Command_ChannelUserList_Response::set_start_index(::youmecommon::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.start_index)
}

// optional int32 left_count = 5;
bool YouMeVoice_Command_ChannelUserList_Response::has_left_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Response::set_has_left_count() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_has_left_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_left_count() {
  left_count_ = 0;
  clear_has_left_count();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Response::left_count() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.left_count)
  return left_count_;
}
 void YouMeVoice_Command_ChannelUserList_Response::set_left_count(::youmecommon::protobuf::int32 value) {
  set_has_left_count();
  left_count_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.left_count)
}

// optional int32 next_index = 6;
bool YouMeVoice_Command_ChannelUserList_Response::has_next_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_ChannelUserList_Response::set_has_next_index() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_has_next_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_ChannelUserList_Response::clear_next_index() {
  next_index_ = 0;
  clear_has_next_index();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ChannelUserList_Response::next_index() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.next_index)
  return next_index_;
}
 void YouMeVoice_Command_ChannelUserList_Response::set_next_index(::youmecommon::protobuf::int32 value) {
  set_has_next_index();
  next_index_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.next_index)
}

// repeated .YouMeProtocol.YouMeVoice_UserInfo userinfo = 7;
int YouMeVoice_Command_ChannelUserList_Response::userinfo_size() const {
  return userinfo_.size();
}
void YouMeVoice_Command_ChannelUserList_Response::clear_userinfo() {
  userinfo_.Clear();
}
const ::YouMeProtocol::YouMeVoice_UserInfo& YouMeVoice_Command_ChannelUserList_Response::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_.Get(index);
}
::YouMeProtocol::YouMeVoice_UserInfo* YouMeVoice_Command_ChannelUserList_Response::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_.Mutable(index);
}
::YouMeProtocol::YouMeVoice_UserInfo* YouMeVoice_Command_ChannelUserList_Response::add_userinfo() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo >*
YouMeVoice_Command_ChannelUserList_Response::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return &userinfo_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserInfo >&
YouMeVoice_Command_ChannelUserList_Response::userinfo() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_ChannelUserList_Response.userinfo)
  return userinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int JoinLeaveUser::kUseridFieldNumber;
const int JoinLeaveUser::kFlagFieldNumber;
const int JoinLeaveUser::kSessionidFieldNumber;
#endif  // !_MSC_VER

JoinLeaveUser::JoinLeaveUser()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.JoinLeaveUser)
}

void JoinLeaveUser::InitAsDefaultInstance() {
}

JoinLeaveUser::JoinLeaveUser(const JoinLeaveUser& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.JoinLeaveUser)
}

void JoinLeaveUser::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  flag_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinLeaveUser::~JoinLeaveUser() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.JoinLeaveUser)
  SharedDtor();
}

void JoinLeaveUser::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JoinLeaveUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JoinLeaveUser& JoinLeaveUser::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

JoinLeaveUser* JoinLeaveUser::default_instance_ = NULL;

JoinLeaveUser* JoinLeaveUser::New(::youmecommon::protobuf::Arena* arena) const {
  JoinLeaveUser* n = new JoinLeaveUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoinLeaveUser::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<JoinLeaveUser*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(flag_, sessionid_);
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool JoinLeaveUser::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.JoinLeaveUser)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.JoinLeaveUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.JoinLeaveUser)
  return false;
#undef DO_
}

void JoinLeaveUser::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.JoinLeaveUser)
  // optional string userid = 1;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional int32 sessionid = 3;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.JoinLeaveUser)
}

int JoinLeaveUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional string userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinLeaveUser::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const JoinLeaveUser*>(&from));
}

void JoinLeaveUser::MergeFrom(const JoinLeaveUser& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void JoinLeaveUser::CopyFrom(const JoinLeaveUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinLeaveUser::IsInitialized() const {

  return true;
}

void JoinLeaveUser::Swap(JoinLeaveUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoinLeaveUser::InternalSwap(JoinLeaveUser* other) {
  userid_.Swap(&other->userid_);
  std::swap(flag_, other->flag_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string JoinLeaveUser::GetTypeName() const {
  return "YouMeProtocol.JoinLeaveUser";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoinLeaveUser

// optional string userid = 1;
bool JoinLeaveUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void JoinLeaveUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void JoinLeaveUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void JoinLeaveUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& JoinLeaveUser::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.JoinLeaveUser.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinLeaveUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.JoinLeaveUser.userid)
}
 void JoinLeaveUser::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.JoinLeaveUser.userid)
}
 void JoinLeaveUser::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.JoinLeaveUser.userid)
}
 ::std::string* JoinLeaveUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.JoinLeaveUser.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* JoinLeaveUser::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void JoinLeaveUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.JoinLeaveUser.userid)
}

// optional int32 flag = 2;
bool JoinLeaveUser::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void JoinLeaveUser::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
void JoinLeaveUser::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
void JoinLeaveUser::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
 ::youmecommon::protobuf::int32 JoinLeaveUser::flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.JoinLeaveUser.flag)
  return flag_;
}
 void JoinLeaveUser::set_flag(::youmecommon::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.JoinLeaveUser.flag)
}

// optional int32 sessionid = 3;
bool JoinLeaveUser::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void JoinLeaveUser::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void JoinLeaveUser::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void JoinLeaveUser::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 JoinLeaveUser::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.JoinLeaveUser.sessionid)
  return sessionid_;
}
 void JoinLeaveUser::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.JoinLeaveUser.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_ChannelUserJoinLeaveNotify::kHeadFieldNumber;
const int YouMeVoice_Command_ChannelUserJoinLeaveNotify::kChannelIdFieldNumber;
const int YouMeVoice_Command_ChannelUserJoinLeaveNotify::kUserListFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_ChannelUserJoinLeaveNotify::YouMeVoice_Command_ChannelUserJoinLeaveNotify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_ChannelUserJoinLeaveNotify::YouMeVoice_Command_ChannelUserJoinLeaveNotify(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_ChannelUserJoinLeaveNotify::~YouMeVoice_Command_ChannelUserJoinLeaveNotify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
  SharedDtor();
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_ChannelUserJoinLeaveNotify& YouMeVoice_Command_ChannelUserJoinLeaveNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_ChannelUserJoinLeaveNotify* YouMeVoice_Command_ChannelUserJoinLeaveNotify::default_instance_ = NULL;

YouMeVoice_Command_ChannelUserJoinLeaveNotify* YouMeVoice_Command_ChannelUserJoinLeaveNotify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_ChannelUserJoinLeaveNotify* n = new YouMeVoice_Command_ChannelUserJoinLeaveNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channel_id()) {
      channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_ChannelUserJoinLeaveNotify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_list;
        break;
      }

      // repeated .YouMeProtocol.JoinLeaveUser user_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_user_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
  return false;
#undef DO_
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string channel_id = 2;
  if (has_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_id(), output);
  }

  // repeated .YouMeProtocol.JoinLeaveUser user_list = 3;
  for (unsigned int i = 0, n = this->user_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify)
}

int YouMeVoice_Command_ChannelUserJoinLeaveNotify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_channel_id()) {
    // required string channel_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  return total_size;
}
int YouMeVoice_Command_ChannelUserJoinLeaveNotify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string channel_id = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YouMeProtocol.JoinLeaveUser user_list = 3;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_ChannelUserJoinLeaveNotify*>(&from));
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::MergeFrom(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_channel_id()) {
      set_has_channel_id();
      channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::CopyFrom(const YouMeVoice_Command_ChannelUserJoinLeaveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_ChannelUserJoinLeaveNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_ChannelUserJoinLeaveNotify::Swap(YouMeVoice_Command_ChannelUserJoinLeaveNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::InternalSwap(YouMeVoice_Command_ChannelUserJoinLeaveNotify* other) {
  std::swap(head_, other->head_);
  channel_id_.Swap(&other->channel_id_);
  user_list_.UnsafeArenaSwap(&other->user_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_ChannelUserJoinLeaveNotify::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_ChannelUserJoinLeaveNotify

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_ChannelUserJoinLeaveNotify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_ChannelUserJoinLeaveNotify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ChannelUserJoinLeaveNotify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.head)
}

// required string channel_id = 2;
bool YouMeVoice_Command_ChannelUserJoinLeaveNotify::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
 const ::std::string& YouMeVoice_Command_ChannelUserJoinLeaveNotify::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}
 void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}
 void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}
 ::std::string* YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_ChannelUserJoinLeaveNotify::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ChannelUserJoinLeaveNotify::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.channel_id)
}

// repeated .YouMeProtocol.JoinLeaveUser user_list = 3;
int YouMeVoice_Command_ChannelUserJoinLeaveNotify::user_list_size() const {
  return user_list_.size();
}
void YouMeVoice_Command_ChannelUserJoinLeaveNotify::clear_user_list() {
  user_list_.Clear();
}
const ::YouMeProtocol::JoinLeaveUser& YouMeVoice_Command_ChannelUserJoinLeaveNotify::user_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_.Get(index);
}
::YouMeProtocol::JoinLeaveUser* YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_user_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_.Mutable(index);
}
::YouMeProtocol::JoinLeaveUser* YouMeVoice_Command_ChannelUserJoinLeaveNotify::add_user_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser >*
YouMeVoice_Command_ChannelUserJoinLeaveNotify::mutable_user_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return &user_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::JoinLeaveUser >&
YouMeVoice_Command_ChannelUserJoinLeaveNotify::user_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_ChannelUserJoinLeaveNotify.user_list)
  return user_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_LeaveConferenceResponse::kHeadFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_LeaveConferenceResponse::YouMeVoice_Command_LeaveConferenceResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
}

void YouMeVoice_Command_LeaveConferenceResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_LeaveConferenceResponse::YouMeVoice_Command_LeaveConferenceResponse(const YouMeVoice_Command_LeaveConferenceResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
}

void YouMeVoice_Command_LeaveConferenceResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_LeaveConferenceResponse::~YouMeVoice_Command_LeaveConferenceResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
  SharedDtor();
}

void YouMeVoice_Command_LeaveConferenceResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_LeaveConferenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_LeaveConferenceResponse& YouMeVoice_Command_LeaveConferenceResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_LeaveConferenceResponse* YouMeVoice_Command_LeaveConferenceResponse::default_instance_ = NULL;

YouMeVoice_Command_LeaveConferenceResponse* YouMeVoice_Command_LeaveConferenceResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_LeaveConferenceResponse* n = new YouMeVoice_Command_LeaveConferenceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_LeaveConferenceResponse::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_LeaveConferenceResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_LeaveConferenceResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse)
}

int YouMeVoice_Command_LeaveConferenceResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_LeaveConferenceResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_LeaveConferenceResponse*>(&from));
}

void YouMeVoice_Command_LeaveConferenceResponse::MergeFrom(const YouMeVoice_Command_LeaveConferenceResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_LeaveConferenceResponse::CopyFrom(const YouMeVoice_Command_LeaveConferenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_LeaveConferenceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_LeaveConferenceResponse::Swap(YouMeVoice_Command_LeaveConferenceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_LeaveConferenceResponse::InternalSwap(YouMeVoice_Command_LeaveConferenceResponse* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_LeaveConferenceResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_LeaveConferenceResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_LeaveConferenceResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_LeaveConferenceResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_LeaveConferenceResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_LeaveConferenceResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_LeaveConferenceResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveConferenceResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveConferenceResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_LeaveConferenceResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveConferenceResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Heart::kHeadFieldNumber;
const int YouMeVoice_Command_Heart::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Heart::YouMeVoice_Command_Heart()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Heart)
}

void YouMeVoice_Command_Heart::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Heart::YouMeVoice_Command_Heart(const YouMeVoice_Command_Heart& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Heart)
}

void YouMeVoice_Command_Heart::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Heart::~YouMeVoice_Command_Heart() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Heart)
  SharedDtor();
}

void YouMeVoice_Command_Heart::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Heart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Heart& YouMeVoice_Command_Heart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Heart* YouMeVoice_Command_Heart::default_instance_ = NULL;

YouMeVoice_Command_Heart* YouMeVoice_Command_Heart::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Heart* n = new YouMeVoice_Command_Heart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Heart::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Heart::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Heart)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Heart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Heart)
  return false;
#undef DO_
}

void YouMeVoice_Command_Heart::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Heart)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Heart)
}

int YouMeVoice_Command_Heart::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_Heart::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Heart::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Heart*>(&from));
}

void YouMeVoice_Command_Heart::MergeFrom(const YouMeVoice_Command_Heart& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Heart::CopyFrom(const YouMeVoice_Command_Heart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Heart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Heart::Swap(YouMeVoice_Command_Heart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Heart::InternalSwap(YouMeVoice_Command_Heart* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Heart::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Heart";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Heart

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Heart::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Heart::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Heart::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Heart::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Heart::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Heart.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Heart::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Heart.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Heart::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Heart::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Heart.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_Heart::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Heart::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Heart::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Heart::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Heart::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Heart.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_Heart::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Heart.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_HeartResponse::kHeadFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_HeartResponse::YouMeVoice_Command_HeartResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_HeartResponse)
}

void YouMeVoice_Command_HeartResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_HeartResponse::YouMeVoice_Command_HeartResponse(const YouMeVoice_Command_HeartResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_HeartResponse)
}

void YouMeVoice_Command_HeartResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_HeartResponse::~YouMeVoice_Command_HeartResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_HeartResponse)
  SharedDtor();
}

void YouMeVoice_Command_HeartResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_HeartResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_HeartResponse& YouMeVoice_Command_HeartResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_HeartResponse* YouMeVoice_Command_HeartResponse::default_instance_ = NULL;

YouMeVoice_Command_HeartResponse* YouMeVoice_Command_HeartResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_HeartResponse* n = new YouMeVoice_Command_HeartResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_HeartResponse::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_HeartResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_HeartResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_HeartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_HeartResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_HeartResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_HeartResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_HeartResponse)
}

int YouMeVoice_Command_HeartResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_HeartResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_HeartResponse*>(&from));
}

void YouMeVoice_Command_HeartResponse::MergeFrom(const YouMeVoice_Command_HeartResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_HeartResponse::CopyFrom(const YouMeVoice_Command_HeartResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_HeartResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_HeartResponse::Swap(YouMeVoice_Command_HeartResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_HeartResponse::InternalSwap(YouMeVoice_Command_HeartResponse* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_HeartResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_HeartResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_HeartResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_HeartResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_HeartResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_HeartResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_HeartResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_HeartResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_HeartResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_HeartResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_HeartResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_HeartResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_HeartResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_HeartResponse.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Kickout::kHeadFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Kickout::YouMeVoice_Command_Kickout()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Kickout)
}

void YouMeVoice_Command_Kickout::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Kickout::YouMeVoice_Command_Kickout(const YouMeVoice_Command_Kickout& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Kickout)
}

void YouMeVoice_Command_Kickout::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Kickout::~YouMeVoice_Command_Kickout() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Kickout)
  SharedDtor();
}

void YouMeVoice_Command_Kickout::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Kickout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Kickout& YouMeVoice_Command_Kickout::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Kickout* YouMeVoice_Command_Kickout::default_instance_ = NULL;

YouMeVoice_Command_Kickout* YouMeVoice_Command_Kickout::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Kickout* n = new YouMeVoice_Command_Kickout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Kickout::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Kickout::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Kickout)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Kickout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Kickout)
  return false;
#undef DO_
}

void YouMeVoice_Command_Kickout::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Kickout)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Kickout)
}

int YouMeVoice_Command_Kickout::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Kickout::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Kickout*>(&from));
}

void YouMeVoice_Command_Kickout::MergeFrom(const YouMeVoice_Command_Kickout& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Kickout::CopyFrom(const YouMeVoice_Command_Kickout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Kickout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Kickout::Swap(YouMeVoice_Command_Kickout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Kickout::InternalSwap(YouMeVoice_Command_Kickout* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Kickout::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Kickout";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Kickout

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Kickout::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Kickout::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Kickout::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Kickout::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Kickout::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Kickout.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Kickout::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Kickout.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Kickout::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Kickout::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Kickout.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_MicStatus::kHeadFieldNumber;
const int YouMeVoice_Command_MicStatus::kSessionidFieldNumber;
const int YouMeVoice_Command_MicStatus::kUseridFieldNumber;
const int YouMeVoice_Command_MicStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_MicStatus::YouMeVoice_Command_MicStatus()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_MicStatus)
}

void YouMeVoice_Command_MicStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_MicStatus::YouMeVoice_Command_MicStatus(const YouMeVoice_Command_MicStatus& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_MicStatus)
}

void YouMeVoice_Command_MicStatus::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_MicStatus::~YouMeVoice_Command_MicStatus() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_MicStatus)
  SharedDtor();
}

void YouMeVoice_Command_MicStatus::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_MicStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_MicStatus& YouMeVoice_Command_MicStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_MicStatus* YouMeVoice_Command_MicStatus::default_instance_ = NULL;

YouMeVoice_Command_MicStatus* YouMeVoice_Command_MicStatus::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_MicStatus* n = new YouMeVoice_Command_MicStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_MicStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_MicStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, status_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_MicStatus::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_MicStatus)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (tag == 26) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_MicStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_MicStatus)
  return false;
#undef DO_
}

void YouMeVoice_Command_MicStatus::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_MicStatus)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_MicStatus)
}

int YouMeVoice_Command_MicStatus::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_userid()) {
    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_status()) {
    // required int32 status = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int YouMeVoice_Command_MicStatus::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 status = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_MicStatus::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_MicStatus*>(&from));
}

void YouMeVoice_Command_MicStatus::MergeFrom(const YouMeVoice_Command_MicStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_MicStatus::CopyFrom(const YouMeVoice_Command_MicStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_MicStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_MicStatus::Swap(YouMeVoice_Command_MicStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_MicStatus::InternalSwap(YouMeVoice_Command_MicStatus* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  userid_.Swap(&other->userid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_MicStatus::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_MicStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_MicStatus

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_MicStatus::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_MicStatus::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_MicStatus::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_MicStatus::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_MicStatus::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_MicStatus::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatus.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_MicStatus::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_MicStatus::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatus.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_MicStatus::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_MicStatus::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_MicStatus::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_MicStatus::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MicStatus::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_MicStatus::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatus.sessionid)
}

// required string userid = 3;
bool YouMeVoice_Command_MicStatus::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_MicStatus::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_MicStatus::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_MicStatus::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_MicStatus::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MicStatus::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}
 void YouMeVoice_Command_MicStatus::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}
 void YouMeVoice_Command_MicStatus::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}
 ::std::string* YouMeVoice_Command_MicStatus::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MicStatus::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MicStatus::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatus.userid)
}

// required int32 status = 4;
bool YouMeVoice_Command_MicStatus::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_MicStatus::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_MicStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_MicStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MicStatus::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatus.status)
  return status_;
}
 void YouMeVoice_Command_MicStatus::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_MicStatusServer::kHeadFieldNumber;
const int YouMeVoice_Command_MicStatusServer::kUseridFieldNumber;
const int YouMeVoice_Command_MicStatusServer::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_MicStatusServer::YouMeVoice_Command_MicStatusServer()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
}

void YouMeVoice_Command_MicStatusServer::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_MicStatusServer::YouMeVoice_Command_MicStatusServer(const YouMeVoice_Command_MicStatusServer& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
}

void YouMeVoice_Command_MicStatusServer::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_MicStatusServer::~YouMeVoice_Command_MicStatusServer() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
  SharedDtor();
}

void YouMeVoice_Command_MicStatusServer::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_MicStatusServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_MicStatusServer& YouMeVoice_Command_MicStatusServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_MicStatusServer* YouMeVoice_Command_MicStatusServer::default_instance_ = NULL;

YouMeVoice_Command_MicStatusServer* YouMeVoice_Command_MicStatusServer::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_MicStatusServer* n = new YouMeVoice_Command_MicStatusServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_MicStatusServer::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_MicStatusServer::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
  return false;
#undef DO_
}

void YouMeVoice_Command_MicStatusServer::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_MicStatusServer)
}

int YouMeVoice_Command_MicStatusServer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_userid()) {
    // required string userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_status()) {
    // required int32 status = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int YouMeVoice_Command_MicStatusServer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 status = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_MicStatusServer::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_MicStatusServer*>(&from));
}

void YouMeVoice_Command_MicStatusServer::MergeFrom(const YouMeVoice_Command_MicStatusServer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_MicStatusServer::CopyFrom(const YouMeVoice_Command_MicStatusServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_MicStatusServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_MicStatusServer::Swap(YouMeVoice_Command_MicStatusServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_MicStatusServer::InternalSwap(YouMeVoice_Command_MicStatusServer* other) {
  std::swap(head_, other->head_);
  userid_.Swap(&other->userid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_MicStatusServer::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_MicStatusServer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_MicStatusServer

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_MicStatusServer::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_MicStatusServer::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_MicStatusServer::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_MicStatusServer::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MicStatusServer::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatusServer.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MicStatusServer::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatusServer.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MicStatusServer::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_MicStatusServer::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatusServer.head)
}

// required string userid = 2;
bool YouMeVoice_Command_MicStatusServer::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_MicStatusServer::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_MicStatusServer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_MicStatusServer::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_MicStatusServer::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MicStatusServer::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}
 void YouMeVoice_Command_MicStatusServer::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}
 void YouMeVoice_Command_MicStatusServer::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}
 ::std::string* YouMeVoice_Command_MicStatusServer::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MicStatusServer::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MicStatusServer::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MicStatusServer.userid)
}

// required int32 status = 3;
bool YouMeVoice_Command_MicStatusServer::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_MicStatusServer::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_MicStatusServer::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_MicStatusServer::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MicStatusServer::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MicStatusServer.status)
  return status_;
}
 void YouMeVoice_Command_MicStatusServer::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MicStatusServer.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_CommonStatus::kHeadFieldNumber;
const int YouMeVoice_Command_CommonStatus::kSessionidFieldNumber;
const int YouMeVoice_Command_CommonStatus::kUseridFieldNumber;
const int YouMeVoice_Command_CommonStatus::kEventTypeFieldNumber;
const int YouMeVoice_Command_CommonStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_CommonStatus::YouMeVoice_Command_CommonStatus()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_CommonStatus)
}

void YouMeVoice_Command_CommonStatus::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_CommonStatus::YouMeVoice_Command_CommonStatus(const YouMeVoice_Command_CommonStatus& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_CommonStatus)
}

void YouMeVoice_Command_CommonStatus::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  eventtype_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_CommonStatus::~YouMeVoice_Command_CommonStatus() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_CommonStatus)
  SharedDtor();
}

void YouMeVoice_Command_CommonStatus::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_CommonStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_CommonStatus& YouMeVoice_Command_CommonStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_CommonStatus* YouMeVoice_Command_CommonStatus::default_instance_ = NULL;

YouMeVoice_Command_CommonStatus* YouMeVoice_Command_CommonStatus::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_CommonStatus* n = new YouMeVoice_Command_CommonStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_CommonStatus::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_CommonStatus*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, status_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_CommonStatus::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_CommonStatus)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (tag == 26) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eventType;
        break;
      }

      // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
      case 4: {
        if (tag == 32) {
         parse_eventType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeProtocol::STATUS_EVENT_TYPE_IsValid(value)) {
            set_eventtype(static_cast< ::YouMeProtocol::STATUS_EVENT_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_CommonStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_CommonStatus)
  return false;
#undef DO_
}

void YouMeVoice_Command_CommonStatus::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_CommonStatus)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
  if (has_eventtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eventtype(), output);
  }

  // required int32 status = 5;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_CommonStatus)
}

int YouMeVoice_Command_CommonStatus::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_userid()) {
    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_eventtype()) {
    // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
  }

  if (has_status()) {
    // required int32 status = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int YouMeVoice_Command_CommonStatus::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());

    // required int32 status = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_CommonStatus::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_CommonStatus*>(&from));
}

void YouMeVoice_Command_CommonStatus::MergeFrom(const YouMeVoice_Command_CommonStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_CommonStatus::CopyFrom(const YouMeVoice_Command_CommonStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_CommonStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_CommonStatus::Swap(YouMeVoice_Command_CommonStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_CommonStatus::InternalSwap(YouMeVoice_Command_CommonStatus* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  userid_.Swap(&other->userid_);
  std::swap(eventtype_, other->eventtype_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_CommonStatus::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_CommonStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_CommonStatus

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_CommonStatus::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_CommonStatus::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_CommonStatus::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_CommonStatus::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_CommonStatus::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_CommonStatus::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatus.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_CommonStatus::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_CommonStatus::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatus.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_CommonStatus::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_CommonStatus::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_CommonStatus::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_CommonStatus::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CommonStatus::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_CommonStatus::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.sessionid)
}

// required string userid = 3;
bool YouMeVoice_Command_CommonStatus::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_CommonStatus::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_CommonStatus::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_CommonStatus::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_CommonStatus::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_CommonStatus::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}
 void YouMeVoice_Command_CommonStatus::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}
 void YouMeVoice_Command_CommonStatus::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}
 ::std::string* YouMeVoice_Command_CommonStatus::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_CommonStatus::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_CommonStatus::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatus.userid)
}

// required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 4;
bool YouMeVoice_Command_CommonStatus::has_eventtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_CommonStatus::set_has_eventtype() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_CommonStatus::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_CommonStatus::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
 ::YouMeProtocol::STATUS_EVENT_TYPE YouMeVoice_Command_CommonStatus::eventtype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.eventType)
  return static_cast< ::YouMeProtocol::STATUS_EVENT_TYPE >(eventtype_);
}
 void YouMeVoice_Command_CommonStatus::set_eventtype(::YouMeProtocol::STATUS_EVENT_TYPE value) {
  assert(::YouMeProtocol::STATUS_EVENT_TYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.eventType)
}

// required int32 status = 5;
bool YouMeVoice_Command_CommonStatus::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_CommonStatus::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_CommonStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_CommonStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CommonStatus::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatus.status)
  return status_;
}
 void YouMeVoice_Command_CommonStatus::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatus.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_CommonStatusServer::kHeadFieldNumber;
const int YouMeVoice_Command_CommonStatusServer::kUseridFieldNumber;
const int YouMeVoice_Command_CommonStatusServer::kEventTypeFieldNumber;
const int YouMeVoice_Command_CommonStatusServer::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_CommonStatusServer::YouMeVoice_Command_CommonStatusServer()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
}

void YouMeVoice_Command_CommonStatusServer::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_CommonStatusServer::YouMeVoice_Command_CommonStatusServer(const YouMeVoice_Command_CommonStatusServer& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
}

void YouMeVoice_Command_CommonStatusServer::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  eventtype_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_CommonStatusServer::~YouMeVoice_Command_CommonStatusServer() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
  SharedDtor();
}

void YouMeVoice_Command_CommonStatusServer::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_CommonStatusServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_CommonStatusServer& YouMeVoice_Command_CommonStatusServer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_CommonStatusServer* YouMeVoice_Command_CommonStatusServer::default_instance_ = NULL;

YouMeVoice_Command_CommonStatusServer* YouMeVoice_Command_CommonStatusServer::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_CommonStatusServer* n = new YouMeVoice_Command_CommonStatusServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_CommonStatusServer::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_CommonStatusServer*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(eventtype_, status_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_CommonStatusServer::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eventType;
        break;
      }

      // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
      case 3: {
        if (tag == 24) {
         parse_eventType:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeProtocol::STATUS_EVENT_TYPE_IsValid(value)) {
            set_eventtype(static_cast< ::YouMeProtocol::STATUS_EVENT_TYPE >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
  return false;
#undef DO_
}

void YouMeVoice_Command_CommonStatusServer::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
  if (has_eventtype()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eventtype(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_CommonStatusServer)
}

int YouMeVoice_Command_CommonStatusServer::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_userid()) {
    // required string userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_eventtype()) {
    // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
  }

  if (has_status()) {
    // required int32 status = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  return total_size;
}
int YouMeVoice_Command_CommonStatusServer::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());

    // required int32 status = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_CommonStatusServer::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_CommonStatusServer*>(&from));
}

void YouMeVoice_Command_CommonStatusServer::MergeFrom(const YouMeVoice_Command_CommonStatusServer& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_CommonStatusServer::CopyFrom(const YouMeVoice_Command_CommonStatusServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_CommonStatusServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_CommonStatusServer::Swap(YouMeVoice_Command_CommonStatusServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_CommonStatusServer::InternalSwap(YouMeVoice_Command_CommonStatusServer* other) {
  std::swap(head_, other->head_);
  userid_.Swap(&other->userid_);
  std::swap(eventtype_, other->eventtype_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_CommonStatusServer::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_CommonStatusServer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_CommonStatusServer

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_CommonStatusServer::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_CommonStatusServer::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_CommonStatusServer::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_CommonStatusServer::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_CommonStatusServer::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CommonStatusServer::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CommonStatusServer::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_CommonStatusServer::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.head)
}

// required string userid = 2;
bool YouMeVoice_Command_CommonStatusServer::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_CommonStatusServer::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_CommonStatusServer::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_CommonStatusServer::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_CommonStatusServer::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_CommonStatusServer::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}
 void YouMeVoice_Command_CommonStatusServer::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}
 void YouMeVoice_Command_CommonStatusServer::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}
 ::std::string* YouMeVoice_Command_CommonStatusServer::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_CommonStatusServer::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_CommonStatusServer::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.userid)
}

// required .YouMeProtocol.STATUS_EVENT_TYPE eventType = 3;
bool YouMeVoice_Command_CommonStatusServer::has_eventtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_CommonStatusServer::set_has_eventtype() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_CommonStatusServer::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_CommonStatusServer::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
 ::YouMeProtocol::STATUS_EVENT_TYPE YouMeVoice_Command_CommonStatusServer::eventtype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.eventType)
  return static_cast< ::YouMeProtocol::STATUS_EVENT_TYPE >(eventtype_);
}
 void YouMeVoice_Command_CommonStatusServer::set_eventtype(::YouMeProtocol::STATUS_EVENT_TYPE value) {
  assert(::YouMeProtocol::STATUS_EVENT_TYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.eventType)
}

// required int32 status = 4;
bool YouMeVoice_Command_CommonStatusServer::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_CommonStatusServer::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_CommonStatusServer::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_CommonStatusServer::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CommonStatusServer::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.status)
  return status_;
}
 void YouMeVoice_Command_CommonStatusServer::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CommonStatusServer.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Recive_Members::kHeadFieldNumber;
const int YouMeVoice_Command_Recive_Members::kUseridFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Recive_Members::YouMeVoice_Command_Recive_Members()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Recive_Members)
}

void YouMeVoice_Command_Recive_Members::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Recive_Members::YouMeVoice_Command_Recive_Members(const YouMeVoice_Command_Recive_Members& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Recive_Members)
}

void YouMeVoice_Command_Recive_Members::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Recive_Members::~YouMeVoice_Command_Recive_Members() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Recive_Members)
  SharedDtor();
}

void YouMeVoice_Command_Recive_Members::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Recive_Members::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Recive_Members& YouMeVoice_Command_Recive_Members::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Recive_Members* YouMeVoice_Command_Recive_Members::default_instance_ = NULL;

YouMeVoice_Command_Recive_Members* YouMeVoice_Command_Recive_Members::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Recive_Members* n = new YouMeVoice_Command_Recive_Members;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Recive_Members::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  }
  userid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Recive_Members::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Recive_Members)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // repeated string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Recive_Members)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Recive_Members)
  return false;
#undef DO_
}

void YouMeVoice_Command_Recive_Members::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Recive_Members)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // repeated string userid = 2;
  for (int i = 0; i < this->userid_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Recive_Members)
}

int YouMeVoice_Command_Recive_Members::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // repeated string userid = 2;
  total_size += 1 * this->userid_size();
  for (int i = 0; i < this->userid_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
      this->userid(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Recive_Members::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Recive_Members*>(&from));
}

void YouMeVoice_Command_Recive_Members::MergeFrom(const YouMeVoice_Command_Recive_Members& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  userid_.MergeFrom(from.userid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Recive_Members::CopyFrom(const YouMeVoice_Command_Recive_Members& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Recive_Members::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Recive_Members::Swap(YouMeVoice_Command_Recive_Members* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Recive_Members::InternalSwap(YouMeVoice_Command_Recive_Members* other) {
  std::swap(head_, other->head_);
  userid_.UnsafeArenaSwap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Recive_Members::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Recive_Members";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Recive_Members

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Recive_Members::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Recive_Members::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Recive_Members::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Recive_Members::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Recive_Members::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Recive_Members.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Recive_Members::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Recive_Members.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Recive_Members::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Recive_Members::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Recive_Members.head)
}

// repeated string userid = 2;
int YouMeVoice_Command_Recive_Members::userid_size() const {
  return userid_.size();
}
void YouMeVoice_Command_Recive_Members::clear_userid() {
  userid_.Clear();
}
 const ::std::string& YouMeVoice_Command_Recive_Members::userid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return userid_.Get(index);
}
 ::std::string* YouMeVoice_Command_Recive_Members::mutable_userid(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return userid_.Mutable(index);
}
 void YouMeVoice_Command_Recive_Members::set_userid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  userid_.Mutable(index)->assign(value);
}
 void YouMeVoice_Command_Recive_Members::set_userid(int index, const char* value) {
  userid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
 void YouMeVoice_Command_Recive_Members::set_userid(int index, const char* value, size_t size) {
  userid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
 ::std::string* YouMeVoice_Command_Recive_Members::add_userid() {
  return userid_.Add();
}
 void YouMeVoice_Command_Recive_Members::add_userid(const ::std::string& value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
 void YouMeVoice_Command_Recive_Members::add_userid(const char* value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
 void YouMeVoice_Command_Recive_Members::add_userid(const char* value, size_t size) {
  userid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeVoice_Command_Recive_Members::userid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return userid_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeVoice_Command_Recive_Members::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Recive_Members.userid)
  return &userid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_JoinRoomRequest::kHeadFieldNumber;
const int YouMeVoice_Command_JoinRoomRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_JoinRoomRequest::kRoomidFieldNumber;
const int YouMeVoice_Command_JoinRoomRequest::kCheckRoomExistFieldNumber;
const int YouMeVoice_Command_JoinRoomRequest::kAvNotifyFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_JoinRoomRequest::YouMeVoice_Command_JoinRoomRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
}

void YouMeVoice_Command_JoinRoomRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_JoinRoomRequest::YouMeVoice_Command_JoinRoomRequest(const YouMeVoice_Command_JoinRoomRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
}

void YouMeVoice_Command_JoinRoomRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  check_room_exist_ = false;
  av_notify_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_JoinRoomRequest::~YouMeVoice_Command_JoinRoomRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
  SharedDtor();
}

void YouMeVoice_Command_JoinRoomRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_JoinRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_JoinRoomRequest& YouMeVoice_Command_JoinRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_JoinRoomRequest* YouMeVoice_Command_JoinRoomRequest::default_instance_ = NULL;

YouMeVoice_Command_JoinRoomRequest* YouMeVoice_Command_JoinRoomRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_JoinRoomRequest* n = new YouMeVoice_Command_JoinRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_JoinRoomRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_JoinRoomRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, av_notify_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_JoinRoomRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomid;
        break;
      }

      // optional string roomid = 3;
      case 3: {
        if (tag == 26) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_check_room_exist;
        break;
      }

      // optional bool check_room_exist = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_check_room_exist:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_room_exist_)));
          set_has_check_room_exist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_av_notify;
        break;
      }

      // optional bool av_notify = 5;
      case 5: {
        if (tag == 40) {
         parse_av_notify:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &av_notify_)));
          set_has_av_notify();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_JoinRoomRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string roomid = 3;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // optional bool check_room_exist = 4 [default = false];
  if (has_check_room_exist()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(4, this->check_room_exist(), output);
  }

  // optional bool av_notify = 5;
  if (has_av_notify()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(5, this->av_notify(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest)
}

int YouMeVoice_Command_JoinRoomRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional bool check_room_exist = 4 [default = false];
    if (has_check_room_exist()) {
      total_size += 1 + 1;
    }

    // optional bool av_notify = 5;
    if (has_av_notify()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_JoinRoomRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_JoinRoomRequest*>(&from));
}

void YouMeVoice_Command_JoinRoomRequest::MergeFrom(const YouMeVoice_Command_JoinRoomRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_check_room_exist()) {
      set_check_room_exist(from.check_room_exist());
    }
    if (from.has_av_notify()) {
      set_av_notify(from.av_notify());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_JoinRoomRequest::CopyFrom(const YouMeVoice_Command_JoinRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_JoinRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_JoinRoomRequest::Swap(YouMeVoice_Command_JoinRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_JoinRoomRequest::InternalSwap(YouMeVoice_Command_JoinRoomRequest* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  roomid_.Swap(&other->roomid_);
  std::swap(check_room_exist_, other->check_room_exist_);
  std::swap(av_notify_, other->av_notify_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_JoinRoomRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_JoinRoomRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_JoinRoomRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_JoinRoomRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_JoinRoomRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_JoinRoomRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinRoomRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_JoinRoomRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_JoinRoomRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_JoinRoomRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_JoinRoomRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinRoomRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_JoinRoomRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.sessionid)
}

// optional string roomid = 3;
bool YouMeVoice_Command_JoinRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_JoinRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_JoinRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}
 void YouMeVoice_Command_JoinRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}
 void YouMeVoice_Command_JoinRoomRequest::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}
 ::std::string* YouMeVoice_Command_JoinRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_JoinRoomRequest::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.roomid)
}

// optional bool check_room_exist = 4 [default = false];
bool YouMeVoice_Command_JoinRoomRequest::has_check_room_exist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_JoinRoomRequest::set_has_check_room_exist() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_has_check_room_exist() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_check_room_exist() {
  check_room_exist_ = false;
  clear_has_check_room_exist();
}
 bool YouMeVoice_Command_JoinRoomRequest::check_room_exist() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.check_room_exist)
  return check_room_exist_;
}
 void YouMeVoice_Command_JoinRoomRequest::set_check_room_exist(bool value) {
  set_has_check_room_exist();
  check_room_exist_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.check_room_exist)
}

// optional bool av_notify = 5;
bool YouMeVoice_Command_JoinRoomRequest::has_av_notify() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_JoinRoomRequest::set_has_av_notify() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_has_av_notify() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_JoinRoomRequest::clear_av_notify() {
  av_notify_ = false;
  clear_has_av_notify();
}
 bool YouMeVoice_Command_JoinRoomRequest::av_notify() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.av_notify)
  return av_notify_;
}
 void YouMeVoice_Command_JoinRoomRequest::set_av_notify(bool value) {
  set_has_av_notify();
  av_notify_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomRequest.av_notify)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_JoinRoomResponse::kHeadFieldNumber;
const int YouMeVoice_Command_JoinRoomResponse::kSessionidFieldNumber;
const int YouMeVoice_Command_JoinRoomResponse::kRoomidFieldNumber;
const int YouMeVoice_Command_JoinRoomResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_JoinRoomResponse::YouMeVoice_Command_JoinRoomResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
}

void YouMeVoice_Command_JoinRoomResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_JoinRoomResponse::YouMeVoice_Command_JoinRoomResponse(const YouMeVoice_Command_JoinRoomResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
}

void YouMeVoice_Command_JoinRoomResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_JoinRoomResponse::~YouMeVoice_Command_JoinRoomResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
  SharedDtor();
}

void YouMeVoice_Command_JoinRoomResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_JoinRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_JoinRoomResponse& YouMeVoice_Command_JoinRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_JoinRoomResponse* YouMeVoice_Command_JoinRoomResponse::default_instance_ = NULL;

YouMeVoice_Command_JoinRoomResponse* YouMeVoice_Command_JoinRoomResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_JoinRoomResponse* n = new YouMeVoice_Command_JoinRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_JoinRoomResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_JoinRoomResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, success_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_JoinRoomResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomid;
        break;
      }

      // optional string roomid = 3;
      case 3: {
        if (tag == 26) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_JoinRoomResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string roomid = 3;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse)
}

int YouMeVoice_Command_JoinRoomResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_JoinRoomResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_JoinRoomResponse*>(&from));
}

void YouMeVoice_Command_JoinRoomResponse::MergeFrom(const YouMeVoice_Command_JoinRoomResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_JoinRoomResponse::CopyFrom(const YouMeVoice_Command_JoinRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_JoinRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_JoinRoomResponse::Swap(YouMeVoice_Command_JoinRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_JoinRoomResponse::InternalSwap(YouMeVoice_Command_JoinRoomResponse* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  roomid_.Swap(&other->roomid_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_JoinRoomResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_JoinRoomResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_JoinRoomResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_JoinRoomResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_JoinRoomResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_JoinRoomResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinRoomResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_JoinRoomResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_JoinRoomResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_JoinRoomResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_JoinRoomResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_JoinRoomResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_JoinRoomResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.sessionid)
}

// optional string roomid = 3;
bool YouMeVoice_Command_JoinRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_JoinRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_JoinRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinRoomResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}
 void YouMeVoice_Command_JoinRoomResponse::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}
 void YouMeVoice_Command_JoinRoomResponse::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}
 ::std::string* YouMeVoice_Command_JoinRoomResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_JoinRoomResponse::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_JoinRoomResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.roomid)
}

// optional bool success = 4;
bool YouMeVoice_Command_JoinRoomResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_JoinRoomResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_JoinRoomResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool YouMeVoice_Command_JoinRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.success)
  return success_;
}
 void YouMeVoice_Command_JoinRoomResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_JoinRoomResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_LeaveRoomRequest::kHeadFieldNumber;
const int YouMeVoice_Command_LeaveRoomRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_LeaveRoomRequest::kRoomidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_LeaveRoomRequest::YouMeVoice_Command_LeaveRoomRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
}

void YouMeVoice_Command_LeaveRoomRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_LeaveRoomRequest::YouMeVoice_Command_LeaveRoomRequest(const YouMeVoice_Command_LeaveRoomRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
}

void YouMeVoice_Command_LeaveRoomRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_LeaveRoomRequest::~YouMeVoice_Command_LeaveRoomRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
  SharedDtor();
}

void YouMeVoice_Command_LeaveRoomRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_LeaveRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_LeaveRoomRequest& YouMeVoice_Command_LeaveRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_LeaveRoomRequest* YouMeVoice_Command_LeaveRoomRequest::default_instance_ = NULL;

YouMeVoice_Command_LeaveRoomRequest* YouMeVoice_Command_LeaveRoomRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_LeaveRoomRequest* n = new YouMeVoice_Command_LeaveRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_LeaveRoomRequest::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_LeaveRoomRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomid;
        break;
      }

      // optional string roomid = 3;
      case 3: {
        if (tag == 26) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_LeaveRoomRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string roomid = 3;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest)
}

int YouMeVoice_Command_LeaveRoomRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_LeaveRoomRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_LeaveRoomRequest*>(&from));
}

void YouMeVoice_Command_LeaveRoomRequest::MergeFrom(const YouMeVoice_Command_LeaveRoomRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_LeaveRoomRequest::CopyFrom(const YouMeVoice_Command_LeaveRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_LeaveRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_LeaveRoomRequest::Swap(YouMeVoice_Command_LeaveRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_LeaveRoomRequest::InternalSwap(YouMeVoice_Command_LeaveRoomRequest* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  roomid_.Swap(&other->roomid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_LeaveRoomRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_LeaveRoomRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_LeaveRoomRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_LeaveRoomRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_LeaveRoomRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_LeaveRoomRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_LeaveRoomRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveRoomRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_LeaveRoomRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_LeaveRoomRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_LeaveRoomRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_LeaveRoomRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_LeaveRoomRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_LeaveRoomRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_LeaveRoomRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_LeaveRoomRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.sessionid)
}

// optional string roomid = 3;
bool YouMeVoice_Command_LeaveRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_LeaveRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_LeaveRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_LeaveRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_LeaveRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_LeaveRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}
 void YouMeVoice_Command_LeaveRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}
 void YouMeVoice_Command_LeaveRoomRequest::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}
 ::std::string* YouMeVoice_Command_LeaveRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_LeaveRoomRequest::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_LeaveRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomRequest.roomid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_LeaveRoomResponse::kHeadFieldNumber;
const int YouMeVoice_Command_LeaveRoomResponse::kSessionidFieldNumber;
const int YouMeVoice_Command_LeaveRoomResponse::kRoomidFieldNumber;
const int YouMeVoice_Command_LeaveRoomResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_LeaveRoomResponse::YouMeVoice_Command_LeaveRoomResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
}

void YouMeVoice_Command_LeaveRoomResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_LeaveRoomResponse::YouMeVoice_Command_LeaveRoomResponse(const YouMeVoice_Command_LeaveRoomResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
}

void YouMeVoice_Command_LeaveRoomResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_LeaveRoomResponse::~YouMeVoice_Command_LeaveRoomResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
  SharedDtor();
}

void YouMeVoice_Command_LeaveRoomResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_LeaveRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_LeaveRoomResponse& YouMeVoice_Command_LeaveRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_LeaveRoomResponse* YouMeVoice_Command_LeaveRoomResponse::default_instance_ = NULL;

YouMeVoice_Command_LeaveRoomResponse* YouMeVoice_Command_LeaveRoomResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_LeaveRoomResponse* n = new YouMeVoice_Command_LeaveRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_LeaveRoomResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_LeaveRoomResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, success_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_LeaveRoomResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomid;
        break;
      }

      // optional string roomid = 3;
      case 3: {
        if (tag == 26) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_LeaveRoomResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string roomid = 3;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse)
}

int YouMeVoice_Command_LeaveRoomResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_LeaveRoomResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_LeaveRoomResponse*>(&from));
}

void YouMeVoice_Command_LeaveRoomResponse::MergeFrom(const YouMeVoice_Command_LeaveRoomResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_LeaveRoomResponse::CopyFrom(const YouMeVoice_Command_LeaveRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_LeaveRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_LeaveRoomResponse::Swap(YouMeVoice_Command_LeaveRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_LeaveRoomResponse::InternalSwap(YouMeVoice_Command_LeaveRoomResponse* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  roomid_.Swap(&other->roomid_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_LeaveRoomResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_LeaveRoomResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_LeaveRoomResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_LeaveRoomResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_LeaveRoomResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveRoomResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_LeaveRoomResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_LeaveRoomResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_LeaveRoomResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_LeaveRoomResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_LeaveRoomResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_LeaveRoomResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.sessionid)
}

// optional string roomid = 3;
bool YouMeVoice_Command_LeaveRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_LeaveRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_LeaveRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_LeaveRoomResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}
 void YouMeVoice_Command_LeaveRoomResponse::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}
 void YouMeVoice_Command_LeaveRoomResponse::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}
 ::std::string* YouMeVoice_Command_LeaveRoomResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_LeaveRoomResponse::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_LeaveRoomResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.roomid)
}

// optional bool success = 4;
bool YouMeVoice_Command_LeaveRoomResponse::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_LeaveRoomResponse::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_LeaveRoomResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool YouMeVoice_Command_LeaveRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.success)
  return success_;
}
 void YouMeVoice_Command_LeaveRoomResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_LeaveRoomResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_SpeakToRoomRequest::kHeadFieldNumber;
const int YouMeVoice_Command_SpeakToRoomRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_SpeakToRoomRequest::kRoomidFieldNumber;
const int YouMeVoice_Command_SpeakToRoomRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_SpeakToRoomRequest::YouMeVoice_Command_SpeakToRoomRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
}

void YouMeVoice_Command_SpeakToRoomRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_SpeakToRoomRequest::YouMeVoice_Command_SpeakToRoomRequest(const YouMeVoice_Command_SpeakToRoomRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
}

void YouMeVoice_Command_SpeakToRoomRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_SpeakToRoomRequest::~YouMeVoice_Command_SpeakToRoomRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
  SharedDtor();
}

void YouMeVoice_Command_SpeakToRoomRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_SpeakToRoomRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_SpeakToRoomRequest& YouMeVoice_Command_SpeakToRoomRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_SpeakToRoomRequest* YouMeVoice_Command_SpeakToRoomRequest::default_instance_ = NULL;

YouMeVoice_Command_SpeakToRoomRequest* YouMeVoice_Command_SpeakToRoomRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_SpeakToRoomRequest* n = new YouMeVoice_Command_SpeakToRoomRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_SpeakToRoomRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_SpeakToRoomRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, timestamp_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_SpeakToRoomRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomid;
        break;
      }

      // optional string roomid = 3;
      case 3: {
        if (tag == 26) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_SpeakToRoomRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string roomid = 3;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest)
}

int YouMeVoice_Command_SpeakToRoomRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_SpeakToRoomRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_SpeakToRoomRequest*>(&from));
}

void YouMeVoice_Command_SpeakToRoomRequest::MergeFrom(const YouMeVoice_Command_SpeakToRoomRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_SpeakToRoomRequest::CopyFrom(const YouMeVoice_Command_SpeakToRoomRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_SpeakToRoomRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_SpeakToRoomRequest::Swap(YouMeVoice_Command_SpeakToRoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_SpeakToRoomRequest::InternalSwap(YouMeVoice_Command_SpeakToRoomRequest* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  roomid_.Swap(&other->roomid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_SpeakToRoomRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_SpeakToRoomRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_SpeakToRoomRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_SpeakToRoomRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_SpeakToRoomRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_SpeakToRoomRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_SpeakToRoomRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_SpeakToRoomRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_SpeakToRoomRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_SpeakToRoomRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_SpeakToRoomRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_SpeakToRoomRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.sessionid)
}

// optional string roomid = 3;
bool YouMeVoice_Command_SpeakToRoomRequest::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_SpeakToRoomRequest::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_SpeakToRoomRequest::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SpeakToRoomRequest::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}
 void YouMeVoice_Command_SpeakToRoomRequest::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}
 void YouMeVoice_Command_SpeakToRoomRequest::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}
 ::std::string* YouMeVoice_Command_SpeakToRoomRequest::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_SpeakToRoomRequest::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SpeakToRoomRequest::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.roomid)
}

// optional uint32 timestamp = 4;
bool YouMeVoice_Command_SpeakToRoomRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_SpeakToRoomRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_SpeakToRoomRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::youmecommon::protobuf::uint32 YouMeVoice_Command_SpeakToRoomRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.timestamp)
  return timestamp_;
}
 void YouMeVoice_Command_SpeakToRoomRequest::set_timestamp(::youmecommon::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_SpeakToRoomResponse::kHeadFieldNumber;
const int YouMeVoice_Command_SpeakToRoomResponse::kSessionidFieldNumber;
const int YouMeVoice_Command_SpeakToRoomResponse::kRoomidFieldNumber;
const int YouMeVoice_Command_SpeakToRoomResponse::kTimestampFieldNumber;
const int YouMeVoice_Command_SpeakToRoomResponse::kSuccessFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_SpeakToRoomResponse::YouMeVoice_Command_SpeakToRoomResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
}

void YouMeVoice_Command_SpeakToRoomResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_SpeakToRoomResponse::YouMeVoice_Command_SpeakToRoomResponse(const YouMeVoice_Command_SpeakToRoomResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
}

void YouMeVoice_Command_SpeakToRoomResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  roomid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_SpeakToRoomResponse::~YouMeVoice_Command_SpeakToRoomResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
  SharedDtor();
}

void YouMeVoice_Command_SpeakToRoomResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_SpeakToRoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_SpeakToRoomResponse& YouMeVoice_Command_SpeakToRoomResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_SpeakToRoomResponse* YouMeVoice_Command_SpeakToRoomResponse::default_instance_ = NULL;

YouMeVoice_Command_SpeakToRoomResponse* YouMeVoice_Command_SpeakToRoomResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_SpeakToRoomResponse* n = new YouMeVoice_Command_SpeakToRoomResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_SpeakToRoomResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_SpeakToRoomResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, success_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_roomid()) {
      roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_SpeakToRoomResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomid;
        break;
      }

      // optional string roomid = 3;
      case 3: {
        if (tag == 26) {
         parse_roomid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_timestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }

      // optional bool success = 5;
      case 5: {
        if (tag == 40) {
         parse_success:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_SpeakToRoomResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string roomid = 3;
  if (has_roomid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // optional uint32 timestamp = 4;
  if (has_timestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional bool success = 5;
  if (has_success()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse)
}

int YouMeVoice_Command_SpeakToRoomResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string roomid = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional bool success = 5;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_SpeakToRoomResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_SpeakToRoomResponse*>(&from));
}

void YouMeVoice_Command_SpeakToRoomResponse::MergeFrom(const YouMeVoice_Command_SpeakToRoomResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_roomid()) {
      set_has_roomid();
      roomid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.roomid_);
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_SpeakToRoomResponse::CopyFrom(const YouMeVoice_Command_SpeakToRoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_SpeakToRoomResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_SpeakToRoomResponse::Swap(YouMeVoice_Command_SpeakToRoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_SpeakToRoomResponse::InternalSwap(YouMeVoice_Command_SpeakToRoomResponse* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  roomid_.Swap(&other->roomid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_SpeakToRoomResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_SpeakToRoomResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_SpeakToRoomResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_SpeakToRoomResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_SpeakToRoomResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SpeakToRoomResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SpeakToRoomResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_SpeakToRoomResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_SpeakToRoomResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_SpeakToRoomResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_SpeakToRoomResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.sessionid)
}

// optional string roomid = 3;
bool YouMeVoice_Command_SpeakToRoomResponse::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_SpeakToRoomResponse::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_roomid() {
  roomid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roomid();
}
 const ::std::string& YouMeVoice_Command_SpeakToRoomResponse::roomid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
  return roomid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_roomid(const ::std::string& value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_roomid(const char* value) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_roomid(const char* value, size_t size) {
  set_has_roomid();
  roomid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}
 ::std::string* YouMeVoice_Command_SpeakToRoomResponse::mutable_roomid() {
  set_has_roomid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
  return roomid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_SpeakToRoomResponse::release_roomid() {
  clear_has_roomid();
  return roomid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_allocated_roomid(::std::string* roomid) {
  if (roomid != NULL) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  roomid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), roomid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.roomid)
}

// optional uint32 timestamp = 4;
bool YouMeVoice_Command_SpeakToRoomResponse::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_SpeakToRoomResponse::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
 ::youmecommon::protobuf::uint32 YouMeVoice_Command_SpeakToRoomResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.timestamp)
  return timestamp_;
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_timestamp(::youmecommon::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.timestamp)
}

// optional bool success = 5;
bool YouMeVoice_Command_SpeakToRoomResponse::has_success() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_SpeakToRoomResponse::set_has_success() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_SpeakToRoomResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
 bool YouMeVoice_Command_SpeakToRoomResponse::success() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.success)
  return success_;
}
 void YouMeVoice_Command_SpeakToRoomResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SpeakToRoomResponse.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Session2UserIdRequest::kHeadFieldNumber;
const int YouMeVoice_Command_Session2UserIdRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_Session2UserIdRequest::kUserSessionFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Session2UserIdRequest::YouMeVoice_Command_Session2UserIdRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
}

void YouMeVoice_Command_Session2UserIdRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Session2UserIdRequest::YouMeVoice_Command_Session2UserIdRequest(const YouMeVoice_Command_Session2UserIdRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
}

void YouMeVoice_Command_Session2UserIdRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  user_session_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Session2UserIdRequest::~YouMeVoice_Command_Session2UserIdRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
  SharedDtor();
}

void YouMeVoice_Command_Session2UserIdRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Session2UserIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Session2UserIdRequest& YouMeVoice_Command_Session2UserIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Session2UserIdRequest* YouMeVoice_Command_Session2UserIdRequest::default_instance_ = NULL;

YouMeVoice_Command_Session2UserIdRequest* YouMeVoice_Command_Session2UserIdRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Session2UserIdRequest* n = new YouMeVoice_Command_Session2UserIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Session2UserIdRequest::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    user_session_ = 0;
  }
  sessionid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Session2UserIdRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // repeated int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_sessionid())));
        } else if (tag == 18) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sessionid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        if (input->ExpectTag(24)) goto parse_user_session;
        break;
      }

      // optional int32 user_session = 3;
      case 3: {
        if (tag == 24) {
         parse_user_session:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_session_)));
          set_has_user_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_Session2UserIdRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // repeated int32 sessionid = 2;
  for (int i = 0; i < this->sessionid_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->sessionid(i), output);
  }

  // optional int32 user_session = 3;
  if (has_user_session()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_session(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest)
}

int YouMeVoice_Command_Session2UserIdRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional int32 user_session = 3;
  if (has_user_session()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->user_session());
  }

  // repeated int32 sessionid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sessionid_size(); i++) {
      data_size += ::youmecommon::protobuf::internal::WireFormatLite::
        Int32Size(this->sessionid(i));
    }
    total_size += 1 * this->sessionid_size() + data_size;
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Session2UserIdRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Session2UserIdRequest*>(&from));
}

void YouMeVoice_Command_Session2UserIdRequest::MergeFrom(const YouMeVoice_Command_Session2UserIdRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  sessionid_.MergeFrom(from.sessionid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_user_session()) {
      set_user_session(from.user_session());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Session2UserIdRequest::CopyFrom(const YouMeVoice_Command_Session2UserIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Session2UserIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Session2UserIdRequest::Swap(YouMeVoice_Command_Session2UserIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Session2UserIdRequest::InternalSwap(YouMeVoice_Command_Session2UserIdRequest* other) {
  std::swap(head_, other->head_);
  sessionid_.UnsafeArenaSwap(&other->sessionid_);
  std::swap(user_session_, other->user_session_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Session2UserIdRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Session2UserIdRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Session2UserIdRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Session2UserIdRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Session2UserIdRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Session2UserIdRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Session2UserIdRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Session2UserIdRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Session2UserIdRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Session2UserIdRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.head)
}

// repeated int32 sessionid = 2;
int YouMeVoice_Command_Session2UserIdRequest::sessionid_size() const {
  return sessionid_.size();
}
void YouMeVoice_Command_Session2UserIdRequest::clear_sessionid() {
  sessionid_.Clear();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Session2UserIdRequest::sessionid(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
  return sessionid_.Get(index);
}
 void YouMeVoice_Command_Session2UserIdRequest::set_sessionid(int index, ::youmecommon::protobuf::int32 value) {
  sessionid_.Set(index, value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
}
 void YouMeVoice_Command_Session2UserIdRequest::add_sessionid(::youmecommon::protobuf::int32 value) {
  sessionid_.Add(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
}
 const ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 >&
YouMeVoice_Command_Session2UserIdRequest::sessionid() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
  return sessionid_;
}
 ::youmecommon::protobuf::RepeatedField< ::youmecommon::protobuf::int32 >*
YouMeVoice_Command_Session2UserIdRequest::mutable_sessionid() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.sessionid)
  return &sessionid_;
}

// optional int32 user_session = 3;
bool YouMeVoice_Command_Session2UserIdRequest::has_user_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Session2UserIdRequest::set_has_user_session() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Session2UserIdRequest::clear_has_user_session() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Session2UserIdRequest::clear_user_session() {
  user_session_ = 0;
  clear_has_user_session();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Session2UserIdRequest::user_session() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.user_session)
  return user_session_;
}
 void YouMeVoice_Command_Session2UserIdRequest::set_user_session(::youmecommon::protobuf::int32 value) {
  set_has_user_session();
  user_session_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdRequest.user_session)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Session2UserIdResponse_Speaker::kSessionidFieldNumber;
const int YouMeVoice_Command_Session2UserIdResponse_Speaker::kUseridFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Session2UserIdResponse_Speaker::YouMeVoice_Command_Session2UserIdResponse_Speaker()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::InitAsDefaultInstance() {
}

YouMeVoice_Command_Session2UserIdResponse_Speaker::YouMeVoice_Command_Session2UserIdResponse_Speaker(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Session2UserIdResponse_Speaker::~YouMeVoice_Command_Session2UserIdResponse_Speaker() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
  SharedDtor();
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Session2UserIdResponse_Speaker& YouMeVoice_Command_Session2UserIdResponse_Speaker::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Session2UserIdResponse_Speaker* YouMeVoice_Command_Session2UserIdResponse_Speaker::default_instance_ = NULL;

YouMeVoice_Command_Session2UserIdResponse_Speaker* YouMeVoice_Command_Session2UserIdResponse_Speaker::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Session2UserIdResponse_Speaker* n = new YouMeVoice_Command_Session2UserIdResponse_Speaker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    sessionid_ = 0;
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Session2UserIdResponse_Speaker::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sessionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // optional string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
  return false;
#undef DO_
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
  // optional int32 sessionid = 1;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->sessionid(), output);
  }

  // optional string userid = 2;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker)
}

int YouMeVoice_Command_Session2UserIdResponse_Speaker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 sessionid = 1;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Session2UserIdResponse_Speaker*>(&from));
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::MergeFrom(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::CopyFrom(const YouMeVoice_Command_Session2UserIdResponse_Speaker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Session2UserIdResponse_Speaker::IsInitialized() const {

  return true;
}

void YouMeVoice_Command_Session2UserIdResponse_Speaker::Swap(YouMeVoice_Command_Session2UserIdResponse_Speaker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::InternalSwap(YouMeVoice_Command_Session2UserIdResponse_Speaker* other) {
  std::swap(sessionid_, other->sessionid_);
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Session2UserIdResponse_Speaker::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int YouMeVoice_Command_Session2UserIdResponse::kHeadFieldNumber;
const int YouMeVoice_Command_Session2UserIdResponse::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Session2UserIdResponse::YouMeVoice_Command_Session2UserIdResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
}

void YouMeVoice_Command_Session2UserIdResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Session2UserIdResponse::YouMeVoice_Command_Session2UserIdResponse(const YouMeVoice_Command_Session2UserIdResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
}

void YouMeVoice_Command_Session2UserIdResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Session2UserIdResponse::~YouMeVoice_Command_Session2UserIdResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
  SharedDtor();
}

void YouMeVoice_Command_Session2UserIdResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Session2UserIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Session2UserIdResponse& YouMeVoice_Command_Session2UserIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Session2UserIdResponse* YouMeVoice_Command_Session2UserIdResponse::default_instance_ = NULL;

YouMeVoice_Command_Session2UserIdResponse* YouMeVoice_Command_Session2UserIdResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Session2UserIdResponse* n = new YouMeVoice_Command_Session2UserIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Session2UserIdResponse::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Session2UserIdResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(input->IncrementRecursionDepth());
         parse_loop_result:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_result;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_Session2UserIdResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // repeated .YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker result = 2;
  for (unsigned int i = 0, n = this->result_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->result(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse)
}

int YouMeVoice_Command_Session2UserIdResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // repeated .YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Session2UserIdResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Session2UserIdResponse*>(&from));
}

void YouMeVoice_Command_Session2UserIdResponse::MergeFrom(const YouMeVoice_Command_Session2UserIdResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Session2UserIdResponse::CopyFrom(const YouMeVoice_Command_Session2UserIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Session2UserIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Session2UserIdResponse::Swap(YouMeVoice_Command_Session2UserIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Session2UserIdResponse::InternalSwap(YouMeVoice_Command_Session2UserIdResponse* other) {
  std::swap(head_, other->head_);
  result_.UnsafeArenaSwap(&other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Session2UserIdResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Session2UserIdResponse_Speaker

// optional int32 sessionid = 1;
bool YouMeVoice_Command_Session2UserIdResponse_Speaker::has_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_has_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Session2UserIdResponse_Speaker::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.sessionid)
}

// optional string userid = 2;
bool YouMeVoice_Command_Session2UserIdResponse_Speaker::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Session2UserIdResponse_Speaker::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_Session2UserIdResponse_Speaker::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}
 void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}
 void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}
 ::std::string* YouMeVoice_Command_Session2UserIdResponse_Speaker::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Session2UserIdResponse_Speaker::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Session2UserIdResponse_Speaker::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker.userid)
}

// -------------------------------------------------------------------

// YouMeVoice_Command_Session2UserIdResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Session2UserIdResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Session2UserIdResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Session2UserIdResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Session2UserIdResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Session2UserIdResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Session2UserIdResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Session2UserIdResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Session2UserIdResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.head)
}

// repeated .YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.Speaker result = 2;
int YouMeVoice_Command_Session2UserIdResponse::result_size() const {
  return result_.size();
}
void YouMeVoice_Command_Session2UserIdResponse::clear_result() {
  result_.Clear();
}
const ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker& YouMeVoice_Command_Session2UserIdResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_.Get(index);
}
::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker* YouMeVoice_Command_Session2UserIdResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_.Mutable(index);
}
::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker* YouMeVoice_Command_Session2UserIdResponse::add_result() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker >*
YouMeVoice_Command_Session2UserIdResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return &result_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Command_Session2UserIdResponse_Speaker >&
YouMeVoice_Command_Session2UserIdResponse::result() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Session2UserIdResponse.result)
  return result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicInitRequest::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kModeFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kRoomIdFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kMaxNumFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kTalkTimeOutFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kJudgeTimeOutFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kJsonStrFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kNotifyFlagFieldNumber;
const int YouMeVoice_Command_Fight4MicInitRequest::kMicEnableFlagFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicInitRequest::YouMeVoice_Command_Fight4MicInitRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
}

void YouMeVoice_Command_Fight4MicInitRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicInitRequest::YouMeVoice_Command_Fight4MicInitRequest(const YouMeVoice_Command_Fight4MicInitRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
}

void YouMeVoice_Command_Fight4MicInitRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  mode_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  max_num_ = 0;
  talk_time_out_ = 0;
  judge_time_out_ = 0;
  json_str_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_flag_ = 0;
  mic_enable_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicInitRequest::~YouMeVoice_Command_Fight4MicInitRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicInitRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicInitRequest& YouMeVoice_Command_Fight4MicInitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicInitRequest* YouMeVoice_Command_Fight4MicInitRequest::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicInitRequest* YouMeVoice_Command_Fight4MicInitRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicInitRequest* n = new YouMeVoice_Command_Fight4MicInitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicInitRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Fight4MicInitRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(session_id_, mode_);
    ZR_(max_num_, talk_time_out_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    judge_time_out_ = 0;
    if (has_json_str()) {
      json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(notify_flag_, mic_enable_flag_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicInitRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // required int32 mode = 3;
      case 3: {
        if (tag == 24) {
         parse_mode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_id;
        break;
      }

      // optional string room_id = 4;
      case 4: {
        if (tag == 34) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_num;
        break;
      }

      // optional int32 max_num = 5;
      case 5: {
        if (tag == 40) {
         parse_max_num:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_)));
          set_has_max_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_talk_time_out;
        break;
      }

      // optional int32 talk_time_out = 6;
      case 6: {
        if (tag == 48) {
         parse_talk_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_out_)));
          set_has_talk_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_judge_time_out;
        break;
      }

      // optional int32 judge_time_out = 7;
      case 7: {
        if (tag == 56) {
         parse_judge_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &judge_time_out_)));
          set_has_judge_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_json_str;
        break;
      }

      // optional string json_str = 8;
      case 8: {
        if (tag == 66) {
         parse_json_str:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_notify_flag;
        break;
      }

      // optional int32 notify_flag = 9;
      case 9: {
        if (tag == 72) {
         parse_notify_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_flag_)));
          set_has_notify_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mic_enable_flag;
        break;
      }

      // optional int32 mic_enable_flag = 10;
      case 10: {
        if (tag == 80) {
         parse_mic_enable_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_enable_flag_)));
          set_has_mic_enable_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicInitRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // required int32 mode = 3;
  if (has_mode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode(), output);
  }

  // optional string room_id = 4;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_id(), output);
  }

  // optional int32 max_num = 5;
  if (has_max_num()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_num(), output);
  }

  // optional int32 talk_time_out = 6;
  if (has_talk_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->talk_time_out(), output);
  }

  // optional int32 judge_time_out = 7;
  if (has_judge_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->judge_time_out(), output);
  }

  // optional string json_str = 8;
  if (has_json_str()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->json_str(), output);
  }

  // optional int32 notify_flag = 9;
  if (has_notify_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(9, this->notify_flag(), output);
  }

  // optional int32 mic_enable_flag = 10;
  if (has_mic_enable_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(10, this->mic_enable_flag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest)
}

int YouMeVoice_Command_Fight4MicInitRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_mode()) {
    // required int32 mode = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->mode());
  }

  return total_size;
}
int YouMeVoice_Command_Fight4MicInitRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 mode = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->mode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 250u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 max_num = 5;
    if (has_max_num()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->max_num());
    }

    // optional int32 talk_time_out = 6;
    if (has_talk_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time_out());
    }

    // optional int32 judge_time_out = 7;
    if (has_judge_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->judge_time_out());
    }

    // optional string json_str = 8;
    if (has_json_str()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 notify_flag = 9;
    if (has_notify_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_flag());
    }

    // optional int32 mic_enable_flag = 10;
    if (has_mic_enable_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_enable_flag());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicInitRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicInitRequest*>(&from));
}

void YouMeVoice_Command_Fight4MicInitRequest::MergeFrom(const YouMeVoice_Command_Fight4MicInitRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_max_num()) {
      set_max_num(from.max_num());
    }
    if (from.has_talk_time_out()) {
      set_talk_time_out(from.talk_time_out());
    }
    if (from.has_judge_time_out()) {
      set_judge_time_out(from.judge_time_out());
    }
    if (from.has_json_str()) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notify_flag()) {
      set_notify_flag(from.notify_flag());
    }
    if (from.has_mic_enable_flag()) {
      set_mic_enable_flag(from.mic_enable_flag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicInitRequest::CopyFrom(const YouMeVoice_Command_Fight4MicInitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicInitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicInitRequest::Swap(YouMeVoice_Command_Fight4MicInitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicInitRequest::InternalSwap(YouMeVoice_Command_Fight4MicInitRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  std::swap(mode_, other->mode_);
  room_id_.Swap(&other->room_id_);
  std::swap(max_num_, other->max_num_);
  std::swap(talk_time_out_, other->talk_time_out_);
  std::swap(judge_time_out_, other->judge_time_out_);
  json_str_.Swap(&other->json_str_);
  std::swap(notify_flag_, other->notify_flag_);
  std::swap(mic_enable_flag_, other->mic_enable_flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicInitRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicInitRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Fight4MicInitRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Fight4MicInitRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicInitRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicInitRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_Fight4MicInitRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.session_id)
}

// required int32 mode = 3;
bool YouMeVoice_Command_Fight4MicInitRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mode)
  return mode_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mode)
}

// optional string room_id = 4;
bool YouMeVoice_Command_Fight4MicInitRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicInitRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicInitRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicInitRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.room_id)
}

// optional int32 max_num = 5;
bool YouMeVoice_Command_Fight4MicInitRequest::has_max_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_max_num() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_max_num() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_max_num() {
  max_num_ = 0;
  clear_has_max_num();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::max_num() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.max_num)
  return max_num_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_max_num(::youmecommon::protobuf::int32 value) {
  set_has_max_num();
  max_num_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.max_num)
}

// optional int32 talk_time_out = 6;
bool YouMeVoice_Command_Fight4MicInitRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.talk_time_out)
  return talk_time_out_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.talk_time_out)
}

// optional int32 judge_time_out = 7;
bool YouMeVoice_Command_Fight4MicInitRequest::has_judge_time_out() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_judge_time_out() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_judge_time_out() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_judge_time_out() {
  judge_time_out_ = 0;
  clear_has_judge_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::judge_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.judge_time_out)
  return judge_time_out_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_judge_time_out(::youmecommon::protobuf::int32 value) {
  set_has_judge_time_out();
  judge_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.judge_time_out)
}

// optional string json_str = 8;
bool YouMeVoice_Command_Fight4MicInitRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
 const ::std::string& YouMeVoice_Command_Fight4MicInitRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}
 ::std::string* YouMeVoice_Command_Fight4MicInitRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicInitRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.json_str)
}

// optional int32 notify_flag = 9;
bool YouMeVoice_Command_Fight4MicInitRequest::has_notify_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_notify_flag() {
  _has_bits_[0] |= 0x00000100u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_notify_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_notify_flag() {
  notify_flag_ = 0;
  clear_has_notify_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::notify_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.notify_flag)
  return notify_flag_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_notify_flag(::youmecommon::protobuf::int32 value) {
  set_has_notify_flag();
  notify_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.notify_flag)
}

// optional int32 mic_enable_flag = 10;
bool YouMeVoice_Command_Fight4MicInitRequest::has_mic_enable_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void YouMeVoice_Command_Fight4MicInitRequest::set_has_mic_enable_flag() {
  _has_bits_[0] |= 0x00000200u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_has_mic_enable_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
void YouMeVoice_Command_Fight4MicInitRequest::clear_mic_enable_flag() {
  mic_enable_flag_ = 0;
  clear_has_mic_enable_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitRequest::mic_enable_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mic_enable_flag)
  return mic_enable_flag_;
}
 void YouMeVoice_Command_Fight4MicInitRequest::set_mic_enable_flag(::youmecommon::protobuf::int32 value) {
  set_has_mic_enable_flag();
  mic_enable_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitRequest.mic_enable_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicInitResponse::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicInitResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_Fight4MicInitResponse::kSessionIdFieldNumber;
const int YouMeVoice_Command_Fight4MicInitResponse::kRoomIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicInitResponse::YouMeVoice_Command_Fight4MicInitResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
}

void YouMeVoice_Command_Fight4MicInitResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicInitResponse::YouMeVoice_Command_Fight4MicInitResponse(const YouMeVoice_Command_Fight4MicInitResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
}

void YouMeVoice_Command_Fight4MicInitResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicInitResponse::~YouMeVoice_Command_Fight4MicInitResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicInitResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicInitResponse& YouMeVoice_Command_Fight4MicInitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicInitResponse* YouMeVoice_Command_Fight4MicInitResponse::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicInitResponse* YouMeVoice_Command_Fight4MicInitResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicInitResponse* n = new YouMeVoice_Command_Fight4MicInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicInitResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Fight4MicInitResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(error_code_, session_id_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicInitResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_id;
        break;
      }

      // optional string room_id = 4;
      case 4: {
        if (tag == 34) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicInitResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional string room_id = 4;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse)
}

int YouMeVoice_Command_Fight4MicInitResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicInitResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicInitResponse*>(&from));
}

void YouMeVoice_Command_Fight4MicInitResponse::MergeFrom(const YouMeVoice_Command_Fight4MicInitResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicInitResponse::CopyFrom(const YouMeVoice_Command_Fight4MicInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicInitResponse::Swap(YouMeVoice_Command_Fight4MicInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicInitResponse::InternalSwap(YouMeVoice_Command_Fight4MicInitResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicInitResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicInitResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Fight4MicInitResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicInitResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicInitResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicInitResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicInitResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicInitResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_Fight4MicInitResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicInitResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_Fight4MicInitResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_Fight4MicInitResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicInitResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicInitResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_Fight4MicInitResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.session_id)
}

// optional string room_id = 4;
bool YouMeVoice_Command_Fight4MicInitResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicInitResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicInitResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicInitResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicInitResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}
 void YouMeVoice_Command_Fight4MicInitResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}
 void YouMeVoice_Command_Fight4MicInitResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicInitResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicInitResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicInitResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicInitResponse.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicRequest::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_Fight4MicRequest::kRoomIdFieldNumber;
const int YouMeVoice_Command_Fight4MicRequest::kScoreFieldNumber;
const int YouMeVoice_Command_Fight4MicRequest::kJsonParamsFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicRequest::YouMeVoice_Command_Fight4MicRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
}

void YouMeVoice_Command_Fight4MicRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicRequest::YouMeVoice_Command_Fight4MicRequest(const YouMeVoice_Command_Fight4MicRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
}

void YouMeVoice_Command_Fight4MicRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = 0;
  json_params_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicRequest::~YouMeVoice_Command_Fight4MicRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_params_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicRequest& YouMeVoice_Command_Fight4MicRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicRequest* YouMeVoice_Command_Fight4MicRequest::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicRequest* YouMeVoice_Command_Fight4MicRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicRequest* n = new YouMeVoice_Command_Fight4MicRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Fight4MicRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(session_id_, score_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_json_params()) {
      json_params_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_id;
        break;
      }

      // optional string room_id = 3;
      case 3: {
        if (tag == 26) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (tag == 32) {
         parse_score:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_json_params;
        break;
      }

      // optional string json_params = 5;
      case 5: {
        if (tag == 42) {
         parse_json_params:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional string room_id = 3;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_id(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional string json_params = 5;
  if (has_json_params()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->json_params(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest)
}

int YouMeVoice_Command_Fight4MicRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional string json_params = 5;
    if (has_json_params()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_params());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicRequest*>(&from));
}

void YouMeVoice_Command_Fight4MicRequest::MergeFrom(const YouMeVoice_Command_Fight4MicRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_json_params()) {
      set_has_json_params();
      json_params_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_params_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicRequest::CopyFrom(const YouMeVoice_Command_Fight4MicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicRequest::Swap(YouMeVoice_Command_Fight4MicRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicRequest::InternalSwap(YouMeVoice_Command_Fight4MicRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(score_, other->score_);
  json_params_.Swap(&other->json_params_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Fight4MicRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Fight4MicRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_Fight4MicRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_Fight4MicRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.session_id)
}

// optional string room_id = 3;
bool YouMeVoice_Command_Fight4MicRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.room_id)
}

// optional int32 score = 4;
bool YouMeVoice_Command_Fight4MicRequest::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicRequest::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicRequest::score() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.score)
  return score_;
}
 void YouMeVoice_Command_Fight4MicRequest::set_score(::youmecommon::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.score)
}

// optional string json_params = 5;
bool YouMeVoice_Command_Fight4MicRequest::has_json_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_Fight4MicRequest::set_has_json_params() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_has_json_params() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_Fight4MicRequest::clear_json_params() {
  json_params_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_params();
}
 const ::std::string& YouMeVoice_Command_Fight4MicRequest::json_params() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
  return json_params_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicRequest::set_json_params(const ::std::string& value) {
  set_has_json_params();
  json_params_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}
 void YouMeVoice_Command_Fight4MicRequest::set_json_params(const char* value) {
  set_has_json_params();
  json_params_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}
 void YouMeVoice_Command_Fight4MicRequest::set_json_params(const char* value, size_t size) {
  set_has_json_params();
  json_params_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}
 ::std::string* YouMeVoice_Command_Fight4MicRequest::mutable_json_params() {
  set_has_json_params();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
  return json_params_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicRequest::release_json_params() {
  clear_has_json_params();
  return json_params_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicRequest::set_allocated_json_params(::std::string* json_params) {
  if (json_params != NULL) {
    set_has_json_params();
  } else {
    clear_has_json_params();
  }
  json_params_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_params);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicRequest.json_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicResponse::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_Fight4MicResponse::kSessionIdFieldNumber;
const int YouMeVoice_Command_Fight4MicResponse::kRoomIdFieldNumber;
const int YouMeVoice_Command_Fight4MicResponse::kMicEnableFlagFieldNumber;
const int YouMeVoice_Command_Fight4MicResponse::kTalkTimeFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicResponse::YouMeVoice_Command_Fight4MicResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
}

void YouMeVoice_Command_Fight4MicResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicResponse::YouMeVoice_Command_Fight4MicResponse(const YouMeVoice_Command_Fight4MicResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
}

void YouMeVoice_Command_Fight4MicResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_enable_flag_ = 0;
  talk_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicResponse::~YouMeVoice_Command_Fight4MicResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicResponse& YouMeVoice_Command_Fight4MicResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicResponse* YouMeVoice_Command_Fight4MicResponse::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicResponse* YouMeVoice_Command_Fight4MicResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicResponse* n = new YouMeVoice_Command_Fight4MicResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Fight4MicResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(error_code_, session_id_);
    ZR_(mic_enable_flag_, talk_time_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_id;
        break;
      }

      // optional string room_id = 4;
      case 4: {
        if (tag == 34) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mic_enable_flag;
        break;
      }

      // optional int32 mic_enable_flag = 5;
      case 5: {
        if (tag == 40) {
         parse_mic_enable_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_enable_flag_)));
          set_has_mic_enable_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_talk_time;
        break;
      }

      // optional int32 talk_time = 6;
      case 6: {
        if (tag == 48) {
         parse_talk_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_)));
          set_has_talk_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional string room_id = 4;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_id(), output);
  }

  // optional int32 mic_enable_flag = 5;
  if (has_mic_enable_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->mic_enable_flag(), output);
  }

  // optional int32 talk_time = 6;
  if (has_talk_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->talk_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse)
}

int YouMeVoice_Command_Fight4MicResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 mic_enable_flag = 5;
    if (has_mic_enable_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_enable_flag());
    }

    // optional int32 talk_time = 6;
    if (has_talk_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicResponse*>(&from));
}

void YouMeVoice_Command_Fight4MicResponse::MergeFrom(const YouMeVoice_Command_Fight4MicResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_mic_enable_flag()) {
      set_mic_enable_flag(from.mic_enable_flag());
    }
    if (from.has_talk_time()) {
      set_talk_time(from.talk_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicResponse::CopyFrom(const YouMeVoice_Command_Fight4MicResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicResponse::Swap(YouMeVoice_Command_Fight4MicResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicResponse::InternalSwap(YouMeVoice_Command_Fight4MicResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(mic_enable_flag_, other->mic_enable_flag_);
  std::swap(talk_time_, other->talk_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Fight4MicResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_Fight4MicResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_Fight4MicResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_Fight4MicResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_Fight4MicResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.session_id)
}

// optional string room_id = 4;
bool YouMeVoice_Command_Fight4MicResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}
 void YouMeVoice_Command_Fight4MicResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}
 void YouMeVoice_Command_Fight4MicResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.room_id)
}

// optional int32 mic_enable_flag = 5;
bool YouMeVoice_Command_Fight4MicResponse::has_mic_enable_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_Fight4MicResponse::set_has_mic_enable_flag() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_has_mic_enable_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_mic_enable_flag() {
  mic_enable_flag_ = 0;
  clear_has_mic_enable_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::mic_enable_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.mic_enable_flag)
  return mic_enable_flag_;
}
 void YouMeVoice_Command_Fight4MicResponse::set_mic_enable_flag(::youmecommon::protobuf::int32 value) {
  set_has_mic_enable_flag();
  mic_enable_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.mic_enable_flag)
}

// optional int32 talk_time = 6;
bool YouMeVoice_Command_Fight4MicResponse::has_talk_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_Fight4MicResponse::set_has_talk_time() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_has_talk_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_Fight4MicResponse::clear_talk_time() {
  talk_time_ = 0;
  clear_has_talk_time();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicResponse::talk_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.talk_time)
  return talk_time_;
}
 void YouMeVoice_Command_Fight4MicResponse::set_talk_time(::youmecommon::protobuf::int32 value) {
  set_has_talk_time();
  talk_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicResponse.talk_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicDeinitRequest::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicDeinitRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_Fight4MicDeinitRequest::kRoomIdFieldNumber;
const int YouMeVoice_Command_Fight4MicDeinitRequest::kJsonStrFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicDeinitRequest::YouMeVoice_Command_Fight4MicDeinitRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
}

void YouMeVoice_Command_Fight4MicDeinitRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicDeinitRequest::YouMeVoice_Command_Fight4MicDeinitRequest(const YouMeVoice_Command_Fight4MicDeinitRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
}

void YouMeVoice_Command_Fight4MicDeinitRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicDeinitRequest::~YouMeVoice_Command_Fight4MicDeinitRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicDeinitRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicDeinitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicDeinitRequest& YouMeVoice_Command_Fight4MicDeinitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicDeinitRequest* YouMeVoice_Command_Fight4MicDeinitRequest::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicDeinitRequest* YouMeVoice_Command_Fight4MicDeinitRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicDeinitRequest* n = new YouMeVoice_Command_Fight4MicDeinitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicDeinitRequest::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    session_id_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_json_str()) {
      json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicDeinitRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_id;
        break;
      }

      // optional string room_id = 3;
      case 3: {
        if (tag == 26) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_json_str;
        break;
      }

      // optional string json_str = 4;
      case 4: {
        if (tag == 34) {
         parse_json_str:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicDeinitRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional string room_id = 3;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_id(), output);
  }

  // optional string json_str = 4;
  if (has_json_str()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->json_str(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest)
}

int YouMeVoice_Command_Fight4MicDeinitRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional string json_str = 4;
    if (has_json_str()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicDeinitRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicDeinitRequest*>(&from));
}

void YouMeVoice_Command_Fight4MicDeinitRequest::MergeFrom(const YouMeVoice_Command_Fight4MicDeinitRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_json_str()) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicDeinitRequest::CopyFrom(const YouMeVoice_Command_Fight4MicDeinitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicDeinitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicDeinitRequest::Swap(YouMeVoice_Command_Fight4MicDeinitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicDeinitRequest::InternalSwap(YouMeVoice_Command_Fight4MicDeinitRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  json_str_.Swap(&other->json_str_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicDeinitRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicDeinitRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Fight4MicDeinitRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Fight4MicDeinitRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicDeinitRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Fight4MicDeinitRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_Fight4MicDeinitRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicDeinitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.session_id)
}

// optional string room_id = 3;
bool YouMeVoice_Command_Fight4MicDeinitRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicDeinitRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.room_id)
}

// optional string json_str = 4;
bool YouMeVoice_Command_Fight4MicDeinitRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicDeinitRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
 const ::std::string& YouMeVoice_Command_Fight4MicDeinitRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}
 ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicDeinitRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicDeinitRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitRequest.json_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicDeinitResponse::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicDeinitResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_Fight4MicDeinitResponse::kSessionIdFieldNumber;
const int YouMeVoice_Command_Fight4MicDeinitResponse::kRoomIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicDeinitResponse::YouMeVoice_Command_Fight4MicDeinitResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
}

void YouMeVoice_Command_Fight4MicDeinitResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicDeinitResponse::YouMeVoice_Command_Fight4MicDeinitResponse(const YouMeVoice_Command_Fight4MicDeinitResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
}

void YouMeVoice_Command_Fight4MicDeinitResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicDeinitResponse::~YouMeVoice_Command_Fight4MicDeinitResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicDeinitResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicDeinitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicDeinitResponse& YouMeVoice_Command_Fight4MicDeinitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicDeinitResponse* YouMeVoice_Command_Fight4MicDeinitResponse::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicDeinitResponse* YouMeVoice_Command_Fight4MicDeinitResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicDeinitResponse* n = new YouMeVoice_Command_Fight4MicDeinitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicDeinitResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Fight4MicDeinitResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(error_code_, session_id_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicDeinitResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_id;
        break;
      }

      // optional string room_id = 4;
      case 4: {
        if (tag == 34) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicDeinitResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional string room_id = 4;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse)
}

int YouMeVoice_Command_Fight4MicDeinitResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicDeinitResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicDeinitResponse*>(&from));
}

void YouMeVoice_Command_Fight4MicDeinitResponse::MergeFrom(const YouMeVoice_Command_Fight4MicDeinitResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicDeinitResponse::CopyFrom(const YouMeVoice_Command_Fight4MicDeinitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicDeinitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicDeinitResponse::Swap(YouMeVoice_Command_Fight4MicDeinitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicDeinitResponse::InternalSwap(YouMeVoice_Command_Fight4MicDeinitResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicDeinitResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicDeinitResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Fight4MicDeinitResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicDeinitResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicDeinitResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicDeinitResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_Fight4MicDeinitResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicDeinitResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_Fight4MicDeinitResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_Fight4MicDeinitResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicDeinitResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_Fight4MicDeinitResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.session_id)
}

// optional string room_id = 4;
bool YouMeVoice_Command_Fight4MicDeinitResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicDeinitResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicDeinitResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicDeinitResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}
 void YouMeVoice_Command_Fight4MicDeinitResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}
 void YouMeVoice_Command_Fight4MicDeinitResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicDeinitResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicDeinitResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicDeinitResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicDeinitResponse.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Fight4MicNotifyRequest::kHeadFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kModeFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kEventTypeFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kJsonStrFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kMicRightFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kRoomIdFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kUserIdFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kMicEnableFlagFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kTalkTimeFieldNumber;
const int YouMeVoice_Command_Fight4MicNotifyRequest::kIsMicFlagFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Fight4MicNotifyRequest::YouMeVoice_Command_Fight4MicNotifyRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
}

void YouMeVoice_Command_Fight4MicNotifyRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Fight4MicNotifyRequest::YouMeVoice_Command_Fight4MicNotifyRequest(const YouMeVoice_Command_Fight4MicNotifyRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
}

void YouMeVoice_Command_Fight4MicNotifyRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  mode_ = 0;
  event_type_ = 0;
  json_str_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_right_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  mic_enable_flag_ = 0;
  talk_time_ = 0;
  is_mic_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Fight4MicNotifyRequest::~YouMeVoice_Command_Fight4MicNotifyRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
  SharedDtor();
}

void YouMeVoice_Command_Fight4MicNotifyRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Fight4MicNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Fight4MicNotifyRequest& YouMeVoice_Command_Fight4MicNotifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Fight4MicNotifyRequest* YouMeVoice_Command_Fight4MicNotifyRequest::default_instance_ = NULL;

YouMeVoice_Command_Fight4MicNotifyRequest* YouMeVoice_Command_Fight4MicNotifyRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Fight4MicNotifyRequest* n = new YouMeVoice_Command_Fight4MicNotifyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Fight4MicNotifyRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Fight4MicNotifyRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(mode_, event_type_);
    ZR_(mic_right_, mic_enable_flag_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_json_str()) {
      json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(talk_time_, is_mic_flag_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Fight4MicNotifyRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional int32 mode = 2;
      case 2: {
        if (tag == 16) {
         parse_mode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 3;
      case 3: {
        if (tag == 24) {
         parse_event_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_json_str;
        break;
      }

      // optional string json_str = 4;
      case 4: {
        if (tag == 34) {
         parse_json_str:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mic_right;
        break;
      }

      // optional int32 mic_right = 5;
      case 5: {
        if (tag == 40) {
         parse_mic_right:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_right_)));
          set_has_mic_right();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_room_id;
        break;
      }

      // optional string room_id = 6;
      case 6: {
        if (tag == 50) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_user_id;
        break;
      }

      // optional string user_id = 7;
      case 7: {
        if (tag == 58) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mic_enable_flag;
        break;
      }

      // optional int32 mic_enable_flag = 8;
      case 8: {
        if (tag == 64) {
         parse_mic_enable_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mic_enable_flag_)));
          set_has_mic_enable_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_talk_time;
        break;
      }

      // optional int32 talk_time = 9;
      case 9: {
        if (tag == 72) {
         parse_talk_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_)));
          set_has_talk_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_mic_flag;
        break;
      }

      // optional int32 is_mic_flag = 10;
      case 10: {
        if (tag == 80) {
         parse_is_mic_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_mic_flag_)));
          set_has_is_mic_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_Fight4MicNotifyRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 mode = 2;
  if (has_mode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }

  // optional int32 event_type = 3;
  if (has_event_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_type(), output);
  }

  // optional string json_str = 4;
  if (has_json_str()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->json_str(), output);
  }

  // optional int32 mic_right = 5;
  if (has_mic_right()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->mic_right(), output);
  }

  // optional string room_id = 6;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->room_id(), output);
  }

  // optional string user_id = 7;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->user_id(), output);
  }

  // optional int32 mic_enable_flag = 8;
  if (has_mic_enable_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(8, this->mic_enable_flag(), output);
  }

  // optional int32 talk_time = 9;
  if (has_talk_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(9, this->talk_time(), output);
  }

  // optional int32 is_mic_flag = 10;
  if (has_is_mic_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(10, this->is_mic_flag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest)
}

int YouMeVoice_Command_Fight4MicNotifyRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional string json_str = 4;
    if (has_json_str()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

    // optional int32 mic_right = 5;
    if (has_mic_right()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_right());
    }

    // optional string room_id = 6;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional string user_id = 7;
    if (has_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int32 mic_enable_flag = 8;
    if (has_mic_enable_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mic_enable_flag());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 talk_time = 9;
    if (has_talk_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time());
    }

    // optional int32 is_mic_flag = 10;
    if (has_is_mic_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->is_mic_flag());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Fight4MicNotifyRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Fight4MicNotifyRequest*>(&from));
}

void YouMeVoice_Command_Fight4MicNotifyRequest::MergeFrom(const YouMeVoice_Command_Fight4MicNotifyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_json_str()) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
    if (from.has_mic_right()) {
      set_mic_right(from.mic_right());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_mic_enable_flag()) {
      set_mic_enable_flag(from.mic_enable_flag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_talk_time()) {
      set_talk_time(from.talk_time());
    }
    if (from.has_is_mic_flag()) {
      set_is_mic_flag(from.is_mic_flag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Fight4MicNotifyRequest::CopyFrom(const YouMeVoice_Command_Fight4MicNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Fight4MicNotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Fight4MicNotifyRequest::Swap(YouMeVoice_Command_Fight4MicNotifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Fight4MicNotifyRequest::InternalSwap(YouMeVoice_Command_Fight4MicNotifyRequest* other) {
  std::swap(head_, other->head_);
  std::swap(mode_, other->mode_);
  std::swap(event_type_, other->event_type_);
  json_str_.Swap(&other->json_str_);
  std::swap(mic_right_, other->mic_right_);
  room_id_.Swap(&other->room_id_);
  user_id_.Swap(&other->user_id_);
  std::swap(mic_enable_flag_, other->mic_enable_flag_);
  std::swap(talk_time_, other->talk_time_);
  std::swap(is_mic_flag_, other->is_mic_flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Fight4MicNotifyRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Fight4MicNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Fight4MicNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Fight4MicNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.head)
}

// optional int32 mode = 2;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mode)
  return mode_;
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mode)
}

// optional int32 event_type = 3;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::event_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.event_type)
  return event_type_;
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_event_type(::youmecommon::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.event_type)
}

// optional string json_str = 4;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
 const ::std::string& YouMeVoice_Command_Fight4MicNotifyRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}
 ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.json_str)
}

// optional int32 mic_right = 5;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_mic_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_mic_right() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_mic_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_mic_right() {
  mic_right_ = 0;
  clear_has_mic_right();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::mic_right() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_right)
  return mic_right_;
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_mic_right(::youmecommon::protobuf::int32 value) {
  set_has_mic_right();
  mic_right_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_right)
}

// optional string room_id = 6;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicNotifyRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.room_id)
}

// optional string user_id = 7;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Command_Fight4MicNotifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}
 ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Fight4MicNotifyRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.user_id)
}

// optional int32 mic_enable_flag = 8;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_mic_enable_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_mic_enable_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_mic_enable_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_mic_enable_flag() {
  mic_enable_flag_ = 0;
  clear_has_mic_enable_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::mic_enable_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_enable_flag)
  return mic_enable_flag_;
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_mic_enable_flag(::youmecommon::protobuf::int32 value) {
  set_has_mic_enable_flag();
  mic_enable_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.mic_enable_flag)
}

// optional int32 talk_time = 9;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_talk_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_talk_time() {
  _has_bits_[0] |= 0x00000100u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_talk_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_talk_time() {
  talk_time_ = 0;
  clear_has_talk_time();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::talk_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.talk_time)
  return talk_time_;
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_talk_time(::youmecommon::protobuf::int32 value) {
  set_has_talk_time();
  talk_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.talk_time)
}

// optional int32 is_mic_flag = 10;
bool YouMeVoice_Command_Fight4MicNotifyRequest::has_is_mic_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::set_has_is_mic_flag() {
  _has_bits_[0] |= 0x00000200u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_has_is_mic_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
void YouMeVoice_Command_Fight4MicNotifyRequest::clear_is_mic_flag() {
  is_mic_flag_ = 0;
  clear_has_is_mic_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Fight4MicNotifyRequest::is_mic_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.is_mic_flag)
  return is_mic_flag_;
}
 void YouMeVoice_Command_Fight4MicNotifyRequest::set_is_mic_flag(::youmecommon::protobuf::int32 value) {
  set_has_is_mic_flag();
  is_mic_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Fight4MicNotifyRequest.is_mic_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_ReleaseMicRequest::kHeadFieldNumber;
const int YouMeVoice_Command_ReleaseMicRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_ReleaseMicRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_ReleaseMicRequest::YouMeVoice_Command_ReleaseMicRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
}

void YouMeVoice_Command_ReleaseMicRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_ReleaseMicRequest::YouMeVoice_Command_ReleaseMicRequest(const YouMeVoice_Command_ReleaseMicRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
}

void YouMeVoice_Command_ReleaseMicRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_ReleaseMicRequest::~YouMeVoice_Command_ReleaseMicRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
  SharedDtor();
}

void YouMeVoice_Command_ReleaseMicRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_ReleaseMicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_ReleaseMicRequest& YouMeVoice_Command_ReleaseMicRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_ReleaseMicRequest* YouMeVoice_Command_ReleaseMicRequest::default_instance_ = NULL;

YouMeVoice_Command_ReleaseMicRequest* YouMeVoice_Command_ReleaseMicRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_ReleaseMicRequest* n = new YouMeVoice_Command_ReleaseMicRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_ReleaseMicRequest::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    session_id_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_ReleaseMicRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_id;
        break;
      }

      // optional string room_id = 3;
      case 3: {
        if (tag == 26) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_ReleaseMicRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional string room_id = 3;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest)
}

int YouMeVoice_Command_ReleaseMicRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_ReleaseMicRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_ReleaseMicRequest*>(&from));
}

void YouMeVoice_Command_ReleaseMicRequest::MergeFrom(const YouMeVoice_Command_ReleaseMicRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_ReleaseMicRequest::CopyFrom(const YouMeVoice_Command_ReleaseMicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_ReleaseMicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_ReleaseMicRequest::Swap(YouMeVoice_Command_ReleaseMicRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_ReleaseMicRequest::InternalSwap(YouMeVoice_Command_ReleaseMicRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_ReleaseMicRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_ReleaseMicRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_ReleaseMicRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_ReleaseMicRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_ReleaseMicRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_ReleaseMicRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_ReleaseMicRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_ReleaseMicRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_ReleaseMicRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_ReleaseMicRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_ReleaseMicRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_ReleaseMicRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_ReleaseMicRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_ReleaseMicRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ReleaseMicRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_ReleaseMicRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.session_id)
}

// optional string room_id = 3;
bool YouMeVoice_Command_ReleaseMicRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_ReleaseMicRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_ReleaseMicRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_ReleaseMicRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_ReleaseMicRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ReleaseMicRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}
 void YouMeVoice_Command_ReleaseMicRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}
 void YouMeVoice_Command_ReleaseMicRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}
 ::std::string* YouMeVoice_Command_ReleaseMicRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_ReleaseMicRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ReleaseMicRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicRequest.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_ReleaseMicResponse::kHeadFieldNumber;
const int YouMeVoice_Command_ReleaseMicResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_ReleaseMicResponse::kSessionIdFieldNumber;
const int YouMeVoice_Command_ReleaseMicResponse::kRoomIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_ReleaseMicResponse::YouMeVoice_Command_ReleaseMicResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
}

void YouMeVoice_Command_ReleaseMicResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_ReleaseMicResponse::YouMeVoice_Command_ReleaseMicResponse(const YouMeVoice_Command_ReleaseMicResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
}

void YouMeVoice_Command_ReleaseMicResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_ReleaseMicResponse::~YouMeVoice_Command_ReleaseMicResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
  SharedDtor();
}

void YouMeVoice_Command_ReleaseMicResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_ReleaseMicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_ReleaseMicResponse& YouMeVoice_Command_ReleaseMicResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_ReleaseMicResponse* YouMeVoice_Command_ReleaseMicResponse::default_instance_ = NULL;

YouMeVoice_Command_ReleaseMicResponse* YouMeVoice_Command_ReleaseMicResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_ReleaseMicResponse* n = new YouMeVoice_Command_ReleaseMicResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_ReleaseMicResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_ReleaseMicResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(error_code_, session_id_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_ReleaseMicResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_id;
        break;
      }

      // optional string room_id = 4;
      case 4: {
        if (tag == 34) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_ReleaseMicResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional string room_id = 4;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse)
}

int YouMeVoice_Command_ReleaseMicResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_ReleaseMicResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_ReleaseMicResponse*>(&from));
}

void YouMeVoice_Command_ReleaseMicResponse::MergeFrom(const YouMeVoice_Command_ReleaseMicResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_ReleaseMicResponse::CopyFrom(const YouMeVoice_Command_ReleaseMicResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_ReleaseMicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_ReleaseMicResponse::Swap(YouMeVoice_Command_ReleaseMicResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_ReleaseMicResponse::InternalSwap(YouMeVoice_Command_ReleaseMicResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_ReleaseMicResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_ReleaseMicResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_ReleaseMicResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_ReleaseMicResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_ReleaseMicResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ReleaseMicResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_ReleaseMicResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_ReleaseMicResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_ReleaseMicResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_ReleaseMicResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ReleaseMicResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_ReleaseMicResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_ReleaseMicResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_ReleaseMicResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_ReleaseMicResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_ReleaseMicResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.session_id)
}

// optional string room_id = 4;
bool YouMeVoice_Command_ReleaseMicResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_ReleaseMicResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_ReleaseMicResponse::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_ReleaseMicResponse::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ReleaseMicResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}
 void YouMeVoice_Command_ReleaseMicResponse::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}
 void YouMeVoice_Command_ReleaseMicResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}
 ::std::string* YouMeVoice_Command_ReleaseMicResponse::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_ReleaseMicResponse::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_ReleaseMicResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_ReleaseMicResponse.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteInitRequest::kHeadFieldNumber;
const int YouMeVoice_Command_InviteInitRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_InviteInitRequest::kConnectTimeOutFieldNumber;
const int YouMeVoice_Command_InviteInitRequest::kTalkTimeOutFieldNumber;
const int YouMeVoice_Command_InviteInitRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteInitRequest::YouMeVoice_Command_InviteInitRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
}

void YouMeVoice_Command_InviteInitRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteInitRequest::YouMeVoice_Command_InviteInitRequest(const YouMeVoice_Command_InviteInitRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
}

void YouMeVoice_Command_InviteInitRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  connect_time_out_ = 0;
  talk_time_out_ = 0;
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteInitRequest::~YouMeVoice_Command_InviteInitRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
  SharedDtor();
}

void YouMeVoice_Command_InviteInitRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteInitRequest& YouMeVoice_Command_InviteInitRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteInitRequest* YouMeVoice_Command_InviteInitRequest::default_instance_ = NULL;

YouMeVoice_Command_InviteInitRequest* YouMeVoice_Command_InviteInitRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteInitRequest* n = new YouMeVoice_Command_InviteInitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteInitRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_InviteInitRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(session_id_, connect_time_out_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    talk_time_out_ = 0;
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteInitRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_connect_time_out;
        break;
      }

      // optional int32 connect_time_out = 3;
      case 3: {
        if (tag == 24) {
         parse_connect_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_time_out_)));
          set_has_connect_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_talk_time_out;
        break;
      }

      // optional int32 talk_time_out = 4;
      case 4: {
        if (tag == 32) {
         parse_talk_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_out_)));
          set_has_talk_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_room_id;
        break;
      }

      // optional string room_id = 5;
      case 5: {
        if (tag == 42) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteInitRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional int32 connect_time_out = 3;
  if (has_connect_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->connect_time_out(), output);
  }

  // optional int32 talk_time_out = 4;
  if (has_talk_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->talk_time_out(), output);
  }

  // optional string room_id = 5;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->room_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteInitRequest)
}

int YouMeVoice_Command_InviteInitRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 connect_time_out = 3;
    if (has_connect_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_time_out());
    }

    // optional int32 talk_time_out = 4;
    if (has_talk_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time_out());
    }

    // optional string room_id = 5;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteInitRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteInitRequest*>(&from));
}

void YouMeVoice_Command_InviteInitRequest::MergeFrom(const YouMeVoice_Command_InviteInitRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_connect_time_out()) {
      set_connect_time_out(from.connect_time_out());
    }
    if (from.has_talk_time_out()) {
      set_talk_time_out(from.talk_time_out());
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteInitRequest::CopyFrom(const YouMeVoice_Command_InviteInitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteInitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteInitRequest::Swap(YouMeVoice_Command_InviteInitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteInitRequest::InternalSwap(YouMeVoice_Command_InviteInitRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  std::swap(connect_time_out_, other->connect_time_out_);
  std::swap(talk_time_out_, other->talk_time_out_);
  room_id_.Swap(&other->room_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteInitRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteInitRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteInitRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_InviteInitRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteInitRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteInitRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteInitRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_InviteInitRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteInitRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteInitRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteInitRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_InviteInitRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteInitRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteInitRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteInitRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_InviteInitRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.session_id)
}

// optional int32 connect_time_out = 3;
bool YouMeVoice_Command_InviteInitRequest::has_connect_time_out() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_InviteInitRequest::set_has_connect_time_out() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_InviteInitRequest::clear_has_connect_time_out() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_InviteInitRequest::clear_connect_time_out() {
  connect_time_out_ = 0;
  clear_has_connect_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitRequest::connect_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.connect_time_out)
  return connect_time_out_;
}
 void YouMeVoice_Command_InviteInitRequest::set_connect_time_out(::youmecommon::protobuf::int32 value) {
  set_has_connect_time_out();
  connect_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.connect_time_out)
}

// optional int32 talk_time_out = 4;
bool YouMeVoice_Command_InviteInitRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_InviteInitRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_InviteInitRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_InviteInitRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.talk_time_out)
  return talk_time_out_;
}
 void YouMeVoice_Command_InviteInitRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.talk_time_out)
}

// optional string room_id = 5;
bool YouMeVoice_Command_InviteInitRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_InviteInitRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_InviteInitRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_InviteInitRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_InviteInitRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteInitRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}
 void YouMeVoice_Command_InviteInitRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}
 void YouMeVoice_Command_InviteInitRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}
 ::std::string* YouMeVoice_Command_InviteInitRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteInitRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteInitRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteInitRequest.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteInitResponse::kHeadFieldNumber;
const int YouMeVoice_Command_InviteInitResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_InviteInitResponse::kSessionIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteInitResponse::YouMeVoice_Command_InviteInitResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
}

void YouMeVoice_Command_InviteInitResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteInitResponse::YouMeVoice_Command_InviteInitResponse(const YouMeVoice_Command_InviteInitResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
}

void YouMeVoice_Command_InviteInitResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteInitResponse::~YouMeVoice_Command_InviteInitResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
  SharedDtor();
}

void YouMeVoice_Command_InviteInitResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteInitResponse& YouMeVoice_Command_InviteInitResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteInitResponse* YouMeVoice_Command_InviteInitResponse::default_instance_ = NULL;

YouMeVoice_Command_InviteInitResponse* YouMeVoice_Command_InviteInitResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteInitResponse* n = new YouMeVoice_Command_InviteInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteInitResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_InviteInitResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(error_code_, session_id_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteInitResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteInitResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteInitResponse)
}

int YouMeVoice_Command_InviteInitResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteInitResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteInitResponse*>(&from));
}

void YouMeVoice_Command_InviteInitResponse::MergeFrom(const YouMeVoice_Command_InviteInitResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteInitResponse::CopyFrom(const YouMeVoice_Command_InviteInitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteInitResponse::Swap(YouMeVoice_Command_InviteInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteInitResponse::InternalSwap(YouMeVoice_Command_InviteInitResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteInitResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteInitResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteInitResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_InviteInitResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteInitResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteInitResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteInitResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteInitResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteInitResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteInitResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteInitResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_InviteInitResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteInitResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteInitResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteInitResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_InviteInitResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_InviteInitResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_InviteInitResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_InviteInitResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_InviteInitResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteInitResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_InviteInitResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteInitResponse.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteRequest::kHeadFieldNumber;
const int YouMeVoice_Command_InviteRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_InviteRequest::kToUserIdFieldNumber;
const int YouMeVoice_Command_InviteRequest::kRoomIdFieldNumber;
const int YouMeVoice_Command_InviteRequest::kConnectTimeOutFieldNumber;
const int YouMeVoice_Command_InviteRequest::kTalkTimeOutFieldNumber;
const int YouMeVoice_Command_InviteRequest::kNotifyFlagFieldNumber;
const int YouMeVoice_Command_InviteRequest::kJsonStrFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteRequest::YouMeVoice_Command_InviteRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteRequest)
}

void YouMeVoice_Command_InviteRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteRequest::YouMeVoice_Command_InviteRequest(const YouMeVoice_Command_InviteRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteRequest)
}

void YouMeVoice_Command_InviteRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  to_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  connect_time_out_ = 0;
  talk_time_out_ = 0;
  notify_flag_ = 0;
  json_str_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteRequest::~YouMeVoice_Command_InviteRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteRequest)
  SharedDtor();
}

void YouMeVoice_Command_InviteRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  room_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteRequest& YouMeVoice_Command_InviteRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteRequest* YouMeVoice_Command_InviteRequest::default_instance_ = NULL;

YouMeVoice_Command_InviteRequest* YouMeVoice_Command_InviteRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteRequest* n = new YouMeVoice_Command_InviteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_InviteRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(session_id_, connect_time_out_);
    ZR_(talk_time_out_, notify_flag_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_to_user_id()) {
      to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_room_id()) {
      room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_json_str()) {
      json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_user_id;
        break;
      }

      // optional string to_user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_to_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_room_id;
        break;
      }

      // optional string room_id = 4;
      case 4: {
        if (tag == 34) {
         parse_room_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_connect_time_out;
        break;
      }

      // optional int32 connect_time_out = 5;
      case 5: {
        if (tag == 40) {
         parse_connect_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_time_out_)));
          set_has_connect_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_talk_time_out;
        break;
      }

      // optional int32 talk_time_out = 6;
      case 6: {
        if (tag == 48) {
         parse_talk_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_out_)));
          set_has_talk_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_notify_flag;
        break;
      }

      // optional int32 notify_flag = 7;
      case 7: {
        if (tag == 56) {
         parse_notify_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_flag_)));
          set_has_notify_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_json_str;
        break;
      }

      // optional string json_str = 8;
      case 8: {
        if (tag == 66) {
         parse_json_str:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional string to_user_id = 3;
  if (has_to_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_user_id(), output);
  }

  // optional string room_id = 4;
  if (has_room_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->room_id(), output);
  }

  // optional int32 connect_time_out = 5;
  if (has_connect_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->connect_time_out(), output);
  }

  // optional int32 talk_time_out = 6;
  if (has_talk_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->talk_time_out(), output);
  }

  // optional int32 notify_flag = 7;
  if (has_notify_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->notify_flag(), output);
  }

  // optional string json_str = 8;
  if (has_json_str()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->json_str(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteRequest)
}

int YouMeVoice_Command_InviteRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string to_user_id = 3;
    if (has_to_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_id());
    }

    // optional string room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 connect_time_out = 5;
    if (has_connect_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->connect_time_out());
    }

    // optional int32 talk_time_out = 6;
    if (has_talk_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time_out());
    }

    // optional int32 notify_flag = 7;
    if (has_notify_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->notify_flag());
    }

    // optional string json_str = 8;
    if (has_json_str()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteRequest*>(&from));
}

void YouMeVoice_Command_InviteRequest::MergeFrom(const YouMeVoice_Command_InviteRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_to_user_id()) {
      set_has_to_user_id();
      to_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_id_);
    }
    if (from.has_room_id()) {
      set_has_room_id();
      room_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_id_);
    }
    if (from.has_connect_time_out()) {
      set_connect_time_out(from.connect_time_out());
    }
    if (from.has_talk_time_out()) {
      set_talk_time_out(from.talk_time_out());
    }
    if (from.has_notify_flag()) {
      set_notify_flag(from.notify_flag());
    }
    if (from.has_json_str()) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteRequest::CopyFrom(const YouMeVoice_Command_InviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteRequest::Swap(YouMeVoice_Command_InviteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteRequest::InternalSwap(YouMeVoice_Command_InviteRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  to_user_id_.Swap(&other->to_user_id_);
  room_id_.Swap(&other->room_id_);
  std::swap(connect_time_out_, other->connect_time_out_);
  std::swap(talk_time_out_, other->talk_time_out_);
  std::swap(notify_flag_, other->notify_flag_);
  json_str_.Swap(&other->json_str_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_InviteRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_InviteRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_InviteRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_InviteRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.session_id)
}

// optional string to_user_id = 3;
bool YouMeVoice_Command_InviteRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_InviteRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_InviteRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
 const ::std::string& YouMeVoice_Command_InviteRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}
 void YouMeVoice_Command_InviteRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}
 void YouMeVoice_Command_InviteRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}
 ::std::string* YouMeVoice_Command_InviteRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.to_user_id)
}

// optional string room_id = 4;
bool YouMeVoice_Command_InviteRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_InviteRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_InviteRequest::clear_room_id() {
  room_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_room_id();
}
 const ::std::string& YouMeVoice_Command_InviteRequest::room_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
  return room_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}
 void YouMeVoice_Command_InviteRequest::set_room_id(const char* value) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}
 void YouMeVoice_Command_InviteRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  room_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}
 ::std::string* YouMeVoice_Command_InviteRequest::mutable_room_id() {
  set_has_room_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
  return room_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteRequest::release_room_id() {
  clear_has_room_id();
  return room_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id != NULL) {
    set_has_room_id();
  } else {
    clear_has_room_id();
  }
  room_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), room_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.room_id)
}

// optional int32 connect_time_out = 5;
bool YouMeVoice_Command_InviteRequest::has_connect_time_out() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_connect_time_out() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_InviteRequest::clear_has_connect_time_out() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_InviteRequest::clear_connect_time_out() {
  connect_time_out_ = 0;
  clear_has_connect_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::connect_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.connect_time_out)
  return connect_time_out_;
}
 void YouMeVoice_Command_InviteRequest::set_connect_time_out(::youmecommon::protobuf::int32 value) {
  set_has_connect_time_out();
  connect_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.connect_time_out)
}

// optional int32 talk_time_out = 6;
bool YouMeVoice_Command_InviteRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_InviteRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_InviteRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.talk_time_out)
  return talk_time_out_;
}
 void YouMeVoice_Command_InviteRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.talk_time_out)
}

// optional int32 notify_flag = 7;
bool YouMeVoice_Command_InviteRequest::has_notify_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_notify_flag() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Command_InviteRequest::clear_has_notify_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Command_InviteRequest::clear_notify_flag() {
  notify_flag_ = 0;
  clear_has_notify_flag();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteRequest::notify_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.notify_flag)
  return notify_flag_;
}
 void YouMeVoice_Command_InviteRequest::set_notify_flag(::youmecommon::protobuf::int32 value) {
  set_has_notify_flag();
  notify_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.notify_flag)
}

// optional string json_str = 8;
bool YouMeVoice_Command_InviteRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_InviteRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_InviteRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_InviteRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
 const ::std::string& YouMeVoice_Command_InviteRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}
 void YouMeVoice_Command_InviteRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}
 void YouMeVoice_Command_InviteRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}
 ::std::string* YouMeVoice_Command_InviteRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteRequest.json_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteResponse::kHeadFieldNumber;
const int YouMeVoice_Command_InviteResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_InviteResponse::kSessionIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteResponse::YouMeVoice_Command_InviteResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteResponse)
}

void YouMeVoice_Command_InviteResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteResponse::YouMeVoice_Command_InviteResponse(const YouMeVoice_Command_InviteResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteResponse)
}

void YouMeVoice_Command_InviteResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteResponse::~YouMeVoice_Command_InviteResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteResponse)
  SharedDtor();
}

void YouMeVoice_Command_InviteResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteResponse& YouMeVoice_Command_InviteResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteResponse* YouMeVoice_Command_InviteResponse::default_instance_ = NULL;

YouMeVoice_Command_InviteResponse* YouMeVoice_Command_InviteResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteResponse* n = new YouMeVoice_Command_InviteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_InviteResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(error_code_, session_id_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteResponse)
}

int YouMeVoice_Command_InviteResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteResponse*>(&from));
}

void YouMeVoice_Command_InviteResponse::MergeFrom(const YouMeVoice_Command_InviteResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteResponse::CopyFrom(const YouMeVoice_Command_InviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteResponse::Swap(YouMeVoice_Command_InviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteResponse::InternalSwap(YouMeVoice_Command_InviteResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_InviteResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_InviteResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_InviteResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_InviteResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_InviteResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_InviteResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_InviteResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_InviteResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteResponse.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteNotifyRequest::kHeadFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kFromUserIdFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kToUserIdFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kJsonStrFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kModeFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kEventTypeFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kErrorCodeFieldNumber;
const int YouMeVoice_Command_InviteNotifyRequest::kTalkTimeOutFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteNotifyRequest::YouMeVoice_Command_InviteNotifyRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
}

void YouMeVoice_Command_InviteNotifyRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteNotifyRequest::YouMeVoice_Command_InviteNotifyRequest(const YouMeVoice_Command_InviteNotifyRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
}

void YouMeVoice_Command_InviteNotifyRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  from_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  event_type_ = 0;
  error_code_ = 0;
  talk_time_out_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteNotifyRequest::~YouMeVoice_Command_InviteNotifyRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
  SharedDtor();
}

void YouMeVoice_Command_InviteNotifyRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteNotifyRequest& YouMeVoice_Command_InviteNotifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteNotifyRequest* YouMeVoice_Command_InviteNotifyRequest::default_instance_ = NULL;

YouMeVoice_Command_InviteNotifyRequest* YouMeVoice_Command_InviteNotifyRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteNotifyRequest* n = new YouMeVoice_Command_InviteNotifyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteNotifyRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_InviteNotifyRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(mode_, talk_time_out_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_from_user_id()) {
      from_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_to_user_id()) {
      to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_json_str()) {
      json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteNotifyRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_user_id;
        break;
      }

      // optional string from_user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_from_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_user_id;
        break;
      }

      // optional string to_user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_to_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_json_str;
        break;
      }

      // optional string json_str = 4;
      case 4: {
        if (tag == 34) {
         parse_json_str:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode;
        break;
      }

      // optional int32 mode = 5;
      case 5: {
        if (tag == 40) {
         parse_mode:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_event_type;
        break;
      }

      // optional int32 event_type = 6;
      case 6: {
        if (tag == 48) {
         parse_event_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 7;
      case 7: {
        if (tag == 56) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_talk_time_out;
        break;
      }

      // optional int32 talk_time_out = 8;
      case 8: {
        if (tag == 64) {
         parse_talk_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_out_)));
          set_has_talk_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteNotifyRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional string from_user_id = 2;
  if (has_from_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_user_id(), output);
  }

  // optional string to_user_id = 3;
  if (has_to_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_user_id(), output);
  }

  // optional string json_str = 4;
  if (has_json_str()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->json_str(), output);
  }

  // optional int32 mode = 5;
  if (has_mode()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->mode(), output);
  }

  // optional int32 event_type = 6;
  if (has_event_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->event_type(), output);
  }

  // optional int32 error_code = 7;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->error_code(), output);
  }

  // optional int32 talk_time_out = 8;
  if (has_talk_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(8, this->talk_time_out(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest)
}

int YouMeVoice_Command_InviteNotifyRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 254u) {
    // optional string from_user_id = 2;
    if (has_from_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_id());
    }

    // optional string to_user_id = 3;
    if (has_to_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_id());
    }

    // optional string json_str = 4;
    if (has_json_str()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

    // optional int32 mode = 5;
    if (has_mode()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 event_type = 6;
    if (has_event_type()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 error_code = 7;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 talk_time_out = 8;
    if (has_talk_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time_out());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteNotifyRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteNotifyRequest*>(&from));
}

void YouMeVoice_Command_InviteNotifyRequest::MergeFrom(const YouMeVoice_Command_InviteNotifyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_from_user_id()) {
      set_has_from_user_id();
      from_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_user_id_);
    }
    if (from.has_to_user_id()) {
      set_has_to_user_id();
      to_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_id_);
    }
    if (from.has_json_str()) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_talk_time_out()) {
      set_talk_time_out(from.talk_time_out());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteNotifyRequest::CopyFrom(const YouMeVoice_Command_InviteNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteNotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteNotifyRequest::Swap(YouMeVoice_Command_InviteNotifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteNotifyRequest::InternalSwap(YouMeVoice_Command_InviteNotifyRequest* other) {
  std::swap(head_, other->head_);
  from_user_id_.Swap(&other->from_user_id_);
  to_user_id_.Swap(&other->to_user_id_);
  json_str_.Swap(&other->json_str_);
  std::swap(mode_, other->mode_);
  std::swap(event_type_, other->event_type_);
  std::swap(error_code_, other->error_code_);
  std::swap(talk_time_out_, other->talk_time_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteNotifyRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_InviteNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.head)
}

// optional string from_user_id = 2;
bool YouMeVoice_Command_InviteNotifyRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_from_user_id() {
  from_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_id();
}
 const ::std::string& YouMeVoice_Command_InviteNotifyRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
  return from_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteNotifyRequest::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}
 void YouMeVoice_Command_InviteNotifyRequest::set_from_user_id(const char* value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}
 void YouMeVoice_Command_InviteNotifyRequest::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}
 ::std::string* YouMeVoice_Command_InviteNotifyRequest::mutable_from_user_id() {
  set_has_from_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
  return from_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteNotifyRequest::release_from_user_id() {
  clear_has_from_user_id();
  return from_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteNotifyRequest::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id != NULL) {
    set_has_from_user_id();
  } else {
    clear_has_from_user_id();
  }
  from_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.from_user_id)
}

// optional string to_user_id = 3;
bool YouMeVoice_Command_InviteNotifyRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
 const ::std::string& YouMeVoice_Command_InviteNotifyRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteNotifyRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}
 void YouMeVoice_Command_InviteNotifyRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}
 void YouMeVoice_Command_InviteNotifyRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}
 ::std::string* YouMeVoice_Command_InviteNotifyRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteNotifyRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteNotifyRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.to_user_id)
}

// optional string json_str = 4;
bool YouMeVoice_Command_InviteNotifyRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
 const ::std::string& YouMeVoice_Command_InviteNotifyRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteNotifyRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}
 void YouMeVoice_Command_InviteNotifyRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}
 void YouMeVoice_Command_InviteNotifyRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}
 ::std::string* YouMeVoice_Command_InviteNotifyRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_InviteNotifyRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_InviteNotifyRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.json_str)
}

// optional int32 mode = 5;
bool YouMeVoice_Command_InviteNotifyRequest::has_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::mode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.mode)
  return mode_;
}
 void YouMeVoice_Command_InviteNotifyRequest::set_mode(::youmecommon::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.mode)
}

// optional int32 event_type = 6;
bool YouMeVoice_Command_InviteNotifyRequest::has_event_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_event_type() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::event_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.event_type)
  return event_type_;
}
 void YouMeVoice_Command_InviteNotifyRequest::set_event_type(::youmecommon::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.event_type)
}

// optional int32 error_code = 7;
bool YouMeVoice_Command_InviteNotifyRequest::has_error_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_error_code() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.error_code)
  return error_code_;
}
 void YouMeVoice_Command_InviteNotifyRequest::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.error_code)
}

// optional int32 talk_time_out = 8;
bool YouMeVoice_Command_InviteNotifyRequest::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_InviteNotifyRequest::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_InviteNotifyRequest::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteNotifyRequest::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.talk_time_out)
  return talk_time_out_;
}
 void YouMeVoice_Command_InviteNotifyRequest::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteNotifyRequest.talk_time_out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_AcceptRequest::kHeadFieldNumber;
const int YouMeVoice_Command_AcceptRequest::kSessionIdFieldNumber;
const int YouMeVoice_Command_AcceptRequest::kToUserIdFieldNumber;
const int YouMeVoice_Command_AcceptRequest::kErrorCodeFieldNumber;
const int YouMeVoice_Command_AcceptRequest::kJsonStrFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_AcceptRequest::YouMeVoice_Command_AcceptRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
}

void YouMeVoice_Command_AcceptRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_AcceptRequest::YouMeVoice_Command_AcceptRequest(const YouMeVoice_Command_AcceptRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
}

void YouMeVoice_Command_AcceptRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  to_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  json_str_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_AcceptRequest::~YouMeVoice_Command_AcceptRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
  SharedDtor();
}

void YouMeVoice_Command_AcceptRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  json_str_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_AcceptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_AcceptRequest& YouMeVoice_Command_AcceptRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_AcceptRequest* YouMeVoice_Command_AcceptRequest::default_instance_ = NULL;

YouMeVoice_Command_AcceptRequest* YouMeVoice_Command_AcceptRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_AcceptRequest* n = new YouMeVoice_Command_AcceptRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_AcceptRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_AcceptRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(session_id_, error_code_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_to_user_id()) {
      to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_json_str()) {
      json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_AcceptRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_user_id;
        break;
      }

      // optional string to_user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_to_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 4;
      case 4: {
        if (tag == 32) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_json_str;
        break;
      }

      // optional string json_str = 5;
      case 5: {
        if (tag == 42) {
         parse_json_str:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_AcceptRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  // optional string to_user_id = 3;
  if (has_to_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_user_id(), output);
  }

  // optional int32 error_code = 4;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_code(), output);
  }

  // optional string json_str = 5;
  if (has_json_str()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->json_str(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_AcceptRequest)
}

int YouMeVoice_Command_AcceptRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional int32 session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional string to_user_id = 3;
    if (has_to_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_id());
    }

    // optional int32 error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string json_str = 5;
    if (has_json_str()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->json_str());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_AcceptRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_AcceptRequest*>(&from));
}

void YouMeVoice_Command_AcceptRequest::MergeFrom(const YouMeVoice_Command_AcceptRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_to_user_id()) {
      set_has_to_user_id();
      to_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_id_);
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_json_str()) {
      set_has_json_str();
      json_str_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_AcceptRequest::CopyFrom(const YouMeVoice_Command_AcceptRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_AcceptRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_AcceptRequest::Swap(YouMeVoice_Command_AcceptRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_AcceptRequest::InternalSwap(YouMeVoice_Command_AcceptRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  to_user_id_.Swap(&other->to_user_id_);
  std::swap(error_code_, other->error_code_);
  json_str_.Swap(&other->json_str_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_AcceptRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_AcceptRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_AcceptRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_AcceptRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_AcceptRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_AcceptRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_AcceptRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_AcceptRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_AcceptRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_AcceptRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_AcceptRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_AcceptRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_AcceptRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_AcceptRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_AcceptRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_AcceptRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.session_id)
}

// optional string to_user_id = 3;
bool YouMeVoice_Command_AcceptRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_AcceptRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_AcceptRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_AcceptRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
 const ::std::string& YouMeVoice_Command_AcceptRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AcceptRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}
 void YouMeVoice_Command_AcceptRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}
 void YouMeVoice_Command_AcceptRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}
 ::std::string* YouMeVoice_Command_AcceptRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_AcceptRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AcceptRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptRequest.to_user_id)
}

// optional int32 error_code = 4;
bool YouMeVoice_Command_AcceptRequest::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_AcceptRequest::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_AcceptRequest::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_AcceptRequest::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptRequest::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.error_code)
  return error_code_;
}
 void YouMeVoice_Command_AcceptRequest::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.error_code)
}

// optional string json_str = 5;
bool YouMeVoice_Command_AcceptRequest::has_json_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_AcceptRequest::set_has_json_str() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_AcceptRequest::clear_has_json_str() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_AcceptRequest::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json_str();
}
 const ::std::string& YouMeVoice_Command_AcceptRequest::json_str() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
  return json_str_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AcceptRequest::set_json_str(const ::std::string& value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}
 void YouMeVoice_Command_AcceptRequest::set_json_str(const char* value) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}
 void YouMeVoice_Command_AcceptRequest::set_json_str(const char* value, size_t size) {
  set_has_json_str();
  json_str_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}
 ::std::string* YouMeVoice_Command_AcceptRequest::mutable_json_str() {
  set_has_json_str();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
  return json_str_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_AcceptRequest::release_json_str() {
  clear_has_json_str();
  return json_str_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AcceptRequest::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    set_has_json_str();
  } else {
    clear_has_json_str();
  }
  json_str_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptRequest.json_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_AcceptResponse::kHeadFieldNumber;
const int YouMeVoice_Command_AcceptResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_AcceptResponse::kSessionIdFieldNumber;
const int YouMeVoice_Command_AcceptResponse::kTalkTimeOutFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_AcceptResponse::YouMeVoice_Command_AcceptResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
}

void YouMeVoice_Command_AcceptResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_AcceptResponse::YouMeVoice_Command_AcceptResponse(const YouMeVoice_Command_AcceptResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
}

void YouMeVoice_Command_AcceptResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  talk_time_out_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_AcceptResponse::~YouMeVoice_Command_AcceptResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
  SharedDtor();
}

void YouMeVoice_Command_AcceptResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_AcceptResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_AcceptResponse& YouMeVoice_Command_AcceptResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_AcceptResponse* YouMeVoice_Command_AcceptResponse::default_instance_ = NULL;

YouMeVoice_Command_AcceptResponse* YouMeVoice_Command_AcceptResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_AcceptResponse* n = new YouMeVoice_Command_AcceptResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_AcceptResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_AcceptResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(error_code_, talk_time_out_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_AcceptResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_talk_time_out;
        break;
      }

      // optional int32 talk_time_out = 4;
      case 4: {
        if (tag == 32) {
         parse_talk_time_out:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talk_time_out_)));
          set_has_talk_time_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_AcceptResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  // optional int32 talk_time_out = 4;
  if (has_talk_time_out()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->talk_time_out(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_AcceptResponse)
}

int YouMeVoice_Command_AcceptResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

    // optional int32 talk_time_out = 4;
    if (has_talk_time_out()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->talk_time_out());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_AcceptResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_AcceptResponse*>(&from));
}

void YouMeVoice_Command_AcceptResponse::MergeFrom(const YouMeVoice_Command_AcceptResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_talk_time_out()) {
      set_talk_time_out(from.talk_time_out());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_AcceptResponse::CopyFrom(const YouMeVoice_Command_AcceptResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_AcceptResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_AcceptResponse::Swap(YouMeVoice_Command_AcceptResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_AcceptResponse::InternalSwap(YouMeVoice_Command_AcceptResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  std::swap(talk_time_out_, other->talk_time_out_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_AcceptResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_AcceptResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_AcceptResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_AcceptResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_AcceptResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_AcceptResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_AcceptResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_AcceptResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AcceptResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AcceptResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AcceptResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_AcceptResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AcceptResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_AcceptResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_AcceptResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_AcceptResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_AcceptResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_AcceptResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_AcceptResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_AcceptResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_AcceptResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_AcceptResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_AcceptResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptResponse.session_id)
}

// optional int32 talk_time_out = 4;
bool YouMeVoice_Command_AcceptResponse::has_talk_time_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_AcceptResponse::set_has_talk_time_out() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_AcceptResponse::clear_has_talk_time_out() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_AcceptResponse::clear_talk_time_out() {
  talk_time_out_ = 0;
  clear_has_talk_time_out();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AcceptResponse::talk_time_out() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AcceptResponse.talk_time_out)
  return talk_time_out_;
}
 void YouMeVoice_Command_AcceptResponse::set_talk_time_out(::youmecommon::protobuf::int32 value) {
  set_has_talk_time_out();
  talk_time_out_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AcceptResponse.talk_time_out)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteByeRequest::kHeadFieldNumber;
const int YouMeVoice_Command_InviteByeRequest::kSessionIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteByeRequest::YouMeVoice_Command_InviteByeRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
}

void YouMeVoice_Command_InviteByeRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteByeRequest::YouMeVoice_Command_InviteByeRequest(const YouMeVoice_Command_InviteByeRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
}

void YouMeVoice_Command_InviteByeRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteByeRequest::~YouMeVoice_Command_InviteByeRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
  SharedDtor();
}

void YouMeVoice_Command_InviteByeRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteByeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteByeRequest& YouMeVoice_Command_InviteByeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteByeRequest* YouMeVoice_Command_InviteByeRequest::default_instance_ = NULL;

YouMeVoice_Command_InviteByeRequest* YouMeVoice_Command_InviteByeRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteByeRequest* n = new YouMeVoice_Command_InviteByeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteByeRequest::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    session_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteByeRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 2;
      case 2: {
        if (tag == 16) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteByeRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 session_id = 2;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteByeRequest)
}

int YouMeVoice_Command_InviteByeRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional int32 session_id = 2;
  if (has_session_id()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->session_id());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteByeRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteByeRequest*>(&from));
}

void YouMeVoice_Command_InviteByeRequest::MergeFrom(const YouMeVoice_Command_InviteByeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteByeRequest::CopyFrom(const YouMeVoice_Command_InviteByeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteByeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteByeRequest::Swap(YouMeVoice_Command_InviteByeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteByeRequest::InternalSwap(YouMeVoice_Command_InviteByeRequest* other) {
  std::swap(head_, other->head_);
  std::swap(session_id_, other->session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteByeRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteByeRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteByeRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_InviteByeRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteByeRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteByeRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteByeRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_InviteByeRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteByeRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_InviteByeRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteByeRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.head)
}

// optional int32 session_id = 2;
bool YouMeVoice_Command_InviteByeRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteByeRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteByeRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteByeRequest::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteByeRequest::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.session_id)
  return session_id_;
}
 void YouMeVoice_Command_InviteByeRequest::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteByeRequest.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_InviteByeResponse::kHeadFieldNumber;
const int YouMeVoice_Command_InviteByeResponse::kErrorCodeFieldNumber;
const int YouMeVoice_Command_InviteByeResponse::kSessionIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_InviteByeResponse::YouMeVoice_Command_InviteByeResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
}

void YouMeVoice_Command_InviteByeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_InviteByeResponse::YouMeVoice_Command_InviteByeResponse(const YouMeVoice_Command_InviteByeResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
}

void YouMeVoice_Command_InviteByeResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  error_code_ = 0;
  session_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_InviteByeResponse::~YouMeVoice_Command_InviteByeResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
  SharedDtor();
}

void YouMeVoice_Command_InviteByeResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_InviteByeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_InviteByeResponse& YouMeVoice_Command_InviteByeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_InviteByeResponse* YouMeVoice_Command_InviteByeResponse::default_instance_ = NULL;

YouMeVoice_Command_InviteByeResponse* YouMeVoice_Command_InviteByeResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_InviteByeResponse* n = new YouMeVoice_Command_InviteByeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_InviteByeResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_InviteByeResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(error_code_, session_id_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_InviteByeResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_session_id;
        break;
      }

      // optional int32 session_id = 3;
      case 3: {
        if (tag == 24) {
         parse_session_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_id_)));
          set_has_session_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_InviteByeResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 error_code = 2;
  if (has_error_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional int32 session_id = 3;
  if (has_session_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->session_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_InviteByeResponse)
}

int YouMeVoice_Command_InviteByeResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional int32 session_id = 3;
    if (has_session_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->session_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_InviteByeResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_InviteByeResponse*>(&from));
}

void YouMeVoice_Command_InviteByeResponse::MergeFrom(const YouMeVoice_Command_InviteByeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_InviteByeResponse::CopyFrom(const YouMeVoice_Command_InviteByeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_InviteByeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_InviteByeResponse::Swap(YouMeVoice_Command_InviteByeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_InviteByeResponse::InternalSwap(YouMeVoice_Command_InviteByeResponse* other) {
  std::swap(head_, other->head_);
  std::swap(error_code_, other->error_code_);
  std::swap(session_id_, other->session_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_InviteByeResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_InviteByeResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_InviteByeResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_InviteByeResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_InviteByeResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_InviteByeResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_InviteByeResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_InviteByeResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteByeResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_InviteByeResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_InviteByeResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.head)
}

// optional int32 error_code = 2;
bool YouMeVoice_Command_InviteByeResponse::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_InviteByeResponse::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_InviteByeResponse::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_InviteByeResponse::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteByeResponse::error_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.error_code)
  return error_code_;
}
 void YouMeVoice_Command_InviteByeResponse::set_error_code(::youmecommon::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.error_code)
}

// optional int32 session_id = 3;
bool YouMeVoice_Command_InviteByeResponse::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_InviteByeResponse::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_InviteByeResponse::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_InviteByeResponse::clear_session_id() {
  session_id_ = 0;
  clear_has_session_id();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_InviteByeResponse::session_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.session_id)
  return session_id_;
}
 void YouMeVoice_Command_InviteByeResponse::set_session_id(::youmecommon::protobuf::int32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_InviteByeResponse.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_MaskVideoByUserIdRequest::kHeadFieldNumber;
const int YouMeVoice_Command_MaskVideoByUserIdRequest::kUserIdFieldNumber;
const int YouMeVoice_Command_MaskVideoByUserIdRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_MaskVideoByUserIdRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_MaskVideoByUserIdRequest::YouMeVoice_Command_MaskVideoByUserIdRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_MaskVideoByUserIdRequest::YouMeVoice_Command_MaskVideoByUserIdRequest(const YouMeVoice_Command_MaskVideoByUserIdRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_MaskVideoByUserIdRequest::~YouMeVoice_Command_MaskVideoByUserIdRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
  SharedDtor();
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_MaskVideoByUserIdRequest& YouMeVoice_Command_MaskVideoByUserIdRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_MaskVideoByUserIdRequest* YouMeVoice_Command_MaskVideoByUserIdRequest::default_instance_ = NULL;

YouMeVoice_Command_MaskVideoByUserIdRequest* YouMeVoice_Command_MaskVideoByUserIdRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_MaskVideoByUserIdRequest* n = new YouMeVoice_Command_MaskVideoByUserIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_MaskVideoByUserIdRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, status_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_MaskVideoByUserIdRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional int32 sessionid = 3;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest)
}

int YouMeVoice_Command_MaskVideoByUserIdRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int32 sessionid = 3;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_MaskVideoByUserIdRequest*>(&from));
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::MergeFrom(const YouMeVoice_Command_MaskVideoByUserIdRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::CopyFrom(const YouMeVoice_Command_MaskVideoByUserIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_MaskVideoByUserIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_MaskVideoByUserIdRequest::Swap(YouMeVoice_Command_MaskVideoByUserIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::InternalSwap(YouMeVoice_Command_MaskVideoByUserIdRequest* other) {
  std::swap(head_, other->head_);
  user_id_.Swap(&other->user_id_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_MaskVideoByUserIdRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_MaskVideoByUserIdRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_MaskVideoByUserIdRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_MaskVideoByUserIdRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_MaskVideoByUserIdRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.head)
}

// optional string user_id = 2;
bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Command_MaskVideoByUserIdRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MaskVideoByUserIdRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}
 void YouMeVoice_Command_MaskVideoByUserIdRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}
 void YouMeVoice_Command_MaskVideoByUserIdRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}
 ::std::string* YouMeVoice_Command_MaskVideoByUserIdRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MaskVideoByUserIdRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MaskVideoByUserIdRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.user_id)
}

// optional int32 sessionid = 3;
bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoByUserIdRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_MaskVideoByUserIdRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.sessionid)
}

// optional int32 status = 4;
bool YouMeVoice_Command_MaskVideoByUserIdRequest::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_MaskVideoByUserIdRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoByUserIdRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.status)
  return status_;
}
 void YouMeVoice_Command_MaskVideoByUserIdRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_MaskVideoByUserIdResponse::kHeadFieldNumber;
const int YouMeVoice_Command_MaskVideoByUserIdResponse::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_MaskVideoByUserIdResponse::YouMeVoice_Command_MaskVideoByUserIdResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_MaskVideoByUserIdResponse::YouMeVoice_Command_MaskVideoByUserIdResponse(const YouMeVoice_Command_MaskVideoByUserIdResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_MaskVideoByUserIdResponse::~YouMeVoice_Command_MaskVideoByUserIdResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
  SharedDtor();
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_MaskVideoByUserIdResponse& YouMeVoice_Command_MaskVideoByUserIdResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_MaskVideoByUserIdResponse* YouMeVoice_Command_MaskVideoByUserIdResponse::default_instance_ = NULL;

YouMeVoice_Command_MaskVideoByUserIdResponse* YouMeVoice_Command_MaskVideoByUserIdResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_MaskVideoByUserIdResponse* n = new YouMeVoice_Command_MaskVideoByUserIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_MaskVideoByUserIdResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse)
}

int YouMeVoice_Command_MaskVideoByUserIdResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_MaskVideoByUserIdResponse*>(&from));
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::MergeFrom(const YouMeVoice_Command_MaskVideoByUserIdResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::CopyFrom(const YouMeVoice_Command_MaskVideoByUserIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_MaskVideoByUserIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_MaskVideoByUserIdResponse::Swap(YouMeVoice_Command_MaskVideoByUserIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::InternalSwap(YouMeVoice_Command_MaskVideoByUserIdResponse* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_MaskVideoByUserIdResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_MaskVideoByUserIdResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_MaskVideoByUserIdResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MaskVideoByUserIdResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoByUserIdResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoByUserIdResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_MaskVideoByUserIdResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_MaskVideoByUserIdResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoByUserIdResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_MaskVideoByUserIdResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoByUserIdResponse.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_MaskVideoNotifyRequest::kHeadFieldNumber;
const int YouMeVoice_Command_MaskVideoNotifyRequest::kFromUserIdFieldNumber;
const int YouMeVoice_Command_MaskVideoNotifyRequest::kToUserIdFieldNumber;
const int YouMeVoice_Command_MaskVideoNotifyRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_MaskVideoNotifyRequest::YouMeVoice_Command_MaskVideoNotifyRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
}

void YouMeVoice_Command_MaskVideoNotifyRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_MaskVideoNotifyRequest::YouMeVoice_Command_MaskVideoNotifyRequest(const YouMeVoice_Command_MaskVideoNotifyRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
}

void YouMeVoice_Command_MaskVideoNotifyRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  from_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_MaskVideoNotifyRequest::~YouMeVoice_Command_MaskVideoNotifyRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
  SharedDtor();
}

void YouMeVoice_Command_MaskVideoNotifyRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  from_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_MaskVideoNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_MaskVideoNotifyRequest& YouMeVoice_Command_MaskVideoNotifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_MaskVideoNotifyRequest* YouMeVoice_Command_MaskVideoNotifyRequest::default_instance_ = NULL;

YouMeVoice_Command_MaskVideoNotifyRequest* YouMeVoice_Command_MaskVideoNotifyRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_MaskVideoNotifyRequest* n = new YouMeVoice_Command_MaskVideoNotifyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_MaskVideoNotifyRequest::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_from_user_id()) {
      from_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_to_user_id()) {
      to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_MaskVideoNotifyRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_from_user_id;
        break;
      }

      // optional string from_user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_from_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_user_id;
        break;
      }

      // optional string to_user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_to_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_MaskVideoNotifyRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional string from_user_id = 2;
  if (has_from_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->from_user_id(), output);
  }

  // optional string to_user_id = 3;
  if (has_to_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_user_id(), output);
  }

  // optional int32 status = 4;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest)
}

int YouMeVoice_Command_MaskVideoNotifyRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string from_user_id = 2;
    if (has_from_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->from_user_id());
    }

    // optional string to_user_id = 3;
    if (has_to_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_user_id());
    }

    // optional int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_MaskVideoNotifyRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_MaskVideoNotifyRequest*>(&from));
}

void YouMeVoice_Command_MaskVideoNotifyRequest::MergeFrom(const YouMeVoice_Command_MaskVideoNotifyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_from_user_id()) {
      set_has_from_user_id();
      from_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_user_id_);
    }
    if (from.has_to_user_id()) {
      set_has_to_user_id();
      to_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_user_id_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_MaskVideoNotifyRequest::CopyFrom(const YouMeVoice_Command_MaskVideoNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_MaskVideoNotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_MaskVideoNotifyRequest::Swap(YouMeVoice_Command_MaskVideoNotifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_MaskVideoNotifyRequest::InternalSwap(YouMeVoice_Command_MaskVideoNotifyRequest* other) {
  std::swap(head_, other->head_);
  from_user_id_.Swap(&other->from_user_id_);
  to_user_id_.Swap(&other->to_user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_MaskVideoNotifyRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_MaskVideoNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_MaskVideoNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MaskVideoNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MaskVideoNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.head)
}

// optional string from_user_id = 2;
bool YouMeVoice_Command_MaskVideoNotifyRequest::has_from_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_from_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_from_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_from_user_id() {
  from_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_user_id();
}
 const ::std::string& YouMeVoice_Command_MaskVideoNotifyRequest::from_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
  return from_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_from_user_id(const ::std::string& value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_from_user_id(const char* value) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_from_user_id(const char* value, size_t size) {
  set_has_from_user_id();
  from_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}
 ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::mutable_from_user_id() {
  set_has_from_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
  return from_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::release_from_user_id() {
  clear_has_from_user_id();
  return from_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_allocated_from_user_id(::std::string* from_user_id) {
  if (from_user_id != NULL) {
    set_has_from_user_id();
  } else {
    clear_has_from_user_id();
  }
  from_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.from_user_id)
}

// optional string to_user_id = 3;
bool YouMeVoice_Command_MaskVideoNotifyRequest::has_to_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_to_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_to_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_to_user_id() {
  to_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_user_id();
}
 const ::std::string& YouMeVoice_Command_MaskVideoNotifyRequest::to_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
  return to_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_to_user_id(const ::std::string& value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_to_user_id(const char* value) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_to_user_id(const char* value, size_t size) {
  set_has_to_user_id();
  to_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}
 ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::mutable_to_user_id() {
  set_has_to_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
  return to_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MaskVideoNotifyRequest::release_to_user_id() {
  clear_has_to_user_id();
  return to_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_allocated_to_user_id(::std::string* to_user_id) {
  if (to_user_id != NULL) {
    set_has_to_user_id();
  } else {
    clear_has_to_user_id();
  }
  to_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.to_user_id)
}

// optional int32 status = 4;
bool YouMeVoice_Command_MaskVideoNotifyRequest::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_MaskVideoNotifyRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MaskVideoNotifyRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.status)
  return status_;
}
 void YouMeVoice_Command_MaskVideoNotifyRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MaskVideoNotifyRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_CameraStatusChangeRequest::kHeadFieldNumber;
const int YouMeVoice_Command_CameraStatusChangeRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_CameraStatusChangeRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_CameraStatusChangeRequest::YouMeVoice_Command_CameraStatusChangeRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
}

void YouMeVoice_Command_CameraStatusChangeRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_CameraStatusChangeRequest::YouMeVoice_Command_CameraStatusChangeRequest(const YouMeVoice_Command_CameraStatusChangeRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
}

void YouMeVoice_Command_CameraStatusChangeRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_CameraStatusChangeRequest::~YouMeVoice_Command_CameraStatusChangeRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
  SharedDtor();
}

void YouMeVoice_Command_CameraStatusChangeRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_CameraStatusChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_CameraStatusChangeRequest& YouMeVoice_Command_CameraStatusChangeRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_CameraStatusChangeRequest* YouMeVoice_Command_CameraStatusChangeRequest::default_instance_ = NULL;

YouMeVoice_Command_CameraStatusChangeRequest* YouMeVoice_Command_CameraStatusChangeRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_CameraStatusChangeRequest* n = new YouMeVoice_Command_CameraStatusChangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_CameraStatusChangeRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_CameraStatusChangeRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(sessionid_, status_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_CameraStatusChangeRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_CameraStatusChangeRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest)
}

int YouMeVoice_Command_CameraStatusChangeRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_CameraStatusChangeRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_CameraStatusChangeRequest*>(&from));
}

void YouMeVoice_Command_CameraStatusChangeRequest::MergeFrom(const YouMeVoice_Command_CameraStatusChangeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_CameraStatusChangeRequest::CopyFrom(const YouMeVoice_Command_CameraStatusChangeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_CameraStatusChangeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_CameraStatusChangeRequest::Swap(YouMeVoice_Command_CameraStatusChangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_CameraStatusChangeRequest::InternalSwap(YouMeVoice_Command_CameraStatusChangeRequest* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_CameraStatusChangeRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_CameraStatusChangeRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_CameraStatusChangeRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_CameraStatusChangeRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_CameraStatusChangeRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_CameraStatusChangeRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_CameraStatusChangeRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_CameraStatusChangeRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_CameraStatusChangeRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_CameraStatusChangeRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_CameraStatusChangeRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_CameraStatusChangeRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_CameraStatusChangeRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_CameraStatusChangeRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraStatusChangeRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_CameraStatusChangeRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.sessionid)
}

// optional int32 status = 3;
bool YouMeVoice_Command_CameraStatusChangeRequest::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_CameraStatusChangeRequest::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_CameraStatusChangeRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_CameraStatusChangeRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraStatusChangeRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.status)
  return status_;
}
 void YouMeVoice_Command_CameraStatusChangeRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_CameraStatusChangeResponse::kHeadFieldNumber;
const int YouMeVoice_Command_CameraStatusChangeResponse::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_CameraStatusChangeResponse::YouMeVoice_Command_CameraStatusChangeResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
}

void YouMeVoice_Command_CameraStatusChangeResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_CameraStatusChangeResponse::YouMeVoice_Command_CameraStatusChangeResponse(const YouMeVoice_Command_CameraStatusChangeResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
}

void YouMeVoice_Command_CameraStatusChangeResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_CameraStatusChangeResponse::~YouMeVoice_Command_CameraStatusChangeResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
  SharedDtor();
}

void YouMeVoice_Command_CameraStatusChangeResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_CameraStatusChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_CameraStatusChangeResponse& YouMeVoice_Command_CameraStatusChangeResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_CameraStatusChangeResponse* YouMeVoice_Command_CameraStatusChangeResponse::default_instance_ = NULL;

YouMeVoice_Command_CameraStatusChangeResponse* YouMeVoice_Command_CameraStatusChangeResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_CameraStatusChangeResponse* n = new YouMeVoice_Command_CameraStatusChangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_CameraStatusChangeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_CameraStatusChangeResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_CameraStatusChangeResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse)
}

int YouMeVoice_Command_CameraStatusChangeResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_CameraStatusChangeResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_CameraStatusChangeResponse*>(&from));
}

void YouMeVoice_Command_CameraStatusChangeResponse::MergeFrom(const YouMeVoice_Command_CameraStatusChangeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_CameraStatusChangeResponse::CopyFrom(const YouMeVoice_Command_CameraStatusChangeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_CameraStatusChangeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_CameraStatusChangeResponse::Swap(YouMeVoice_Command_CameraStatusChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_CameraStatusChangeResponse::InternalSwap(YouMeVoice_Command_CameraStatusChangeResponse* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_CameraStatusChangeResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_CameraStatusChangeResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_CameraStatusChangeResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_CameraStatusChangeResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_CameraStatusChangeResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_CameraStatusChangeResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_CameraStatusChangeResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraStatusChangeResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraStatusChangeResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_CameraStatusChangeResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_CameraStatusChangeResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_CameraStatusChangeResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_CameraStatusChangeResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_CameraStatusChangeResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraStatusChangeResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_CameraStatusChangeResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraStatusChangeResponse.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_CameraNotifyRequest::kHeadFieldNumber;
const int YouMeVoice_Command_CameraNotifyRequest::kUserIdFieldNumber;
const int YouMeVoice_Command_CameraNotifyRequest::kStatusFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_CameraNotifyRequest::YouMeVoice_Command_CameraNotifyRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
}

void YouMeVoice_Command_CameraNotifyRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_CameraNotifyRequest::YouMeVoice_Command_CameraNotifyRequest(const YouMeVoice_Command_CameraNotifyRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
}

void YouMeVoice_Command_CameraNotifyRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_CameraNotifyRequest::~YouMeVoice_Command_CameraNotifyRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
  SharedDtor();
}

void YouMeVoice_Command_CameraNotifyRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_CameraNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_CameraNotifyRequest& YouMeVoice_Command_CameraNotifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_CameraNotifyRequest* YouMeVoice_Command_CameraNotifyRequest::default_instance_ = NULL;

YouMeVoice_Command_CameraNotifyRequest* YouMeVoice_Command_CameraNotifyRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_CameraNotifyRequest* n = new YouMeVoice_Command_CameraNotifyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_CameraNotifyRequest::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_CameraNotifyRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_id;
        break;
      }

      // optional string user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_CameraNotifyRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional string user_id = 2;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_id(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest)
}

int YouMeVoice_Command_CameraNotifyRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_CameraNotifyRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_CameraNotifyRequest*>(&from));
}

void YouMeVoice_Command_CameraNotifyRequest::MergeFrom(const YouMeVoice_Command_CameraNotifyRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_CameraNotifyRequest::CopyFrom(const YouMeVoice_Command_CameraNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_CameraNotifyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_CameraNotifyRequest::Swap(YouMeVoice_Command_CameraNotifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_CameraNotifyRequest::InternalSwap(YouMeVoice_Command_CameraNotifyRequest* other) {
  std::swap(head_, other->head_);
  user_id_.Swap(&other->user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_CameraNotifyRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_CameraNotifyRequest

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_CameraNotifyRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_CameraNotifyRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_CameraNotifyRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_CameraNotifyRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_CameraNotifyRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraNotifyRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_CameraNotifyRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_CameraNotifyRequest::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.head)
}

// optional string user_id = 2;
bool YouMeVoice_Command_CameraNotifyRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_CameraNotifyRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_CameraNotifyRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_CameraNotifyRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Command_CameraNotifyRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_CameraNotifyRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}
 void YouMeVoice_Command_CameraNotifyRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}
 void YouMeVoice_Command_CameraNotifyRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}
 ::std::string* YouMeVoice_Command_CameraNotifyRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_CameraNotifyRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_CameraNotifyRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.user_id)
}

// optional int32 status = 3;
bool YouMeVoice_Command_CameraNotifyRequest::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_CameraNotifyRequest::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_CameraNotifyRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_CameraNotifyRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_CameraNotifyRequest::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.status)
  return status_;
}
 void YouMeVoice_Command_CameraNotifyRequest::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_CameraNotifyRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_SendMessageRequest::kHeadFieldNumber;
const int YouMeVoice_Command_SendMessageRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_SendMessageRequest::kToChannelIdFieldNumber;
const int YouMeVoice_Command_SendMessageRequest::kMsgContentFieldNumber;
const int YouMeVoice_Command_SendMessageRequest::kMsgIdFieldNumber;
const int YouMeVoice_Command_SendMessageRequest::kToUseridFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_SendMessageRequest::YouMeVoice_Command_SendMessageRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
}

void YouMeVoice_Command_SendMessageRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_SendMessageRequest::YouMeVoice_Command_SendMessageRequest(const YouMeVoice_Command_SendMessageRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
}

void YouMeVoice_Command_SendMessageRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  to_channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  to_userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_SendMessageRequest::~YouMeVoice_Command_SendMessageRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
  SharedDtor();
}

void YouMeVoice_Command_SendMessageRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_SendMessageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_SendMessageRequest& YouMeVoice_Command_SendMessageRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_SendMessageRequest* YouMeVoice_Command_SendMessageRequest::default_instance_ = NULL;

YouMeVoice_Command_SendMessageRequest* YouMeVoice_Command_SendMessageRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_SendMessageRequest* n = new YouMeVoice_Command_SendMessageRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_SendMessageRequest::Clear() {
  if (_has_bits_[0 / 32] & 63u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_to_channel_id()) {
      to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg_content()) {
      msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    msg_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_userid()) {
      to_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_SendMessageRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_channel_id;
        break;
      }

      // optional string to_channel_id = 3;
      case 3: {
        if (tag == 26) {
         parse_to_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg_content;
        break;
      }

      // optional bytes msg_content = 4;
      case 4: {
        if (tag == 34) {
         parse_msg_content:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_to_userid;
        break;
      }

      // optional string to_userid = 9;
      case 9: {
        if (tag == 74) {
         parse_to_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_SendMessageRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string to_channel_id = 3;
  if (has_to_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_channel_id(), output);
  }

  // optional bytes msg_content = 4;
  if (has_msg_content()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msg_content(), output);
  }

  // optional uint64 msg_id = 5;
  if (has_msg_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(5, this->msg_id(), output);
  }

  // optional string to_userid = 9;
  if (has_to_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->to_userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_SendMessageRequest)
}

int YouMeVoice_Command_SendMessageRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string to_channel_id = 3;
    if (has_to_channel_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_channel_id());
    }

    // optional bytes msg_content = 4;
    if (has_msg_content()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_content());
    }

    // optional uint64 msg_id = 5;
    if (has_msg_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

    // optional string to_userid = 9;
    if (has_to_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_SendMessageRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_SendMessageRequest*>(&from));
}

void YouMeVoice_Command_SendMessageRequest::MergeFrom(const YouMeVoice_Command_SendMessageRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_to_channel_id()) {
      set_has_to_channel_id();
      to_channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_channel_id_);
    }
    if (from.has_msg_content()) {
      set_has_msg_content();
      msg_content_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_content_);
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_to_userid()) {
      set_has_to_userid();
      to_userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_SendMessageRequest::CopyFrom(const YouMeVoice_Command_SendMessageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_SendMessageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_SendMessageRequest::Swap(YouMeVoice_Command_SendMessageRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_SendMessageRequest::InternalSwap(YouMeVoice_Command_SendMessageRequest* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  to_channel_id_.Swap(&other->to_channel_id_);
  msg_content_.Swap(&other->msg_content_);
  std::swap(msg_id_, other->msg_id_);
  to_userid_.Swap(&other->to_userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_SendMessageRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_SendMessageRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_SendMessageRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_SendMessageRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_SendMessageRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_SendMessageRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_SendMessageRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_SendMessageRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_SendMessageRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_SendMessageRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_SendMessageRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_SendMessageRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_SendMessageRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_SendMessageRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_SendMessageRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_SendMessageRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_SendMessageRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.sessionid)
}

// optional string to_channel_id = 3;
bool YouMeVoice_Command_SendMessageRequest::has_to_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_SendMessageRequest::set_has_to_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_SendMessageRequest::clear_has_to_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_SendMessageRequest::clear_to_channel_id() {
  to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_channel_id();
}
 const ::std::string& YouMeVoice_Command_SendMessageRequest::to_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
  return to_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageRequest::set_to_channel_id(const ::std::string& value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}
 void YouMeVoice_Command_SendMessageRequest::set_to_channel_id(const char* value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}
 void YouMeVoice_Command_SendMessageRequest::set_to_channel_id(const char* value, size_t size) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}
 ::std::string* YouMeVoice_Command_SendMessageRequest::mutable_to_channel_id() {
  set_has_to_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
  return to_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_SendMessageRequest::release_to_channel_id() {
  clear_has_to_channel_id();
  return to_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageRequest::set_allocated_to_channel_id(::std::string* to_channel_id) {
  if (to_channel_id != NULL) {
    set_has_to_channel_id();
  } else {
    clear_has_to_channel_id();
  }
  to_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_channel_id)
}

// optional bytes msg_content = 4;
bool YouMeVoice_Command_SendMessageRequest::has_msg_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_SendMessageRequest::set_has_msg_content() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_SendMessageRequest::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_SendMessageRequest::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
 const ::std::string& YouMeVoice_Command_SendMessageRequest::msg_content() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageRequest::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}
 void YouMeVoice_Command_SendMessageRequest::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}
 void YouMeVoice_Command_SendMessageRequest::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}
 ::std::string* YouMeVoice_Command_SendMessageRequest::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_SendMessageRequest::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageRequest::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_content)
}

// optional uint64 msg_id = 5;
bool YouMeVoice_Command_SendMessageRequest::has_msg_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_SendMessageRequest::set_has_msg_id() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_SendMessageRequest::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_SendMessageRequest::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
 ::youmecommon::protobuf::uint64 YouMeVoice_Command_SendMessageRequest::msg_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_id)
  return msg_id_;
}
 void YouMeVoice_Command_SendMessageRequest::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.msg_id)
}

// optional string to_userid = 9;
bool YouMeVoice_Command_SendMessageRequest::has_to_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_SendMessageRequest::set_has_to_userid() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_SendMessageRequest::clear_has_to_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_SendMessageRequest::clear_to_userid() {
  to_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_userid();
}
 const ::std::string& YouMeVoice_Command_SendMessageRequest::to_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
  return to_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageRequest::set_to_userid(const ::std::string& value) {
  set_has_to_userid();
  to_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}
 void YouMeVoice_Command_SendMessageRequest::set_to_userid(const char* value) {
  set_has_to_userid();
  to_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}
 void YouMeVoice_Command_SendMessageRequest::set_to_userid(const char* value, size_t size) {
  set_has_to_userid();
  to_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}
 ::std::string* YouMeVoice_Command_SendMessageRequest::mutable_to_userid() {
  set_has_to_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
  return to_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_SendMessageRequest::release_to_userid() {
  clear_has_to_userid();
  return to_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageRequest::set_allocated_to_userid(::std::string* to_userid) {
  if (to_userid != NULL) {
    set_has_to_userid();
  } else {
    clear_has_to_userid();
  }
  to_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageRequest.to_userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_SendMessageResponse::kHeadFieldNumber;
const int YouMeVoice_Command_SendMessageResponse::kSessionidFieldNumber;
const int YouMeVoice_Command_SendMessageResponse::kToChannelIdFieldNumber;
const int YouMeVoice_Command_SendMessageResponse::kMsgIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_SendMessageResponse::YouMeVoice_Command_SendMessageResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
}

void YouMeVoice_Command_SendMessageResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_SendMessageResponse::YouMeVoice_Command_SendMessageResponse(const YouMeVoice_Command_SendMessageResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
}

void YouMeVoice_Command_SendMessageResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  to_channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_SendMessageResponse::~YouMeVoice_Command_SendMessageResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
  SharedDtor();
}

void YouMeVoice_Command_SendMessageResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_SendMessageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_SendMessageResponse& YouMeVoice_Command_SendMessageResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_SendMessageResponse* YouMeVoice_Command_SendMessageResponse::default_instance_ = NULL;

YouMeVoice_Command_SendMessageResponse* YouMeVoice_Command_SendMessageResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_SendMessageResponse* n = new YouMeVoice_Command_SendMessageResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_SendMessageResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_SendMessageResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(msg_id_, sessionid_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_to_channel_id()) {
      to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_SendMessageResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_to_channel_id;
        break;
      }

      // optional string to_channel_id = 3;
      case 3: {
        if (tag == 26) {
         parse_to_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_SendMessageResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional string to_channel_id = 3;
  if (has_to_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->to_channel_id(), output);
  }

  // optional uint64 msg_id = 4;
  if (has_msg_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msg_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_SendMessageResponse)
}

int YouMeVoice_Command_SendMessageResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional int32 sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional string to_channel_id = 3;
    if (has_to_channel_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_channel_id());
    }

    // optional uint64 msg_id = 4;
    if (has_msg_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_SendMessageResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_SendMessageResponse*>(&from));
}

void YouMeVoice_Command_SendMessageResponse::MergeFrom(const YouMeVoice_Command_SendMessageResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_to_channel_id()) {
      set_has_to_channel_id();
      to_channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_channel_id_);
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_SendMessageResponse::CopyFrom(const YouMeVoice_Command_SendMessageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_SendMessageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_SendMessageResponse::Swap(YouMeVoice_Command_SendMessageResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_SendMessageResponse::InternalSwap(YouMeVoice_Command_SendMessageResponse* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  to_channel_id_.Swap(&other->to_channel_id_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_SendMessageResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_SendMessageResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_SendMessageResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_SendMessageResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_SendMessageResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_SendMessageResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_SendMessageResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_SendMessageResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SendMessageResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_SendMessageResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_SendMessageResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.head)
}

// optional int32 sessionid = 2;
bool YouMeVoice_Command_SendMessageResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_SendMessageResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_SendMessageResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_SendMessageResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_SendMessageResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_SendMessageResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.sessionid)
}

// optional string to_channel_id = 3;
bool YouMeVoice_Command_SendMessageResponse::has_to_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_SendMessageResponse::set_has_to_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_SendMessageResponse::clear_has_to_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_SendMessageResponse::clear_to_channel_id() {
  to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_channel_id();
}
 const ::std::string& YouMeVoice_Command_SendMessageResponse::to_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
  return to_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageResponse::set_to_channel_id(const ::std::string& value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}
 void YouMeVoice_Command_SendMessageResponse::set_to_channel_id(const char* value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}
 void YouMeVoice_Command_SendMessageResponse::set_to_channel_id(const char* value, size_t size) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}
 ::std::string* YouMeVoice_Command_SendMessageResponse::mutable_to_channel_id() {
  set_has_to_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
  return to_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_SendMessageResponse::release_to_channel_id() {
  clear_has_to_channel_id();
  return to_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_SendMessageResponse::set_allocated_to_channel_id(::std::string* to_channel_id) {
  if (to_channel_id != NULL) {
    set_has_to_channel_id();
  } else {
    clear_has_to_channel_id();
  }
  to_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.to_channel_id)
}

// optional uint64 msg_id = 4;
bool YouMeVoice_Command_SendMessageResponse::has_msg_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_SendMessageResponse::set_has_msg_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_SendMessageResponse::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_SendMessageResponse::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
 ::youmecommon::protobuf::uint64 YouMeVoice_Command_SendMessageResponse::msg_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.msg_id)
  return msg_id_;
}
 void YouMeVoice_Command_SendMessageResponse::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_SendMessageResponse.msg_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_MessageNotify::kHeadFieldNumber;
const int YouMeVoice_Command_MessageNotify::kFromSessionidFieldNumber;
const int YouMeVoice_Command_MessageNotify::kFromUseridFieldNumber;
const int YouMeVoice_Command_MessageNotify::kToChannelIdFieldNumber;
const int YouMeVoice_Command_MessageNotify::kMsgContentFieldNumber;
const int YouMeVoice_Command_MessageNotify::kMsgIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_MessageNotify::YouMeVoice_Command_MessageNotify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_MessageNotify)
}

void YouMeVoice_Command_MessageNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_MessageNotify::YouMeVoice_Command_MessageNotify(const YouMeVoice_Command_MessageNotify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_MessageNotify)
}

void YouMeVoice_Command_MessageNotify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  from_sessionid_ = 0;
  from_userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_MessageNotify::~YouMeVoice_Command_MessageNotify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_MessageNotify)
  SharedDtor();
}

void YouMeVoice_Command_MessageNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  from_userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  to_channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_content_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_MessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_MessageNotify& YouMeVoice_Command_MessageNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_MessageNotify* YouMeVoice_Command_MessageNotify::default_instance_ = NULL;

YouMeVoice_Command_MessageNotify* YouMeVoice_Command_MessageNotify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_MessageNotify* n = new YouMeVoice_Command_MessageNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_MessageNotify::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_MessageNotify*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(msg_id_, from_sessionid_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_from_userid()) {
      from_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_to_channel_id()) {
      to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg_content()) {
      msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_MessageNotify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_MessageNotify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_from_sessionid;
        break;
      }

      // optional int32 from_sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_from_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_sessionid_)));
          set_has_from_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_from_userid;
        break;
      }

      // optional string from_userid = 3;
      case 3: {
        if (tag == 26) {
         parse_from_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_to_channel_id;
        break;
      }

      // optional string to_channel_id = 4;
      case 4: {
        if (tag == 34) {
         parse_to_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg_content;
        break;
      }

      // optional bytes msg_content = 5;
      case 5: {
        if (tag == 42) {
         parse_msg_content:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 6;
      case 6: {
        if (tag == 48) {
         parse_msg_id:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_MessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_MessageNotify)
  return false;
#undef DO_
}

void YouMeVoice_Command_MessageNotify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_MessageNotify)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 from_sessionid = 2;
  if (has_from_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_sessionid(), output);
  }

  // optional string from_userid = 3;
  if (has_from_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->from_userid(), output);
  }

  // optional string to_channel_id = 4;
  if (has_to_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->to_channel_id(), output);
  }

  // optional bytes msg_content = 5;
  if (has_msg_content()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msg_content(), output);
  }

  // optional uint64 msg_id = 6;
  if (has_msg_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt64(6, this->msg_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_MessageNotify)
}

int YouMeVoice_Command_MessageNotify::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 62u) {
    // optional int32 from_sessionid = 2;
    if (has_from_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->from_sessionid());
    }

    // optional string from_userid = 3;
    if (has_from_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->from_userid());
    }

    // optional string to_channel_id = 4;
    if (has_to_channel_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->to_channel_id());
    }

    // optional bytes msg_content = 5;
    if (has_msg_content()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_content());
    }

    // optional uint64 msg_id = 6;
    if (has_msg_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt64Size(
          this->msg_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_MessageNotify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_MessageNotify*>(&from));
}

void YouMeVoice_Command_MessageNotify::MergeFrom(const YouMeVoice_Command_MessageNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_from_sessionid()) {
      set_from_sessionid(from.from_sessionid());
    }
    if (from.has_from_userid()) {
      set_has_from_userid();
      from_userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_userid_);
    }
    if (from.has_to_channel_id()) {
      set_has_to_channel_id();
      to_channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.to_channel_id_);
    }
    if (from.has_msg_content()) {
      set_has_msg_content();
      msg_content_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_content_);
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_MessageNotify::CopyFrom(const YouMeVoice_Command_MessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_MessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_MessageNotify::Swap(YouMeVoice_Command_MessageNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_MessageNotify::InternalSwap(YouMeVoice_Command_MessageNotify* other) {
  std::swap(head_, other->head_);
  std::swap(from_sessionid_, other->from_sessionid_);
  from_userid_.Swap(&other->from_userid_);
  to_channel_id_.Swap(&other->to_channel_id_);
  msg_content_.Swap(&other->msg_content_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_MessageNotify::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_MessageNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_MessageNotify

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_MessageNotify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_MessageNotify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_MessageNotify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_MessageNotify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_MessageNotify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MessageNotify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_MessageNotify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_MessageNotify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.head)
}

// optional int32 from_sessionid = 2;
bool YouMeVoice_Command_MessageNotify::has_from_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_MessageNotify::set_has_from_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_MessageNotify::clear_has_from_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_MessageNotify::clear_from_sessionid() {
  from_sessionid_ = 0;
  clear_has_from_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_MessageNotify::from_sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_sessionid)
  return from_sessionid_;
}
 void YouMeVoice_Command_MessageNotify::set_from_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_from_sessionid();
  from_sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_sessionid)
}

// optional string from_userid = 3;
bool YouMeVoice_Command_MessageNotify::has_from_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_MessageNotify::set_has_from_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_MessageNotify::clear_has_from_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_MessageNotify::clear_from_userid() {
  from_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_userid();
}
 const ::std::string& YouMeVoice_Command_MessageNotify::from_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
  return from_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MessageNotify::set_from_userid(const ::std::string& value) {
  set_has_from_userid();
  from_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}
 void YouMeVoice_Command_MessageNotify::set_from_userid(const char* value) {
  set_has_from_userid();
  from_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}
 void YouMeVoice_Command_MessageNotify::set_from_userid(const char* value, size_t size) {
  set_has_from_userid();
  from_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}
 ::std::string* YouMeVoice_Command_MessageNotify::mutable_from_userid() {
  set_has_from_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
  return from_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MessageNotify::release_from_userid() {
  clear_has_from_userid();
  return from_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MessageNotify::set_allocated_from_userid(::std::string* from_userid) {
  if (from_userid != NULL) {
    set_has_from_userid();
  } else {
    clear_has_from_userid();
  }
  from_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.from_userid)
}

// optional string to_channel_id = 4;
bool YouMeVoice_Command_MessageNotify::has_to_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_MessageNotify::set_has_to_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_MessageNotify::clear_has_to_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_MessageNotify::clear_to_channel_id() {
  to_channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to_channel_id();
}
 const ::std::string& YouMeVoice_Command_MessageNotify::to_channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
  return to_channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MessageNotify::set_to_channel_id(const ::std::string& value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}
 void YouMeVoice_Command_MessageNotify::set_to_channel_id(const char* value) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}
 void YouMeVoice_Command_MessageNotify::set_to_channel_id(const char* value, size_t size) {
  set_has_to_channel_id();
  to_channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}
 ::std::string* YouMeVoice_Command_MessageNotify::mutable_to_channel_id() {
  set_has_to_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
  return to_channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MessageNotify::release_to_channel_id() {
  clear_has_to_channel_id();
  return to_channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MessageNotify::set_allocated_to_channel_id(::std::string* to_channel_id) {
  if (to_channel_id != NULL) {
    set_has_to_channel_id();
  } else {
    clear_has_to_channel_id();
  }
  to_channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), to_channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.to_channel_id)
}

// optional bytes msg_content = 5;
bool YouMeVoice_Command_MessageNotify::has_msg_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_MessageNotify::set_has_msg_content() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_MessageNotify::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_MessageNotify::clear_msg_content() {
  msg_content_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_content();
}
 const ::std::string& YouMeVoice_Command_MessageNotify::msg_content() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
  return msg_content_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MessageNotify::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}
 void YouMeVoice_Command_MessageNotify::set_msg_content(const char* value) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}
 void YouMeVoice_Command_MessageNotify::set_msg_content(const void* value, size_t size) {
  set_has_msg_content();
  msg_content_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}
 ::std::string* YouMeVoice_Command_MessageNotify::mutable_msg_content() {
  set_has_msg_content();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
  return msg_content_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_MessageNotify::release_msg_content() {
  clear_has_msg_content();
  return msg_content_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_MessageNotify::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content != NULL) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
  msg_content_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), msg_content);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_content)
}

// optional uint64 msg_id = 6;
bool YouMeVoice_Command_MessageNotify::has_msg_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_MessageNotify::set_has_msg_id() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_MessageNotify::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_MessageNotify::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
  clear_has_msg_id();
}
 ::youmecommon::protobuf::uint64 YouMeVoice_Command_MessageNotify::msg_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_id)
  return msg_id_;
}
 void YouMeVoice_Command_MessageNotify::set_msg_id(::youmecommon::protobuf::uint64 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_MessageNotify.msg_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_KickingRequest::kHeadFieldNumber;
const int YouMeVoice_Command_KickingRequest::kSessionidFieldNumber;
const int YouMeVoice_Command_KickingRequest::kChannelIdFieldNumber;
const int YouMeVoice_Command_KickingRequest::kUserIdFieldNumber;
const int YouMeVoice_Command_KickingRequest::kKickTimeFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_KickingRequest::YouMeVoice_Command_KickingRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_KickingRequest)
}

void YouMeVoice_Command_KickingRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_KickingRequest::YouMeVoice_Command_KickingRequest(const YouMeVoice_Command_KickingRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_KickingRequest)
}

void YouMeVoice_Command_KickingRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_KickingRequest::~YouMeVoice_Command_KickingRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_KickingRequest)
  SharedDtor();
}

void YouMeVoice_Command_KickingRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_KickingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_KickingRequest& YouMeVoice_Command_KickingRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_KickingRequest* YouMeVoice_Command_KickingRequest::default_instance_ = NULL;

YouMeVoice_Command_KickingRequest* YouMeVoice_Command_KickingRequest::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_KickingRequest* n = new YouMeVoice_Command_KickingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_KickingRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_KickingRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(kick_time_, sessionid_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_channel_id()) {
      channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_KickingRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_KickingRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 3;
      case 3: {
        if (tag == 26) {
         parse_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_kick_time;
        break;
      }

      // optional int64 kick_time = 5;
      case 5: {
        if (tag == 40) {
         parse_kick_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kick_time_)));
          set_has_kick_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_KickingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_KickingRequest)
  return false;
#undef DO_
}

void YouMeVoice_Command_KickingRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_KickingRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channel_id = 3;
  if (has_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel_id(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // optional int64 kick_time = 5;
  if (has_kick_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(5, this->kick_time(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_KickingRequest)
}

int YouMeVoice_Command_KickingRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channel_id()) {
    // required string channel_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  if (has_user_id()) {
    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  return total_size;
}
int YouMeVoice_Command_KickingRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channel_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());

    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 kick_time = 5;
  if (has_kick_time()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->kick_time());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_KickingRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_KickingRequest*>(&from));
}

void YouMeVoice_Command_KickingRequest::MergeFrom(const YouMeVoice_Command_KickingRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channel_id()) {
      set_has_channel_id();
      channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_kick_time()) {
      set_kick_time(from.kick_time());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_KickingRequest::CopyFrom(const YouMeVoice_Command_KickingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_KickingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_KickingRequest::Swap(YouMeVoice_Command_KickingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_KickingRequest::InternalSwap(YouMeVoice_Command_KickingRequest* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channel_id_.Swap(&other->channel_id_);
  user_id_.Swap(&other->user_id_);
  std::swap(kick_time_, other->kick_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_KickingRequest::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_KickingRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_KickingRequest

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_KickingRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_KickingRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_KickingRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_KickingRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_KickingRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_KickingRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_KickingRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_KickingRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingRequest.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_KickingRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_KickingRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_KickingRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_KickingRequest::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_KickingRequest::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.sessionid)
}

// required string channel_id = 3;
bool YouMeVoice_Command_KickingRequest::has_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_KickingRequest::set_has_channel_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_KickingRequest::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_KickingRequest::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
 const ::std::string& YouMeVoice_Command_KickingRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingRequest::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}
 void YouMeVoice_Command_KickingRequest::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}
 void YouMeVoice_Command_KickingRequest::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}
 ::std::string* YouMeVoice_Command_KickingRequest::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingRequest::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingRequest::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingRequest.channel_id)
}

// required string user_id = 4;
bool YouMeVoice_Command_KickingRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_KickingRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_KickingRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_KickingRequest::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Command_KickingRequest::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}
 void YouMeVoice_Command_KickingRequest::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}
 void YouMeVoice_Command_KickingRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}
 ::std::string* YouMeVoice_Command_KickingRequest::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingRequest::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingRequest.user_id)
}

// optional int64 kick_time = 5;
bool YouMeVoice_Command_KickingRequest::has_kick_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_KickingRequest::set_has_kick_time() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_KickingRequest::clear_has_kick_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_KickingRequest::clear_kick_time() {
  kick_time_ = GOOGLE_LONGLONG(0);
  clear_has_kick_time();
}
 ::youmecommon::protobuf::int64 YouMeVoice_Command_KickingRequest::kick_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingRequest.kick_time)
  return kick_time_;
}
 void YouMeVoice_Command_KickingRequest::set_kick_time(::youmecommon::protobuf::int64 value) {
  set_has_kick_time();
  kick_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingRequest.kick_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_KickingResponse::kHeadFieldNumber;
const int YouMeVoice_Command_KickingResponse::kChannelIdFieldNumber;
const int YouMeVoice_Command_KickingResponse::kUserIdFieldNumber;
const int YouMeVoice_Command_KickingResponse::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_KickingResponse::YouMeVoice_Command_KickingResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_KickingResponse)
}

void YouMeVoice_Command_KickingResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_KickingResponse::YouMeVoice_Command_KickingResponse(const YouMeVoice_Command_KickingResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_KickingResponse)
}

void YouMeVoice_Command_KickingResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_KickingResponse::~YouMeVoice_Command_KickingResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_KickingResponse)
  SharedDtor();
}

void YouMeVoice_Command_KickingResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_KickingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_KickingResponse& YouMeVoice_Command_KickingResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_KickingResponse* YouMeVoice_Command_KickingResponse::default_instance_ = NULL;

YouMeVoice_Command_KickingResponse* YouMeVoice_Command_KickingResponse::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_KickingResponse* n = new YouMeVoice_Command_KickingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_KickingResponse::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channel_id()) {
      channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_KickingResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_KickingResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_id;
        break;
      }

      // optional string user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 4;
      case 4: {
        if (tag == 32) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_KickingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_KickingResponse)
  return false;
#undef DO_
}

void YouMeVoice_Command_KickingResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_KickingResponse)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional string channel_id = 2;
  if (has_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_id(), output);
  }

  // optional string user_id = 3;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // optional int32 sessionid = 4;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_KickingResponse)
}

int YouMeVoice_Command_KickingResponse::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // optional string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional int32 sessionid = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_KickingResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_KickingResponse*>(&from));
}

void YouMeVoice_Command_KickingResponse::MergeFrom(const YouMeVoice_Command_KickingResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_channel_id()) {
      set_has_channel_id();
      channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_KickingResponse::CopyFrom(const YouMeVoice_Command_KickingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_KickingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_KickingResponse::Swap(YouMeVoice_Command_KickingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_KickingResponse::InternalSwap(YouMeVoice_Command_KickingResponse* other) {
  std::swap(head_, other->head_);
  channel_id_.Swap(&other->channel_id_);
  user_id_.Swap(&other->user_id_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_KickingResponse::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_KickingResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_KickingResponse

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_KickingResponse::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_KickingResponse::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_KickingResponse::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_KickingResponse::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_KickingResponse::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingResponse::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingResponse.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingResponse::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_KickingResponse::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingResponse.head)
}

// optional string channel_id = 2;
bool YouMeVoice_Command_KickingResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_KickingResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_KickingResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_KickingResponse::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
 const ::std::string& YouMeVoice_Command_KickingResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingResponse::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}
 void YouMeVoice_Command_KickingResponse::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}
 void YouMeVoice_Command_KickingResponse::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}
 ::std::string* YouMeVoice_Command_KickingResponse::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingResponse::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingResponse::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingResponse.channel_id)
}

// optional string user_id = 3;
bool YouMeVoice_Command_KickingResponse::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_KickingResponse::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_KickingResponse::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_KickingResponse::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Command_KickingResponse::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingResponse::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}
 void YouMeVoice_Command_KickingResponse::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}
 void YouMeVoice_Command_KickingResponse::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}
 ::std::string* YouMeVoice_Command_KickingResponse::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingResponse::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingResponse::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingResponse.user_id)
}

// optional int32 sessionid = 4;
bool YouMeVoice_Command_KickingResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_KickingResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_KickingResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_KickingResponse::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingResponse.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_KickingResponse::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingResponse.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_KickingNotify::kHeadFieldNumber;
const int YouMeVoice_Command_KickingNotify::kSrcUserIdFieldNumber;
const int YouMeVoice_Command_KickingNotify::kKickMsgFieldNumber;
const int YouMeVoice_Command_KickingNotify::kChannelIdFieldNumber;
const int YouMeVoice_Command_KickingNotify::kSessionidFieldNumber;
const int YouMeVoice_Command_KickingNotify::kKickCodeFieldNumber;
const int YouMeVoice_Command_KickingNotify::kKickTimeFieldNumber;
const int YouMeVoice_Command_KickingNotify::kKickedUserIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_KickingNotify::YouMeVoice_Command_KickingNotify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_KickingNotify)
}

void YouMeVoice_Command_KickingNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_KickingNotify::YouMeVoice_Command_KickingNotify(const YouMeVoice_Command_KickingNotify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_KickingNotify)
}

void YouMeVoice_Command_KickingNotify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  src_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_msg_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  kick_code_ = 0;
  kick_time_ = GOOGLE_LONGLONG(0);
  kicked_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_KickingNotify::~YouMeVoice_Command_KickingNotify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_KickingNotify)
  SharedDtor();
}

void YouMeVoice_Command_KickingNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  src_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_msg_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  kicked_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_KickingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_KickingNotify& YouMeVoice_Command_KickingNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_KickingNotify* YouMeVoice_Command_KickingNotify::default_instance_ = NULL;

YouMeVoice_Command_KickingNotify* YouMeVoice_Command_KickingNotify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_KickingNotify* n = new YouMeVoice_Command_KickingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_KickingNotify::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_KickingNotify*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(sessionid_, kick_time_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_src_user_id()) {
      src_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_kick_msg()) {
      kick_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_channel_id()) {
      channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_kicked_user_id()) {
      kicked_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_KickingNotify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_KickingNotify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_src_user_id;
        break;
      }

      // optional string src_user_id = 2;
      case 2: {
        if (tag == 18) {
         parse_src_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_kick_msg;
        break;
      }

      // optional string kick_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_kick_msg:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kick_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_channel_id;
        break;
      }

      // required string channel_id = 4;
      case 4: {
        if (tag == 34) {
         parse_channel_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 5;
      case 5: {
        if (tag == 40) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_kick_code;
        break;
      }

      // optional int32 kick_code = 6;
      case 6: {
        if (tag == 48) {
         parse_kick_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kick_code_)));
          set_has_kick_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_kick_time;
        break;
      }

      // optional int64 kick_time = 7;
      case 7: {
        if (tag == 56) {
         parse_kick_time:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kick_time_)));
          set_has_kick_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_kicked_user_id;
        break;
      }

      // optional string kicked_user_id = 8;
      case 8: {
        if (tag == 66) {
         parse_kicked_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kicked_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_KickingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_KickingNotify)
  return false;
#undef DO_
}

void YouMeVoice_Command_KickingNotify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_KickingNotify)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional string src_user_id = 2;
  if (has_src_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->src_user_id(), output);
  }

  // optional string kick_msg = 3;
  if (has_kick_msg()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->kick_msg(), output);
  }

  // required string channel_id = 4;
  if (has_channel_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->channel_id(), output);
  }

  // optional int32 sessionid = 5;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->sessionid(), output);
  }

  // optional int32 kick_code = 6;
  if (has_kick_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->kick_code(), output);
  }

  // optional int64 kick_time = 7;
  if (has_kick_time()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(7, this->kick_time(), output);
  }

  // optional string kicked_user_id = 8;
  if (has_kicked_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->kicked_user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_KickingNotify)
}

int YouMeVoice_Command_KickingNotify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_channel_id()) {
    // required string channel_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());
  }

  return total_size;
}
int YouMeVoice_Command_KickingNotify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string channel_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channel_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 246u) {
    // optional string src_user_id = 2;
    if (has_src_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->src_user_id());
    }

    // optional string kick_msg = 3;
    if (has_kick_msg()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->kick_msg());
    }

    // optional int32 sessionid = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }

    // optional int32 kick_code = 6;
    if (has_kick_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->kick_code());
    }

    // optional int64 kick_time = 7;
    if (has_kick_time()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
          this->kick_time());
    }

    // optional string kicked_user_id = 8;
    if (has_kicked_user_id()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->kicked_user_id());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_KickingNotify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_KickingNotify*>(&from));
}

void YouMeVoice_Command_KickingNotify::MergeFrom(const YouMeVoice_Command_KickingNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_src_user_id()) {
      set_has_src_user_id();
      src_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_user_id_);
    }
    if (from.has_kick_msg()) {
      set_has_kick_msg();
      kick_msg_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.kick_msg_);
    }
    if (from.has_channel_id()) {
      set_has_channel_id();
      channel_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_id_);
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_kick_code()) {
      set_kick_code(from.kick_code());
    }
    if (from.has_kick_time()) {
      set_kick_time(from.kick_time());
    }
    if (from.has_kicked_user_id()) {
      set_has_kicked_user_id();
      kicked_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.kicked_user_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_KickingNotify::CopyFrom(const YouMeVoice_Command_KickingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_KickingNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_KickingNotify::Swap(YouMeVoice_Command_KickingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_KickingNotify::InternalSwap(YouMeVoice_Command_KickingNotify* other) {
  std::swap(head_, other->head_);
  src_user_id_.Swap(&other->src_user_id_);
  kick_msg_.Swap(&other->kick_msg_);
  channel_id_.Swap(&other->channel_id_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(kick_code_, other->kick_code_);
  std::swap(kick_time_, other->kick_time_);
  kicked_user_id_.Swap(&other->kicked_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_KickingNotify::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_KickingNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_KickingNotify

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_KickingNotify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_KickingNotify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_KickingNotify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_KickingNotify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingNotify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_KickingNotify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_KickingNotify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.head)
}

// optional string src_user_id = 2;
bool YouMeVoice_Command_KickingNotify::has_src_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_src_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_KickingNotify::clear_has_src_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_KickingNotify::clear_src_user_id() {
  src_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_user_id();
}
 const ::std::string& YouMeVoice_Command_KickingNotify::src_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
  return src_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_src_user_id(const ::std::string& value) {
  set_has_src_user_id();
  src_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}
 void YouMeVoice_Command_KickingNotify::set_src_user_id(const char* value) {
  set_has_src_user_id();
  src_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}
 void YouMeVoice_Command_KickingNotify::set_src_user_id(const char* value, size_t size) {
  set_has_src_user_id();
  src_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}
 ::std::string* YouMeVoice_Command_KickingNotify::mutable_src_user_id() {
  set_has_src_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
  return src_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingNotify::release_src_user_id() {
  clear_has_src_user_id();
  return src_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_allocated_src_user_id(::std::string* src_user_id) {
  if (src_user_id != NULL) {
    set_has_src_user_id();
  } else {
    clear_has_src_user_id();
  }
  src_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), src_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.src_user_id)
}

// optional string kick_msg = 3;
bool YouMeVoice_Command_KickingNotify::has_kick_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_kick_msg() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_KickingNotify::clear_has_kick_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_KickingNotify::clear_kick_msg() {
  kick_msg_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kick_msg();
}
 const ::std::string& YouMeVoice_Command_KickingNotify::kick_msg() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
  return kick_msg_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_kick_msg(const ::std::string& value) {
  set_has_kick_msg();
  kick_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}
 void YouMeVoice_Command_KickingNotify::set_kick_msg(const char* value) {
  set_has_kick_msg();
  kick_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}
 void YouMeVoice_Command_KickingNotify::set_kick_msg(const char* value, size_t size) {
  set_has_kick_msg();
  kick_msg_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}
 ::std::string* YouMeVoice_Command_KickingNotify::mutable_kick_msg() {
  set_has_kick_msg();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
  return kick_msg_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingNotify::release_kick_msg() {
  clear_has_kick_msg();
  return kick_msg_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_allocated_kick_msg(::std::string* kick_msg) {
  if (kick_msg != NULL) {
    set_has_kick_msg();
  } else {
    clear_has_kick_msg();
  }
  kick_msg_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), kick_msg);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_msg)
}

// required string channel_id = 4;
bool YouMeVoice_Command_KickingNotify::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_KickingNotify::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_KickingNotify::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_id();
}
 const ::std::string& YouMeVoice_Command_KickingNotify::channel_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
  return channel_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}
 void YouMeVoice_Command_KickingNotify::set_channel_id(const char* value) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}
 void YouMeVoice_Command_KickingNotify::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  channel_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}
 ::std::string* YouMeVoice_Command_KickingNotify::mutable_channel_id() {
  set_has_channel_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
  return channel_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingNotify::release_channel_id() {
  clear_has_channel_id();
  return channel_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id != NULL) {
    set_has_channel_id();
  } else {
    clear_has_channel_id();
  }
  channel_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.channel_id)
}

// optional int32 sessionid = 5;
bool YouMeVoice_Command_KickingNotify::has_sessionid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_sessionid() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_KickingNotify::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_KickingNotify::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingNotify::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_KickingNotify::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.sessionid)
}

// optional int32 kick_code = 6;
bool YouMeVoice_Command_KickingNotify::has_kick_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_kick_code() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Command_KickingNotify::clear_has_kick_code() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Command_KickingNotify::clear_kick_code() {
  kick_code_ = 0;
  clear_has_kick_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_KickingNotify::kick_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_code)
  return kick_code_;
}
 void YouMeVoice_Command_KickingNotify::set_kick_code(::youmecommon::protobuf::int32 value) {
  set_has_kick_code();
  kick_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_code)
}

// optional int64 kick_time = 7;
bool YouMeVoice_Command_KickingNotify::has_kick_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_kick_time() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Command_KickingNotify::clear_has_kick_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Command_KickingNotify::clear_kick_time() {
  kick_time_ = GOOGLE_LONGLONG(0);
  clear_has_kick_time();
}
 ::youmecommon::protobuf::int64 YouMeVoice_Command_KickingNotify::kick_time() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_time)
  return kick_time_;
}
 void YouMeVoice_Command_KickingNotify::set_kick_time(::youmecommon::protobuf::int64 value) {
  set_has_kick_time();
  kick_time_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kick_time)
}

// optional string kicked_user_id = 8;
bool YouMeVoice_Command_KickingNotify::has_kicked_user_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Command_KickingNotify::set_has_kicked_user_id() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Command_KickingNotify::clear_has_kicked_user_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Command_KickingNotify::clear_kicked_user_id() {
  kicked_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kicked_user_id();
}
 const ::std::string& YouMeVoice_Command_KickingNotify::kicked_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
  return kicked_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_kicked_user_id(const ::std::string& value) {
  set_has_kicked_user_id();
  kicked_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}
 void YouMeVoice_Command_KickingNotify::set_kicked_user_id(const char* value) {
  set_has_kicked_user_id();
  kicked_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}
 void YouMeVoice_Command_KickingNotify::set_kicked_user_id(const char* value, size_t size) {
  set_has_kicked_user_id();
  kicked_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}
 ::std::string* YouMeVoice_Command_KickingNotify::mutable_kicked_user_id() {
  set_has_kicked_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
  return kicked_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_KickingNotify::release_kicked_user_id() {
  clear_has_kicked_user_id();
  return kicked_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_KickingNotify::set_allocated_kicked_user_id(::std::string* kicked_user_id) {
  if (kicked_user_id != NULL) {
    set_has_kicked_user_id();
  } else {
    clear_has_kicked_user_id();
  }
  kicked_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), kicked_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_KickingNotify.kicked_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Media_ctl_Header::kCmdFieldNumber;
const int YouMeVoice_Media_ctl_Header::kSeqFieldNumber;
const int YouMeVoice_Media_ctl_Header::kTimestampFieldNumber;
const int YouMeVoice_Media_ctl_Header::kSessionFieldNumber;
const int YouMeVoice_Media_ctl_Header::kRetCodeFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Media_ctl_Header::YouMeVoice_Media_ctl_Header()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Media_ctl_Header)
}

void YouMeVoice_Media_ctl_Header::InitAsDefaultInstance() {
}

YouMeVoice_Media_ctl_Header::YouMeVoice_Media_ctl_Header(const YouMeVoice_Media_ctl_Header& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Media_ctl_Header)
}

void YouMeVoice_Media_ctl_Header::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_ = 0;
  seq_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  session_ = 0;
  ret_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Media_ctl_Header::~YouMeVoice_Media_ctl_Header() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Media_ctl_Header)
  SharedDtor();
}

void YouMeVoice_Media_ctl_Header::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_Media_ctl_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Media_ctl_Header& YouMeVoice_Media_ctl_Header::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Media_ctl_Header* YouMeVoice_Media_ctl_Header::default_instance_ = NULL;

YouMeVoice_Media_ctl_Header* YouMeVoice_Media_ctl_Header::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Media_ctl_Header* n = new YouMeVoice_Media_ctl_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Media_ctl_Header::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Media_ctl_Header*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(cmd_, ret_code_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Media_ctl_Header::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Media_ctl_Header)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // required int32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_session;
        break;
      }

      // required int32 session = 4;
      case 4: {
        if (tag == 32) {
         parse_session:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret_code;
        break;
      }

      // optional int32 ret_code = 5;
      case 5: {
        if (tag == 40) {
         parse_ret_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Media_ctl_Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Media_ctl_Header)
  return false;
#undef DO_
}

void YouMeVoice_Media_ctl_Header::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Media_ctl_Header)
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  // required int64 timestamp = 3;
  if (has_timestamp()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // required int32 session = 4;
  if (has_session()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->session(), output);
  }

  // optional int32 ret_code = 5;
  if (has_ret_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Media_ctl_Header)
}

int YouMeVoice_Media_ctl_Header::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_cmd()) {
    // required int32 cmd = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());
  }

  if (has_seq()) {
    // required int32 seq = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_session()) {
    // required int32 session = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->session());
  }

  return total_size;
}
int YouMeVoice_Media_ctl_Header::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 cmd = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->cmd());

    // required int32 seq = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());

    // required int64 timestamp = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int32 session = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->session());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 ret_code = 5;
  if (has_ret_code()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->ret_code());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Media_ctl_Header::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Media_ctl_Header*>(&from));
}

void YouMeVoice_Media_ctl_Header::MergeFrom(const YouMeVoice_Media_ctl_Header& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Media_ctl_Header::CopyFrom(const YouMeVoice_Media_ctl_Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Media_ctl_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void YouMeVoice_Media_ctl_Header::Swap(YouMeVoice_Media_ctl_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Media_ctl_Header::InternalSwap(YouMeVoice_Media_ctl_Header* other) {
  std::swap(cmd_, other->cmd_);
  std::swap(seq_, other->seq_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(session_, other->session_);
  std::swap(ret_code_, other->ret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Media_ctl_Header::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Media_ctl_Header";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Media_ctl_Header

// required int32 cmd = 1;
bool YouMeVoice_Media_ctl_Header::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Media_ctl_Header::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Media_ctl_Header::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Media_ctl_Header::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::cmd() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.cmd)
  return cmd_;
}
 void YouMeVoice_Media_ctl_Header::set_cmd(::youmecommon::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.cmd)
}

// required int32 seq = 2;
bool YouMeVoice_Media_ctl_Header::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Media_ctl_Header::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Media_ctl_Header::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Media_ctl_Header::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::seq() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.seq)
  return seq_;
}
 void YouMeVoice_Media_ctl_Header::set_seq(::youmecommon::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.seq)
}

// required int64 timestamp = 3;
bool YouMeVoice_Media_ctl_Header::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Media_ctl_Header::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Media_ctl_Header::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Media_ctl_Header::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::youmecommon::protobuf::int64 YouMeVoice_Media_ctl_Header::timestamp() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.timestamp)
  return timestamp_;
}
 void YouMeVoice_Media_ctl_Header::set_timestamp(::youmecommon::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.timestamp)
}

// required int32 session = 4;
bool YouMeVoice_Media_ctl_Header::has_session() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Media_ctl_Header::set_has_session() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Media_ctl_Header::clear_has_session() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Media_ctl_Header::clear_session() {
  session_ = 0;
  clear_has_session();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::session() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.session)
  return session_;
}
 void YouMeVoice_Media_ctl_Header::set_session(::youmecommon::protobuf::int32 value) {
  set_has_session();
  session_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.session)
}

// optional int32 ret_code = 5;
bool YouMeVoice_Media_ctl_Header::has_ret_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Media_ctl_Header::set_has_ret_code() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Media_ctl_Header::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Media_ctl_Header::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_ctl_Header::ret_code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_ctl_Header.ret_code)
  return ret_code_;
}
 void YouMeVoice_Media_ctl_Header::set_ret_code(::youmecommon::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_ctl_Header.ret_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LostPacketStatNotify::kMinSeqFieldNumber;
const int LostPacketStatNotify::kMaxSeqFieldNumber;
const int LostPacketStatNotify::kTotalRecvNumFieldNumber;
const int LostPacketStatNotify::kLastStatStFieldNumber;
const int LostPacketStatNotify::kCurrStatStFieldNumber;
const int LostPacketStatNotify::kMediaTypeFieldNumber;
#endif  // !_MSC_VER

LostPacketStatNotify::LostPacketStatNotify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.LostPacketStatNotify)
}

void LostPacketStatNotify::InitAsDefaultInstance() {
}

LostPacketStatNotify::LostPacketStatNotify(const LostPacketStatNotify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.LostPacketStatNotify)
}

void LostPacketStatNotify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  min_seq_ = 0;
  max_seq_ = 0;
  total_recv_num_ = 0;
  last_stat_st_ = GOOGLE_LONGLONG(0);
  curr_stat_st_ = GOOGLE_LONGLONG(0);
  media_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LostPacketStatNotify::~LostPacketStatNotify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.LostPacketStatNotify)
  SharedDtor();
}

void LostPacketStatNotify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LostPacketStatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LostPacketStatNotify& LostPacketStatNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

LostPacketStatNotify* LostPacketStatNotify::default_instance_ = NULL;

LostPacketStatNotify* LostPacketStatNotify::New(::youmecommon::protobuf::Arena* arena) const {
  LostPacketStatNotify* n = new LostPacketStatNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LostPacketStatNotify::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LostPacketStatNotify*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(min_seq_, total_recv_num_);
    curr_stat_st_ = GOOGLE_LONGLONG(0);
    media_type_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LostPacketStatNotify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.LostPacketStatNotify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_seq_)));
          set_has_min_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_seq;
        break;
      }

      // required int32 max_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_max_seq:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_seq_)));
          set_has_max_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_recv_num;
        break;
      }

      // required int32 total_recv_num = 3;
      case 3: {
        if (tag == 24) {
         parse_total_recv_num:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_recv_num_)));
          set_has_total_recv_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_last_stat_st;
        break;
      }

      // required int64 last_stat_st = 4;
      case 4: {
        if (tag == 32) {
         parse_last_stat_st:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_stat_st_)));
          set_has_last_stat_st();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_curr_stat_st;
        break;
      }

      // required int64 curr_stat_st = 5;
      case 5: {
        if (tag == 40) {
         parse_curr_stat_st:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curr_stat_st_)));
          set_has_curr_stat_st();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_media_type;
        break;
      }

      // optional int32 media_type = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_media_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
          set_has_media_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.LostPacketStatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.LostPacketStatNotify)
  return false;
#undef DO_
}

void LostPacketStatNotify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.LostPacketStatNotify)
  // required int32 min_seq = 1;
  if (has_min_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_seq(), output);
  }

  // required int32 max_seq = 2;
  if (has_max_seq()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_seq(), output);
  }

  // required int32 total_recv_num = 3;
  if (has_total_recv_num()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_recv_num(), output);
  }

  // required int64 last_stat_st = 4;
  if (has_last_stat_st()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(4, this->last_stat_st(), output);
  }

  // required int64 curr_stat_st = 5;
  if (has_curr_stat_st()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(5, this->curr_stat_st(), output);
  }

  // optional int32 media_type = 6 [default = 1];
  if (has_media_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->media_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.LostPacketStatNotify)
}

int LostPacketStatNotify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_min_seq()) {
    // required int32 min_seq = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->min_seq());
  }

  if (has_max_seq()) {
    // required int32 max_seq = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->max_seq());
  }

  if (has_total_recv_num()) {
    // required int32 total_recv_num = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->total_recv_num());
  }

  if (has_last_stat_st()) {
    // required int64 last_stat_st = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->last_stat_st());
  }

  if (has_curr_stat_st()) {
    // required int64 curr_stat_st = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->curr_stat_st());
  }

  return total_size;
}
int LostPacketStatNotify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 min_seq = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->min_seq());

    // required int32 max_seq = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->max_seq());

    // required int32 total_recv_num = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->total_recv_num());

    // required int64 last_stat_st = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->last_stat_st());

    // required int64 curr_stat_st = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
        this->curr_stat_st());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 media_type = 6 [default = 1];
  if (has_media_type()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LostPacketStatNotify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const LostPacketStatNotify*>(&from));
}

void LostPacketStatNotify::MergeFrom(const LostPacketStatNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_seq()) {
      set_min_seq(from.min_seq());
    }
    if (from.has_max_seq()) {
      set_max_seq(from.max_seq());
    }
    if (from.has_total_recv_num()) {
      set_total_recv_num(from.total_recv_num());
    }
    if (from.has_last_stat_st()) {
      set_last_stat_st(from.last_stat_st());
    }
    if (from.has_curr_stat_st()) {
      set_curr_stat_st(from.curr_stat_st());
    }
    if (from.has_media_type()) {
      set_media_type(from.media_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void LostPacketStatNotify::CopyFrom(const LostPacketStatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostPacketStatNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LostPacketStatNotify::Swap(LostPacketStatNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LostPacketStatNotify::InternalSwap(LostPacketStatNotify* other) {
  std::swap(min_seq_, other->min_seq_);
  std::swap(max_seq_, other->max_seq_);
  std::swap(total_recv_num_, other->total_recv_num_);
  std::swap(last_stat_st_, other->last_stat_st_);
  std::swap(curr_stat_st_, other->curr_stat_st_);
  std::swap(media_type_, other->media_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LostPacketStatNotify::GetTypeName() const {
  return "YouMeProtocol.LostPacketStatNotify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LostPacketStatNotify

// required int32 min_seq = 1;
bool LostPacketStatNotify::has_min_seq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LostPacketStatNotify::set_has_min_seq() {
  _has_bits_[0] |= 0x00000001u;
}
void LostPacketStatNotify::clear_has_min_seq() {
  _has_bits_[0] &= ~0x00000001u;
}
void LostPacketStatNotify::clear_min_seq() {
  min_seq_ = 0;
  clear_has_min_seq();
}
 ::youmecommon::protobuf::int32 LostPacketStatNotify::min_seq() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.min_seq)
  return min_seq_;
}
 void LostPacketStatNotify::set_min_seq(::youmecommon::protobuf::int32 value) {
  set_has_min_seq();
  min_seq_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.min_seq)
}

// required int32 max_seq = 2;
bool LostPacketStatNotify::has_max_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LostPacketStatNotify::set_has_max_seq() {
  _has_bits_[0] |= 0x00000002u;
}
void LostPacketStatNotify::clear_has_max_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
void LostPacketStatNotify::clear_max_seq() {
  max_seq_ = 0;
  clear_has_max_seq();
}
 ::youmecommon::protobuf::int32 LostPacketStatNotify::max_seq() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.max_seq)
  return max_seq_;
}
 void LostPacketStatNotify::set_max_seq(::youmecommon::protobuf::int32 value) {
  set_has_max_seq();
  max_seq_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.max_seq)
}

// required int32 total_recv_num = 3;
bool LostPacketStatNotify::has_total_recv_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LostPacketStatNotify::set_has_total_recv_num() {
  _has_bits_[0] |= 0x00000004u;
}
void LostPacketStatNotify::clear_has_total_recv_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void LostPacketStatNotify::clear_total_recv_num() {
  total_recv_num_ = 0;
  clear_has_total_recv_num();
}
 ::youmecommon::protobuf::int32 LostPacketStatNotify::total_recv_num() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.total_recv_num)
  return total_recv_num_;
}
 void LostPacketStatNotify::set_total_recv_num(::youmecommon::protobuf::int32 value) {
  set_has_total_recv_num();
  total_recv_num_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.total_recv_num)
}

// required int64 last_stat_st = 4;
bool LostPacketStatNotify::has_last_stat_st() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LostPacketStatNotify::set_has_last_stat_st() {
  _has_bits_[0] |= 0x00000008u;
}
void LostPacketStatNotify::clear_has_last_stat_st() {
  _has_bits_[0] &= ~0x00000008u;
}
void LostPacketStatNotify::clear_last_stat_st() {
  last_stat_st_ = GOOGLE_LONGLONG(0);
  clear_has_last_stat_st();
}
 ::youmecommon::protobuf::int64 LostPacketStatNotify::last_stat_st() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.last_stat_st)
  return last_stat_st_;
}
 void LostPacketStatNotify::set_last_stat_st(::youmecommon::protobuf::int64 value) {
  set_has_last_stat_st();
  last_stat_st_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.last_stat_st)
}

// required int64 curr_stat_st = 5;
bool LostPacketStatNotify::has_curr_stat_st() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LostPacketStatNotify::set_has_curr_stat_st() {
  _has_bits_[0] |= 0x00000010u;
}
void LostPacketStatNotify::clear_has_curr_stat_st() {
  _has_bits_[0] &= ~0x00000010u;
}
void LostPacketStatNotify::clear_curr_stat_st() {
  curr_stat_st_ = GOOGLE_LONGLONG(0);
  clear_has_curr_stat_st();
}
 ::youmecommon::protobuf::int64 LostPacketStatNotify::curr_stat_st() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.curr_stat_st)
  return curr_stat_st_;
}
 void LostPacketStatNotify::set_curr_stat_st(::youmecommon::protobuf::int64 value) {
  set_has_curr_stat_st();
  curr_stat_st_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.curr_stat_st)
}

// optional int32 media_type = 6 [default = 1];
bool LostPacketStatNotify::has_media_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LostPacketStatNotify::set_has_media_type() {
  _has_bits_[0] |= 0x00000020u;
}
void LostPacketStatNotify::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void LostPacketStatNotify::clear_media_type() {
  media_type_ = 1;
  clear_has_media_type();
}
 ::youmecommon::protobuf::int32 LostPacketStatNotify::media_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.LostPacketStatNotify.media_type)
  return media_type_;
}
 void LostPacketStatNotify::set_media_type(::youmecommon::protobuf::int32 value) {
  set_has_media_type();
  media_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.LostPacketStatNotify.media_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Media_ctl_req::kHeadFieldNumber;
const int YouMeVoice_Command_Media_ctl_req::kStatIntervalFieldNumber;
const int YouMeVoice_Command_Media_ctl_req::kStatTypeFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Media_ctl_req::YouMeVoice_Command_Media_ctl_req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
}

void YouMeVoice_Command_Media_ctl_req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::YouMeVoice_Media_ctl_Header*>(
      ::YouMeProtocol::YouMeVoice_Media_ctl_Header::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::YouMeVoice_Media_ctl_Header*>(&::YouMeProtocol::YouMeVoice_Media_ctl_Header::default_instance());
#endif
}

YouMeVoice_Command_Media_ctl_req::YouMeVoice_Command_Media_ctl_req(const YouMeVoice_Command_Media_ctl_req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
}

void YouMeVoice_Command_Media_ctl_req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  stat_interval_ = 0;
  stat_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Media_ctl_req::~YouMeVoice_Command_Media_ctl_req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
  SharedDtor();
}

void YouMeVoice_Command_Media_ctl_req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Media_ctl_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Media_ctl_req& YouMeVoice_Command_Media_ctl_req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Media_ctl_req* YouMeVoice_Command_Media_ctl_req::default_instance_ = NULL;

YouMeVoice_Command_Media_ctl_req* YouMeVoice_Command_Media_ctl_req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Media_ctl_req* n = new YouMeVoice_Command_Media_ctl_req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Media_ctl_req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_Media_ctl_req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(stat_interval_, stat_type_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::YouMeVoice_Media_ctl_Header::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Media_ctl_req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stat_interval;
        break;
      }

      // optional int32 stat_interval = 2;
      case 2: {
        if (tag == 16) {
         parse_stat_interval:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_interval_)));
          set_has_stat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stat_type;
        break;
      }

      // optional int32 stat_type = 3;
      case 3: {
        if (tag == 24) {
         parse_stat_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stat_type_)));
          set_has_stat_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
  return false;
#undef DO_
}

void YouMeVoice_Command_Media_ctl_req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
  // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional int32 stat_interval = 2;
  if (has_stat_interval()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->stat_interval(), output);
  }

  // optional int32 stat_type = 3;
  if (has_stat_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->stat_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Media_ctl_req)
}

int YouMeVoice_Command_Media_ctl_req::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional int32 stat_interval = 2;
    if (has_stat_interval()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->stat_interval());
    }

    // optional int32 stat_type = 3;
    if (has_stat_type()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->stat_type());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Media_ctl_req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Media_ctl_req*>(&from));
}

void YouMeVoice_Command_Media_ctl_req::MergeFrom(const YouMeVoice_Command_Media_ctl_req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::YouMeVoice_Media_ctl_Header::MergeFrom(from.head());
    }
    if (from.has_stat_interval()) {
      set_stat_interval(from.stat_interval());
    }
    if (from.has_stat_type()) {
      set_stat_type(from.stat_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Media_ctl_req::CopyFrom(const YouMeVoice_Command_Media_ctl_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Media_ctl_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Media_ctl_req::Swap(YouMeVoice_Command_Media_ctl_req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Media_ctl_req::InternalSwap(YouMeVoice_Command_Media_ctl_req* other) {
  std::swap(head_, other->head_);
  std::swap(stat_interval_, other->stat_interval_);
  std::swap(stat_type_, other->stat_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Media_ctl_req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Media_ctl_req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Media_ctl_req

// required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
bool YouMeVoice_Command_Media_ctl_req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Media_ctl_req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Media_ctl_req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Media_ctl_req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::YouMeVoice_Media_ctl_Header::Clear();
  clear_has_head();
}
const ::YouMeProtocol::YouMeVoice_Media_ctl_Header& YouMeVoice_Command_Media_ctl_req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::YouMeVoice_Media_ctl_Header;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.head)
  return head_;
}
::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_req::release_head() {
  clear_has_head();
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Media_ctl_req::set_allocated_head(::YouMeProtocol::YouMeVoice_Media_ctl_Header* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.head)
}

// optional int32 stat_interval = 2;
bool YouMeVoice_Command_Media_ctl_req::has_stat_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Media_ctl_req::set_has_stat_interval() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Media_ctl_req::clear_has_stat_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Media_ctl_req::clear_stat_interval() {
  stat_interval_ = 0;
  clear_has_stat_interval();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Media_ctl_req::stat_interval() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_interval)
  return stat_interval_;
}
 void YouMeVoice_Command_Media_ctl_req::set_stat_interval(::youmecommon::protobuf::int32 value) {
  set_has_stat_interval();
  stat_interval_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_interval)
}

// optional int32 stat_type = 3;
bool YouMeVoice_Command_Media_ctl_req::has_stat_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Media_ctl_req::set_has_stat_type() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Media_ctl_req::clear_has_stat_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Media_ctl_req::clear_stat_type() {
  stat_type_ = 0;
  clear_has_stat_type();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Media_ctl_req::stat_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_type)
  return stat_type_;
}
 void YouMeVoice_Command_Media_ctl_req::set_stat_type(::youmecommon::protobuf::int32 value) {
  set_has_stat_type();
  stat_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Media_ctl_req.stat_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Media_ctl_rsp::kHeadFieldNumber;
const int YouMeVoice_Command_Media_ctl_rsp::kPacketStatFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Media_ctl_rsp::YouMeVoice_Command_Media_ctl_rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
}

void YouMeVoice_Command_Media_ctl_rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::YouMeVoice_Media_ctl_Header*>(
      ::YouMeProtocol::YouMeVoice_Media_ctl_Header::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::YouMeVoice_Media_ctl_Header*>(&::YouMeProtocol::YouMeVoice_Media_ctl_Header::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  packet_stat_ = const_cast< ::YouMeProtocol::LostPacketStatNotify*>(
      ::YouMeProtocol::LostPacketStatNotify::internal_default_instance());
#else
  packet_stat_ = const_cast< ::YouMeProtocol::LostPacketStatNotify*>(&::YouMeProtocol::LostPacketStatNotify::default_instance());
#endif
}

YouMeVoice_Command_Media_ctl_rsp::YouMeVoice_Command_Media_ctl_rsp(const YouMeVoice_Command_Media_ctl_rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
}

void YouMeVoice_Command_Media_ctl_rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  packet_stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Media_ctl_rsp::~YouMeVoice_Command_Media_ctl_rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
  SharedDtor();
}

void YouMeVoice_Command_Media_ctl_rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
    delete packet_stat_;
  }
}

void YouMeVoice_Command_Media_ctl_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Media_ctl_rsp& YouMeVoice_Command_Media_ctl_rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Media_ctl_rsp* YouMeVoice_Command_Media_ctl_rsp::default_instance_ = NULL;

YouMeVoice_Command_Media_ctl_rsp* YouMeVoice_Command_Media_ctl_rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Media_ctl_rsp* n = new YouMeVoice_Command_Media_ctl_rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Media_ctl_rsp::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::YouMeVoice_Media_ctl_Header::Clear();
    }
    if (has_packet_stat()) {
      if (packet_stat_ != NULL) packet_stat_->::YouMeProtocol::LostPacketStatNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Media_ctl_rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_packet_stat;
        break;
      }

      // optional .YouMeProtocol.LostPacketStatNotify packet_stat = 2;
      case 2: {
        if (tag == 18) {
         parse_packet_stat:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet_stat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
  return false;
#undef DO_
}

void YouMeVoice_Command_Media_ctl_rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
  // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // optional .YouMeProtocol.LostPacketStatNotify packet_stat = 2;
  if (has_packet_stat()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->packet_stat_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp)
}

int YouMeVoice_Command_Media_ctl_rsp::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // optional .YouMeProtocol.LostPacketStatNotify packet_stat = 2;
  if (has_packet_stat()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_stat_);
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Media_ctl_rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Media_ctl_rsp*>(&from));
}

void YouMeVoice_Command_Media_ctl_rsp::MergeFrom(const YouMeVoice_Command_Media_ctl_rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::YouMeVoice_Media_ctl_Header::MergeFrom(from.head());
    }
    if (from.has_packet_stat()) {
      mutable_packet_stat()->::YouMeProtocol::LostPacketStatNotify::MergeFrom(from.packet_stat());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Media_ctl_rsp::CopyFrom(const YouMeVoice_Command_Media_ctl_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Media_ctl_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  if (has_packet_stat()) {
    if (!this->packet_stat_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Media_ctl_rsp::Swap(YouMeVoice_Command_Media_ctl_rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Media_ctl_rsp::InternalSwap(YouMeVoice_Command_Media_ctl_rsp* other) {
  std::swap(head_, other->head_);
  std::swap(packet_stat_, other->packet_stat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Media_ctl_rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Media_ctl_rsp

// required .YouMeProtocol.YouMeVoice_Media_ctl_Header head = 1;
bool YouMeVoice_Command_Media_ctl_rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Media_ctl_rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Media_ctl_rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Media_ctl_rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::YouMeVoice_Media_ctl_Header::Clear();
  clear_has_head();
}
const ::YouMeProtocol::YouMeVoice_Media_ctl_Header& YouMeVoice_Command_Media_ctl_rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::YouMeVoice_Media_ctl_Header;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.head)
  return head_;
}
::YouMeProtocol::YouMeVoice_Media_ctl_Header* YouMeVoice_Command_Media_ctl_rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::YouMeVoice_Media_ctl_Header* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Media_ctl_rsp::set_allocated_head(::YouMeProtocol::YouMeVoice_Media_ctl_Header* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.head)
}

// optional .YouMeProtocol.LostPacketStatNotify packet_stat = 2;
bool YouMeVoice_Command_Media_ctl_rsp::has_packet_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Media_ctl_rsp::set_has_packet_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Media_ctl_rsp::clear_has_packet_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Media_ctl_rsp::clear_packet_stat() {
  if (packet_stat_ != NULL) packet_stat_->::YouMeProtocol::LostPacketStatNotify::Clear();
  clear_has_packet_stat();
}
const ::YouMeProtocol::LostPacketStatNotify& YouMeVoice_Command_Media_ctl_rsp::packet_stat() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.packet_stat)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return packet_stat_ != NULL ? *packet_stat_ : *default_instance().packet_stat_;
#else
  return packet_stat_ != NULL ? *packet_stat_ : *default_instance_->packet_stat_;
#endif
}
::YouMeProtocol::LostPacketStatNotify* YouMeVoice_Command_Media_ctl_rsp::mutable_packet_stat() {
  set_has_packet_stat();
  if (packet_stat_ == NULL) {
    packet_stat_ = new ::YouMeProtocol::LostPacketStatNotify;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.packet_stat)
  return packet_stat_;
}
::YouMeProtocol::LostPacketStatNotify* YouMeVoice_Command_Media_ctl_rsp::release_packet_stat() {
  clear_has_packet_stat();
  ::YouMeProtocol::LostPacketStatNotify* temp = packet_stat_;
  packet_stat_ = NULL;
  return temp;
}
void YouMeVoice_Command_Media_ctl_rsp::set_allocated_packet_stat(::YouMeProtocol::LostPacketStatNotify* packet_stat) {
  delete packet_stat_;
  packet_stat_ = packet_stat;
  if (packet_stat) {
    set_has_packet_stat();
  } else {
    clear_has_packet_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Media_ctl_rsp.packet_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_AVInput_Status_Req::kHeadFieldNumber;
const int YouMeVoice_Command_AVInput_Status_Req::kSessionidFieldNumber;
const int YouMeVoice_Command_AVInput_Status_Req::kUseridFieldNumber;
const int YouMeVoice_Command_AVInput_Status_Req::kMediaTypeFieldNumber;
const int YouMeVoice_Command_AVInput_Status_Req::kOpFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_AVInput_Status_Req::YouMeVoice_Command_AVInput_Status_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
}

void YouMeVoice_Command_AVInput_Status_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_AVInput_Status_Req::YouMeVoice_Command_AVInput_Status_Req(const YouMeVoice_Command_AVInput_Status_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
}

void YouMeVoice_Command_AVInput_Status_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_AVInput_Status_Req::~YouMeVoice_Command_AVInput_Status_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
  SharedDtor();
}

void YouMeVoice_Command_AVInput_Status_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_AVInput_Status_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_AVInput_Status_Req& YouMeVoice_Command_AVInput_Status_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_AVInput_Status_Req* YouMeVoice_Command_AVInput_Status_Req::default_instance_ = NULL;

YouMeVoice_Command_AVInput_Status_Req* YouMeVoice_Command_AVInput_Status_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_AVInput_Status_Req* n = new YouMeVoice_Command_AVInput_Status_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_AVInput_Status_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_AVInput_Status_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, op_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_AVInput_Status_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (tag == 26) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_media_type;
        break;
      }

      // required int32 media_type = 4;
      case 4: {
        if (tag == 32) {
         parse_media_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
          set_has_media_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_op;
        break;
      }

      // required int32 op = 5;
      case 5: {
        if (tag == 40) {
         parse_op:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
  return false;
#undef DO_
}

void YouMeVoice_Command_AVInput_Status_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // required int32 media_type = 4;
  if (has_media_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->media_type(), output);
  }

  // required int32 op = 5;
  if (has_op()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->op(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req)
}

int YouMeVoice_Command_AVInput_Status_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_userid()) {
    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_media_type()) {
    // required int32 media_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  if (has_op()) {
    // required int32 op = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->op());
  }

  return total_size;
}
int YouMeVoice_Command_AVInput_Status_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 media_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());

    // required int32 op = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_AVInput_Status_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_AVInput_Status_Req*>(&from));
}

void YouMeVoice_Command_AVInput_Status_Req::MergeFrom(const YouMeVoice_Command_AVInput_Status_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_media_type()) {
      set_media_type(from.media_type());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_AVInput_Status_Req::CopyFrom(const YouMeVoice_Command_AVInput_Status_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_AVInput_Status_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_AVInput_Status_Req::Swap(YouMeVoice_Command_AVInput_Status_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_AVInput_Status_Req::InternalSwap(YouMeVoice_Command_AVInput_Status_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  userid_.Swap(&other->userid_);
  std::swap(media_type_, other->media_type_);
  std::swap(op_, other->op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_AVInput_Status_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_AVInput_Status_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_AVInput_Status_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_AVInput_Status_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_AVInput_Status_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_AVInput_Status_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_AVInput_Status_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_AVInput_Status_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_AVInput_Status_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.sessionid)
}

// required string userid = 3;
bool YouMeVoice_Command_AVInput_Status_Req::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Req::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_AVInput_Status_Req::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AVInput_Status_Req::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}
 void YouMeVoice_Command_AVInput_Status_Req::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}
 void YouMeVoice_Command_AVInput_Status_Req::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}
 ::std::string* YouMeVoice_Command_AVInput_Status_Req::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_AVInput_Status_Req::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AVInput_Status_Req::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.userid)
}

// required int32 media_type = 4;
bool YouMeVoice_Command_AVInput_Status_Req::has_media_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Req::set_has_media_type() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_media_type() {
  media_type_ = 0;
  clear_has_media_type();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Req::media_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.media_type)
  return media_type_;
}
 void YouMeVoice_Command_AVInput_Status_Req::set_media_type(::youmecommon::protobuf::int32 value) {
  set_has_media_type();
  media_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.media_type)
}

// required int32 op = 5;
bool YouMeVoice_Command_AVInput_Status_Req::has_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Req::set_has_op() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_has_op() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_AVInput_Status_Req::clear_op() {
  op_ = 0;
  clear_has_op();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Req::op() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.op)
  return op_;
}
 void YouMeVoice_Command_AVInput_Status_Req::set_op(::youmecommon::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Req.op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_AVInput_Status_Rsq::kHeadFieldNumber;
const int YouMeVoice_Command_AVInput_Status_Rsq::kUseridFieldNumber;
const int YouMeVoice_Command_AVInput_Status_Rsq::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_AVInput_Status_Rsq::YouMeVoice_Command_AVInput_Status_Rsq()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
}

void YouMeVoice_Command_AVInput_Status_Rsq::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_AVInput_Status_Rsq::YouMeVoice_Command_AVInput_Status_Rsq(const YouMeVoice_Command_AVInput_Status_Rsq& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
}

void YouMeVoice_Command_AVInput_Status_Rsq::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_AVInput_Status_Rsq::~YouMeVoice_Command_AVInput_Status_Rsq() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
  SharedDtor();
}

void YouMeVoice_Command_AVInput_Status_Rsq::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_AVInput_Status_Rsq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_AVInput_Status_Rsq& YouMeVoice_Command_AVInput_Status_Rsq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_AVInput_Status_Rsq* YouMeVoice_Command_AVInput_Status_Rsq::default_instance_ = NULL;

YouMeVoice_Command_AVInput_Status_Rsq* YouMeVoice_Command_AVInput_Status_Rsq::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_AVInput_Status_Rsq* n = new YouMeVoice_Command_AVInput_Status_Rsq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_AVInput_Status_Rsq::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_AVInput_Status_Rsq::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }

      // required string userid = 2;
      case 2: {
        if (tag == 18) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
  return false;
#undef DO_
}

void YouMeVoice_Command_AVInput_Status_Rsq::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string userid = 2;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // required int32 sessionid = 3;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq)
}

int YouMeVoice_Command_AVInput_Status_Rsq::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_userid()) {
    // required string userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_sessionid()) {
    // required int32 sessionid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_AVInput_Status_Rsq::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 sessionid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_AVInput_Status_Rsq::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_AVInput_Status_Rsq*>(&from));
}

void YouMeVoice_Command_AVInput_Status_Rsq::MergeFrom(const YouMeVoice_Command_AVInput_Status_Rsq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_AVInput_Status_Rsq::CopyFrom(const YouMeVoice_Command_AVInput_Status_Rsq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_AVInput_Status_Rsq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_AVInput_Status_Rsq::Swap(YouMeVoice_Command_AVInput_Status_Rsq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_AVInput_Status_Rsq::InternalSwap(YouMeVoice_Command_AVInput_Status_Rsq* other) {
  std::swap(head_, other->head_);
  userid_.Swap(&other->userid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_AVInput_Status_Rsq::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_AVInput_Status_Rsq

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_AVInput_Status_Rsq::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Rsq::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_AVInput_Status_Rsq::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_AVInput_Status_Rsq::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_AVInput_Status_Rsq::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Status_Rsq::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Status_Rsq::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_AVInput_Status_Rsq::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.head)
}

// required string userid = 2;
bool YouMeVoice_Command_AVInput_Status_Rsq::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Rsq::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_AVInput_Status_Rsq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_AVInput_Status_Rsq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_AVInput_Status_Rsq::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AVInput_Status_Rsq::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}
 void YouMeVoice_Command_AVInput_Status_Rsq::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}
 void YouMeVoice_Command_AVInput_Status_Rsq::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}
 ::std::string* YouMeVoice_Command_AVInput_Status_Rsq::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_AVInput_Status_Rsq::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AVInput_Status_Rsq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.userid)
}

// required int32 sessionid = 3;
bool YouMeVoice_Command_AVInput_Status_Rsq::has_sessionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_AVInput_Status_Rsq::set_has_sessionid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_AVInput_Status_Rsq::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_AVInput_Status_Rsq::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Status_Rsq::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_AVInput_Status_Rsq::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Status_Rsq.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_AVInput_Notify::kHeadFieldNumber;
const int YouMeVoice_Command_AVInput_Notify::kSessionidFieldNumber;
const int YouMeVoice_Command_AVInput_Notify::kUseridFieldNumber;
const int YouMeVoice_Command_AVInput_Notify::kMediaTypeFieldNumber;
const int YouMeVoice_Command_AVInput_Notify::kOpFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_AVInput_Notify::YouMeVoice_Command_AVInput_Notify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
}

void YouMeVoice_Command_AVInput_Notify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_AVInput_Notify::YouMeVoice_Command_AVInput_Notify(const YouMeVoice_Command_AVInput_Notify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
}

void YouMeVoice_Command_AVInput_Notify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  media_type_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_AVInput_Notify::~YouMeVoice_Command_AVInput_Notify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
  SharedDtor();
}

void YouMeVoice_Command_AVInput_Notify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_AVInput_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_AVInput_Notify& YouMeVoice_Command_AVInput_Notify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_AVInput_Notify* YouMeVoice_Command_AVInput_Notify::default_instance_ = NULL;

YouMeVoice_Command_AVInput_Notify* YouMeVoice_Command_AVInput_Notify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_AVInput_Notify* n = new YouMeVoice_Command_AVInput_Notify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_AVInput_Notify::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Command_AVInput_Notify*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, op_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_AVInput_Notify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (tag == 26) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_media_type;
        break;
      }

      // required int32 media_type = 4;
      case 4: {
        if (tag == 32) {
         parse_media_type:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &media_type_)));
          set_has_media_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_op;
        break;
      }

      // required int32 op = 5;
      case 5: {
        if (tag == 40) {
         parse_op:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
  return false;
#undef DO_
}

void YouMeVoice_Command_AVInput_Notify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // required int32 media_type = 4;
  if (has_media_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->media_type(), output);
  }

  // required int32 op = 5;
  if (has_op()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->op(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_AVInput_Notify)
}

int YouMeVoice_Command_AVInput_Notify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_userid()) {
    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_media_type()) {
    // required int32 media_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());
  }

  if (has_op()) {
    // required int32 op = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->op());
  }

  return total_size;
}
int YouMeVoice_Command_AVInput_Notify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 media_type = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->media_type());

    // required int32 op = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->op());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_AVInput_Notify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_AVInput_Notify*>(&from));
}

void YouMeVoice_Command_AVInput_Notify::MergeFrom(const YouMeVoice_Command_AVInput_Notify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_media_type()) {
      set_media_type(from.media_type());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_AVInput_Notify::CopyFrom(const YouMeVoice_Command_AVInput_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_AVInput_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_AVInput_Notify::Swap(YouMeVoice_Command_AVInput_Notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_AVInput_Notify::InternalSwap(YouMeVoice_Command_AVInput_Notify* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  userid_.Swap(&other->userid_);
  std::swap(media_type_, other->media_type_);
  std::swap(op_, other->op_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_AVInput_Notify::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_AVInput_Notify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_AVInput_Notify

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_AVInput_Notify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_AVInput_Notify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_AVInput_Notify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_AVInput_Notify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_AVInput_Notify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Notify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_AVInput_Notify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_AVInput_Notify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_AVInput_Notify::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_AVInput_Notify::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_AVInput_Notify::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_AVInput_Notify::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Notify::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_AVInput_Notify::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.sessionid)
}

// required string userid = 3;
bool YouMeVoice_Command_AVInput_Notify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_AVInput_Notify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_AVInput_Notify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_AVInput_Notify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Command_AVInput_Notify::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AVInput_Notify::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}
 void YouMeVoice_Command_AVInput_Notify::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}
 void YouMeVoice_Command_AVInput_Notify::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}
 ::std::string* YouMeVoice_Command_AVInput_Notify::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_AVInput_Notify::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_AVInput_Notify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.userid)
}

// required int32 media_type = 4;
bool YouMeVoice_Command_AVInput_Notify::has_media_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_AVInput_Notify::set_has_media_type() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_AVInput_Notify::clear_has_media_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_AVInput_Notify::clear_media_type() {
  media_type_ = 0;
  clear_has_media_type();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Notify::media_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.media_type)
  return media_type_;
}
 void YouMeVoice_Command_AVInput_Notify::set_media_type(::youmecommon::protobuf::int32 value) {
  set_has_media_type();
  media_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.media_type)
}

// required int32 op = 5;
bool YouMeVoice_Command_AVInput_Notify::has_op() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Command_AVInput_Notify::set_has_op() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Command_AVInput_Notify::clear_has_op() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Command_AVInput_Notify::clear_op() {
  op_ = 0;
  clear_has_op();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_AVInput_Notify::op() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.op)
  return op_;
}
 void YouMeVoice_Command_AVInput_Notify::set_op(::youmecommon::protobuf::int32 value) {
  set_has_op();
  op_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_AVInput_Notify.op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Query_User_Video_Info_Req::kHeadFieldNumber;
const int YouMeVoice_Command_Query_User_Video_Info_Req::kSessionidFieldNumber;
const int YouMeVoice_Command_Query_User_Video_Info_Req::kOtherUseridListFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Query_User_Video_Info_Req::YouMeVoice_Command_Query_User_Video_Info_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
}

void YouMeVoice_Command_Query_User_Video_Info_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Query_User_Video_Info_Req::YouMeVoice_Command_Query_User_Video_Info_Req(const YouMeVoice_Command_Query_User_Video_Info_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
}

void YouMeVoice_Command_Query_User_Video_Info_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Query_User_Video_Info_Req::~YouMeVoice_Command_Query_User_Video_Info_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
  SharedDtor();
}

void YouMeVoice_Command_Query_User_Video_Info_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Query_User_Video_Info_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Query_User_Video_Info_Req& YouMeVoice_Command_Query_User_Video_Info_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Query_User_Video_Info_Req* YouMeVoice_Command_Query_User_Video_Info_Req::default_instance_ = NULL;

YouMeVoice_Command_Query_User_Video_Info_Req* YouMeVoice_Command_Query_User_Video_Info_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Query_User_Video_Info_Req* n = new YouMeVoice_Command_Query_User_Video_Info_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Query_User_Video_Info_Req::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
  }
  other_userid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Query_User_Video_Info_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_other_userid_list;
        break;
      }

      // repeated string other_userid_list = 3;
      case 3: {
        if (tag == 26) {
         parse_other_userid_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_other_userid_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_other_userid_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
  return false;
#undef DO_
}

void YouMeVoice_Command_Query_User_Video_Info_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // repeated string other_userid_list = 3;
  for (int i = 0; i < this->other_userid_list_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteString(
      3, this->other_userid_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req)
}

int YouMeVoice_Command_Query_User_Video_Info_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_Query_User_Video_Info_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string other_userid_list = 3;
  total_size += 1 * this->other_userid_list_size();
  for (int i = 0; i < this->other_userid_list_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
      this->other_userid_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Query_User_Video_Info_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Query_User_Video_Info_Req*>(&from));
}

void YouMeVoice_Command_Query_User_Video_Info_Req::MergeFrom(const YouMeVoice_Command_Query_User_Video_Info_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  other_userid_list_.MergeFrom(from.other_userid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Query_User_Video_Info_Req::CopyFrom(const YouMeVoice_Command_Query_User_Video_Info_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Query_User_Video_Info_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Query_User_Video_Info_Req::Swap(YouMeVoice_Command_Query_User_Video_Info_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Query_User_Video_Info_Req::InternalSwap(YouMeVoice_Command_Query_User_Video_Info_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  other_userid_list_.UnsafeArenaSwap(&other->other_userid_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Query_User_Video_Info_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Query_User_Video_Info_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Query_User_Video_Info_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Query_User_Video_Info_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Query_User_Video_Info_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Query_User_Video_Info_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_Query_User_Video_Info_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Query_User_Video_Info_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Query_User_Video_Info_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.sessionid)
}

// repeated string other_userid_list = 3;
int YouMeVoice_Command_Query_User_Video_Info_Req::other_userid_list_size() const {
  return other_userid_list_.size();
}
void YouMeVoice_Command_Query_User_Video_Info_Req::clear_other_userid_list() {
  other_userid_list_.Clear();
}
 const ::std::string& YouMeVoice_Command_Query_User_Video_Info_Req::other_userid_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return other_userid_list_.Get(index);
}
 ::std::string* YouMeVoice_Command_Query_User_Video_Info_Req::mutable_other_userid_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return other_userid_list_.Mutable(index);
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::set_other_userid_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  other_userid_list_.Mutable(index)->assign(value);
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::set_other_userid_list(int index, const char* value) {
  other_userid_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::set_other_userid_list(int index, const char* value, size_t size) {
  other_userid_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
 ::std::string* YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list() {
  return other_userid_list_.Add();
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list(const ::std::string& value) {
  other_userid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list(const char* value) {
  other_userid_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
 void YouMeVoice_Command_Query_User_Video_Info_Req::add_other_userid_list(const char* value, size_t size) {
  other_userid_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
YouMeVoice_Command_Query_User_Video_Info_Req::other_userid_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return other_userid_list_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
YouMeVoice_Command_Query_User_Video_Info_Req::mutable_other_userid_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Req.other_userid_list)
  return &other_userid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_UserVedioInfo::kOtherSessionidFieldNumber;
const int YouMeVoice_UserVedioInfo::kOtherUseridFieldNumber;
const int YouMeVoice_UserVedioInfo::kVideoInfoListFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_UserVedioInfo::YouMeVoice_UserVedioInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_UserVedioInfo)
}

void YouMeVoice_UserVedioInfo::InitAsDefaultInstance() {
}

YouMeVoice_UserVedioInfo::YouMeVoice_UserVedioInfo(const YouMeVoice_UserVedioInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_UserVedioInfo)
}

void YouMeVoice_UserVedioInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_sessionid_ = 0;
  other_userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_UserVedioInfo::~YouMeVoice_UserVedioInfo() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_UserVedioInfo)
  SharedDtor();
}

void YouMeVoice_UserVedioInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  other_userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_UserVedioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_UserVedioInfo& YouMeVoice_UserVedioInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_UserVedioInfo* YouMeVoice_UserVedioInfo::default_instance_ = NULL;

YouMeVoice_UserVedioInfo* YouMeVoice_UserVedioInfo::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_UserVedioInfo* n = new YouMeVoice_UserVedioInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_UserVedioInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    other_sessionid_ = 0;
    if (has_other_userid()) {
      other_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  video_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_UserVedioInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_UserVedioInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 other_sessionid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &other_sessionid_)));
          set_has_other_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_other_userid;
        break;
      }

      // required string other_userid = 2;
      case 2: {
        if (tag == 18) {
         parse_other_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_video_info_list;
        break;
      }

      // repeated .YouMeProtocol.YouMeVoice_Video_info video_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_video_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_video_info_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_video_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_video_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_UserVedioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_UserVedioInfo)
  return false;
#undef DO_
}

void YouMeVoice_UserVedioInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_UserVedioInfo)
  // required int32 other_sessionid = 1;
  if (has_other_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->other_sessionid(), output);
  }

  // required string other_userid = 2;
  if (has_other_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->other_userid(), output);
  }

  // repeated .YouMeProtocol.YouMeVoice_Video_info video_info_list = 3;
  for (unsigned int i = 0, n = this->video_info_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->video_info_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_UserVedioInfo)
}

int YouMeVoice_UserVedioInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_other_sessionid()) {
    // required int32 other_sessionid = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->other_sessionid());
  }

  if (has_other_userid()) {
    // required string other_userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->other_userid());
  }

  return total_size;
}
int YouMeVoice_UserVedioInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 other_sessionid = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->other_sessionid());

    // required string other_userid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->other_userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YouMeProtocol.YouMeVoice_Video_info video_info_list = 3;
  total_size += 1 * this->video_info_list_size();
  for (int i = 0; i < this->video_info_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->video_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_UserVedioInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_UserVedioInfo*>(&from));
}

void YouMeVoice_UserVedioInfo::MergeFrom(const YouMeVoice_UserVedioInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  video_info_list_.MergeFrom(from.video_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_other_sessionid()) {
      set_other_sessionid(from.other_sessionid());
    }
    if (from.has_other_userid()) {
      set_has_other_userid();
      other_userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.other_userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_UserVedioInfo::CopyFrom(const YouMeVoice_UserVedioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_UserVedioInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->video_info_list())) return false;
  return true;
}

void YouMeVoice_UserVedioInfo::Swap(YouMeVoice_UserVedioInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_UserVedioInfo::InternalSwap(YouMeVoice_UserVedioInfo* other) {
  std::swap(other_sessionid_, other->other_sessionid_);
  other_userid_.Swap(&other->other_userid_);
  video_info_list_.UnsafeArenaSwap(&other->video_info_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_UserVedioInfo::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_UserVedioInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_UserVedioInfo

// required int32 other_sessionid = 1;
bool YouMeVoice_UserVedioInfo::has_other_sessionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_UserVedioInfo::set_has_other_sessionid() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_UserVedioInfo::clear_has_other_sessionid() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_UserVedioInfo::clear_other_sessionid() {
  other_sessionid_ = 0;
  clear_has_other_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_UserVedioInfo::other_sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserVedioInfo.other_sessionid)
  return other_sessionid_;
}
 void YouMeVoice_UserVedioInfo::set_other_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_other_sessionid();
  other_sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserVedioInfo.other_sessionid)
}

// required string other_userid = 2;
bool YouMeVoice_UserVedioInfo::has_other_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_UserVedioInfo::set_has_other_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_UserVedioInfo::clear_has_other_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_UserVedioInfo::clear_other_userid() {
  other_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_other_userid();
}
 const ::std::string& YouMeVoice_UserVedioInfo::other_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
  return other_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserVedioInfo::set_other_userid(const ::std::string& value) {
  set_has_other_userid();
  other_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}
 void YouMeVoice_UserVedioInfo::set_other_userid(const char* value) {
  set_has_other_userid();
  other_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}
 void YouMeVoice_UserVedioInfo::set_other_userid(const char* value, size_t size) {
  set_has_other_userid();
  other_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}
 ::std::string* YouMeVoice_UserVedioInfo::mutable_other_userid() {
  set_has_other_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
  return other_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_UserVedioInfo::release_other_userid() {
  clear_has_other_userid();
  return other_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_UserVedioInfo::set_allocated_other_userid(::std::string* other_userid) {
  if (other_userid != NULL) {
    set_has_other_userid();
  } else {
    clear_has_other_userid();
  }
  other_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), other_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_UserVedioInfo.other_userid)
}

// repeated .YouMeProtocol.YouMeVoice_Video_info video_info_list = 3;
int YouMeVoice_UserVedioInfo::video_info_list_size() const {
  return video_info_list_.size();
}
void YouMeVoice_UserVedioInfo::clear_video_info_list() {
  video_info_list_.Clear();
}
const ::YouMeProtocol::YouMeVoice_Video_info& YouMeVoice_UserVedioInfo::video_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_.Get(index);
}
::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_UserVedioInfo::mutable_video_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_.Mutable(index);
}
::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_UserVedioInfo::add_video_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info >*
YouMeVoice_UserVedioInfo::mutable_video_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return &video_info_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_Video_info >&
YouMeVoice_UserVedioInfo::video_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_UserVedioInfo.video_info_list)
  return video_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_info::kResolutionTypeFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_info::YouMeVoice_Video_info()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_info)
}

void YouMeVoice_Video_info::InitAsDefaultInstance() {
}

YouMeVoice_Video_info::YouMeVoice_Video_info(const YouMeVoice_Video_info& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_info)
}

void YouMeVoice_Video_info::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  resolution_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_info::~YouMeVoice_Video_info() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_info)
  SharedDtor();
}

void YouMeVoice_Video_info::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_Video_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_info& YouMeVoice_Video_info::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_info* YouMeVoice_Video_info::default_instance_ = NULL;

YouMeVoice_Video_info* YouMeVoice_Video_info::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_info* n = new YouMeVoice_Video_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_info::Clear() {
  resolution_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_info::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_info)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 resolution_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolution_type_)));
          set_has_resolution_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_info)
  return false;
#undef DO_
}

void YouMeVoice_Video_info::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_info)
  // required int32 resolution_type = 1;
  if (has_resolution_type()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->resolution_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_info)
}

int YouMeVoice_Video_info::ByteSize() const {
  int total_size = 0;

  // required int32 resolution_type = 1;
  if (has_resolution_type()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->resolution_type());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_info::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_info*>(&from));
}

void YouMeVoice_Video_info::MergeFrom(const YouMeVoice_Video_info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resolution_type()) {
      set_resolution_type(from.resolution_type());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_info::CopyFrom(const YouMeVoice_Video_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void YouMeVoice_Video_info::Swap(YouMeVoice_Video_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_info::InternalSwap(YouMeVoice_Video_info* other) {
  std::swap(resolution_type_, other->resolution_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_info::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_info";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_info

// required int32 resolution_type = 1;
bool YouMeVoice_Video_info::has_resolution_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_info::set_has_resolution_type() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_info::clear_has_resolution_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_info::clear_resolution_type() {
  resolution_type_ = 0;
  clear_has_resolution_type();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_info::resolution_type() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_info.resolution_type)
  return resolution_type_;
}
 void YouMeVoice_Video_info::set_resolution_type(::youmecommon::protobuf::int32 value) {
  set_has_resolution_type();
  resolution_type_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_info.resolution_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Query_User_Video_Info_Rsp::kHeadFieldNumber;
const int YouMeVoice_Command_Query_User_Video_Info_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Command_Query_User_Video_Info_Rsp::kUserVideoInfoListFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Query_User_Video_Info_Rsp::YouMeVoice_Command_Query_User_Video_Info_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Query_User_Video_Info_Rsp::YouMeVoice_Command_Query_User_Video_Info_Rsp(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Query_User_Video_Info_Rsp::~YouMeVoice_Command_Query_User_Video_Info_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
  SharedDtor();
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Query_User_Video_Info_Rsp& YouMeVoice_Command_Query_User_Video_Info_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Query_User_Video_Info_Rsp* YouMeVoice_Command_Query_User_Video_Info_Rsp::default_instance_ = NULL;

YouMeVoice_Command_Query_User_Video_Info_Rsp* YouMeVoice_Command_Query_User_Video_Info_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Query_User_Video_Info_Rsp* n = new YouMeVoice_Command_Query_User_Video_Info_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    sessionid_ = 0;
  }
  user_video_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Query_User_Video_Info_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_video_info_list;
        break;
      }

      // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_video_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_video_info_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_video_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_user_video_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
  for (unsigned int i = 0, n = this->user_video_info_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_video_info_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp)
}

int YouMeVoice_Command_Query_User_Video_Info_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_Query_User_Video_Info_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
  total_size += 1 * this->user_video_info_list_size();
  for (int i = 0; i < this->user_video_info_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_video_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Query_User_Video_Info_Rsp*>(&from));
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::MergeFrom(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_video_info_list_.MergeFrom(from.user_video_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::CopyFrom(const YouMeVoice_Command_Query_User_Video_Info_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Query_User_Video_Info_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->user_video_info_list())) return false;
  return true;
}

void YouMeVoice_Command_Query_User_Video_Info_Rsp::Swap(YouMeVoice_Command_Query_User_Video_Info_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::InternalSwap(YouMeVoice_Command_Query_User_Video_Info_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  user_video_info_list_.UnsafeArenaSwap(&other->user_video_info_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Query_User_Video_Info_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Query_User_Video_Info_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Query_User_Video_Info_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Query_User_Video_Info_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Query_User_Video_Info_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Query_User_Video_Info_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_Query_User_Video_Info_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Query_User_Video_Info_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_Query_User_Video_Info_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.sessionid)
}

// repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
int YouMeVoice_Command_Query_User_Video_Info_Rsp::user_video_info_list_size() const {
  return user_video_info_list_.size();
}
void YouMeVoice_Command_Query_User_Video_Info_Rsp::clear_user_video_info_list() {
  user_video_info_list_.Clear();
}
const ::YouMeProtocol::YouMeVoice_UserVedioInfo& YouMeVoice_Command_Query_User_Video_Info_Rsp::user_video_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_.Get(index);
}
::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Query_User_Video_Info_Rsp::mutable_user_video_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_.Mutable(index);
}
::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Query_User_Video_Info_Rsp::add_user_video_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >*
YouMeVoice_Command_Query_User_Video_Info_Rsp::mutable_user_video_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return &user_video_info_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >&
YouMeVoice_Command_Query_User_Video_Info_Rsp::user_video_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Query_User_Video_Info_Rsp.user_video_info_list)
  return user_video_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Set_User_Video_Info_Req::kHeadFieldNumber;
const int YouMeVoice_Command_Set_User_Video_Info_Req::kSessionidFieldNumber;
const int YouMeVoice_Command_Set_User_Video_Info_Req::kUserVideoInfoListFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Set_User_Video_Info_Req::YouMeVoice_Command_Set_User_Video_Info_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
}

void YouMeVoice_Command_Set_User_Video_Info_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Command_Set_User_Video_Info_Req::YouMeVoice_Command_Set_User_Video_Info_Req(const YouMeVoice_Command_Set_User_Video_Info_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
}

void YouMeVoice_Command_Set_User_Video_Info_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Set_User_Video_Info_Req::~YouMeVoice_Command_Set_User_Video_Info_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
  SharedDtor();
}

void YouMeVoice_Command_Set_User_Video_Info_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Set_User_Video_Info_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Set_User_Video_Info_Req& YouMeVoice_Command_Set_User_Video_Info_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Set_User_Video_Info_Req* YouMeVoice_Command_Set_User_Video_Info_Req::default_instance_ = NULL;

YouMeVoice_Command_Set_User_Video_Info_Req* YouMeVoice_Command_Set_User_Video_Info_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Set_User_Video_Info_Req* n = new YouMeVoice_Command_Set_User_Video_Info_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Set_User_Video_Info_Req::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
  }
  user_video_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Set_User_Video_Info_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_video_info_list;
        break;
      }

      // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
      case 3: {
        if (tag == 26) {
         parse_user_video_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_user_video_info_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user_video_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_user_video_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
  return false;
#undef DO_
}

void YouMeVoice_Command_Set_User_Video_Info_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
  for (unsigned int i = 0, n = this->user_video_info_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->user_video_info_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req)
}

int YouMeVoice_Command_Set_User_Video_Info_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_Set_User_Video_Info_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
  total_size += 1 * this->user_video_info_list_size();
  for (int i = 0; i < this->user_video_info_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_video_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Set_User_Video_Info_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Set_User_Video_Info_Req*>(&from));
}

void YouMeVoice_Command_Set_User_Video_Info_Req::MergeFrom(const YouMeVoice_Command_Set_User_Video_Info_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_video_info_list_.MergeFrom(from.user_video_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Set_User_Video_Info_Req::CopyFrom(const YouMeVoice_Command_Set_User_Video_Info_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Set_User_Video_Info_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->user_video_info_list())) return false;
  return true;
}

void YouMeVoice_Command_Set_User_Video_Info_Req::Swap(YouMeVoice_Command_Set_User_Video_Info_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Set_User_Video_Info_Req::InternalSwap(YouMeVoice_Command_Set_User_Video_Info_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  user_video_info_list_.UnsafeArenaSwap(&other->user_video_info_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Set_User_Video_Info_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Set_User_Video_Info_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_Set_User_Video_Info_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_Set_User_Video_Info_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Set_User_Video_Info_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_Set_User_Video_Info_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_Set_User_Video_Info_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Set_User_Video_Info_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Set_User_Video_Info_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_Set_User_Video_Info_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.sessionid)
}

// repeated .YouMeProtocol.YouMeVoice_UserVedioInfo user_video_info_list = 3;
int YouMeVoice_Command_Set_User_Video_Info_Req::user_video_info_list_size() const {
  return user_video_info_list_.size();
}
void YouMeVoice_Command_Set_User_Video_Info_Req::clear_user_video_info_list() {
  user_video_info_list_.Clear();
}
const ::YouMeProtocol::YouMeVoice_UserVedioInfo& YouMeVoice_Command_Set_User_Video_Info_Req::user_video_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_.Get(index);
}
::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Set_User_Video_Info_Req::mutable_user_video_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_.Mutable(index);
}
::YouMeProtocol::YouMeVoice_UserVedioInfo* YouMeVoice_Command_Set_User_Video_Info_Req::add_user_video_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >*
YouMeVoice_Command_Set_User_Video_Info_Req::mutable_user_video_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return &user_video_info_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::YouMeVoice_UserVedioInfo >&
YouMeVoice_Command_Set_User_Video_Info_Req::user_video_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Req.user_video_info_list)
  return user_video_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Set_User_Video_Info_Rsp::kHeadFieldNumber;
const int YouMeVoice_Command_Set_User_Video_Info_Rsp::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Set_User_Video_Info_Rsp::YouMeVoice_Command_Set_User_Video_Info_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_Set_User_Video_Info_Rsp::YouMeVoice_Command_Set_User_Video_Info_Rsp(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Set_User_Video_Info_Rsp::~YouMeVoice_Command_Set_User_Video_Info_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
  SharedDtor();
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Set_User_Video_Info_Rsp& YouMeVoice_Command_Set_User_Video_Info_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Set_User_Video_Info_Rsp* YouMeVoice_Command_Set_User_Video_Info_Rsp::default_instance_ = NULL;

YouMeVoice_Command_Set_User_Video_Info_Rsp* YouMeVoice_Command_Set_User_Video_Info_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Set_User_Video_Info_Rsp* n = new YouMeVoice_Command_Set_User_Video_Info_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Set_User_Video_Info_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp)
}

int YouMeVoice_Command_Set_User_Video_Info_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_Set_User_Video_Info_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Set_User_Video_Info_Rsp*>(&from));
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::MergeFrom(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::CopyFrom(const YouMeVoice_Command_Set_User_Video_Info_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Set_User_Video_Info_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Set_User_Video_Info_Rsp::Swap(YouMeVoice_Command_Set_User_Video_Info_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::InternalSwap(YouMeVoice_Command_Set_User_Video_Info_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Set_User_Video_Info_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Set_User_Video_Info_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Set_User_Video_Info_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Set_User_Video_Info_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_Set_User_Video_Info_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Set_User_Video_Info_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Set_User_Video_Info_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_Set_User_Video_Info_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Rsp.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_Set_User_Video_Info_Notify::kHeadFieldNumber;
const int YouMeVoice_Command_Set_User_Video_Info_Notify::kSetSessionidFieldNumber;
const int YouMeVoice_Command_Set_User_Video_Info_Notify::kSetUserIdFieldNumber;
const int YouMeVoice_Command_Set_User_Video_Info_Notify::kVideoInfoFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_Set_User_Video_Info_Notify::YouMeVoice_Command_Set_User_Video_Info_Notify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_info_ = const_cast< ::YouMeProtocol::YouMeVoice_Video_info*>(
      ::YouMeProtocol::YouMeVoice_Video_info::internal_default_instance());
#else
  video_info_ = const_cast< ::YouMeProtocol::YouMeVoice_Video_info*>(&::YouMeProtocol::YouMeVoice_Video_info::default_instance());
#endif
}

YouMeVoice_Command_Set_User_Video_Info_Notify::YouMeVoice_Command_Set_User_Video_Info_Notify(const YouMeVoice_Command_Set_User_Video_Info_Notify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  set_sessionid_ = 0;
  set_user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  video_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_Set_User_Video_Info_Notify::~YouMeVoice_Command_Set_User_Video_Info_Notify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
  SharedDtor();
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  set_user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
    delete video_info_;
  }
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_Set_User_Video_Info_Notify& YouMeVoice_Command_Set_User_Video_Info_Notify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_Set_User_Video_Info_Notify* YouMeVoice_Command_Set_User_Video_Info_Notify::default_instance_ = NULL;

YouMeVoice_Command_Set_User_Video_Info_Notify* YouMeVoice_Command_Set_User_Video_Info_Notify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_Set_User_Video_Info_Notify* n = new YouMeVoice_Command_Set_User_Video_Info_Notify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    set_sessionid_ = 0;
    if (has_set_user_id()) {
      set_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_video_info()) {
      if (video_info_ != NULL) video_info_->::YouMeProtocol::YouMeVoice_Video_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_Set_User_Video_Info_Notify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_set_sessionid;
        break;
      }

      // required int32 set_sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_set_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_sessionid_)));
          set_has_set_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_set_user_id;
        break;
      }

      // required string set_user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_set_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_video_info;
        break;
      }

      // required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
      case 4: {
        if (tag == 34) {
         parse_video_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
  return false;
#undef DO_
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 set_sessionid = 2;
  if (has_set_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->set_sessionid(), output);
  }

  // required string set_user_id = 3;
  if (has_set_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->set_user_id(), output);
  }

  // required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
  if (has_video_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->video_info_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify)
}

int YouMeVoice_Command_Set_User_Video_Info_Notify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_set_sessionid()) {
    // required int32 set_sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->set_sessionid());
  }

  if (has_set_user_id()) {
    // required string set_user_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->set_user_id());
  }

  if (has_video_info()) {
    // required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_info_);
  }

  return total_size;
}
int YouMeVoice_Command_Set_User_Video_Info_Notify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 set_sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->set_sessionid());

    // required string set_user_id = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->set_user_id());

    // required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_Set_User_Video_Info_Notify*>(&from));
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::MergeFrom(const YouMeVoice_Command_Set_User_Video_Info_Notify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_set_sessionid()) {
      set_set_sessionid(from.set_sessionid());
    }
    if (from.has_set_user_id()) {
      set_has_set_user_id();
      set_user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_user_id_);
    }
    if (from.has_video_info()) {
      mutable_video_info()->::YouMeProtocol::YouMeVoice_Video_info::MergeFrom(from.video_info());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::CopyFrom(const YouMeVoice_Command_Set_User_Video_Info_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_Set_User_Video_Info_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  if (has_video_info()) {
    if (!this->video_info_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_Set_User_Video_Info_Notify::Swap(YouMeVoice_Command_Set_User_Video_Info_Notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::InternalSwap(YouMeVoice_Command_Set_User_Video_Info_Notify* other) {
  std::swap(head_, other->head_);
  std::swap(set_sessionid_, other->set_sessionid_);
  set_user_id_.Swap(&other->set_user_id_);
  std::swap(video_info_, other->video_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_Set_User_Video_Info_Notify::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_Set_User_Video_Info_Notify

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_Set_User_Video_Info_Notify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Notify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_Set_User_Video_Info_Notify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.head)
}

// required int32 set_sessionid = 2;
bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_set_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_set_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_set_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_set_sessionid() {
  set_sessionid_ = 0;
  clear_has_set_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_Set_User_Video_Info_Notify::set_sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_sessionid)
  return set_sessionid_;
}
 void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_set_sessionid();
  set_sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_sessionid)
}

// required string set_user_id = 3;
bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_set_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_set_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_set_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_set_user_id() {
  set_user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_set_user_id();
}
 const ::std::string& YouMeVoice_Command_Set_User_Video_Info_Notify::set_user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
  return set_user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_user_id(const ::std::string& value) {
  set_has_set_user_id();
  set_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}
 void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_user_id(const char* value) {
  set_has_set_user_id();
  set_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}
 void YouMeVoice_Command_Set_User_Video_Info_Notify::set_set_user_id(const char* value, size_t size) {
  set_has_set_user_id();
  set_user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}
 ::std::string* YouMeVoice_Command_Set_User_Video_Info_Notify::mutable_set_user_id() {
  set_has_set_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
  return set_user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_Set_User_Video_Info_Notify::release_set_user_id() {
  clear_has_set_user_id();
  return set_user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_Set_User_Video_Info_Notify::set_allocated_set_user_id(::std::string* set_user_id) {
  if (set_user_id != NULL) {
    set_has_set_user_id();
  } else {
    clear_has_set_user_id();
  }
  set_user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), set_user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.set_user_id)
}

// required .YouMeProtocol.YouMeVoice_Video_info video_info = 4;
bool YouMeVoice_Command_Set_User_Video_Info_Notify::has_video_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::set_has_video_info() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_has_video_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::clear_video_info() {
  if (video_info_ != NULL) video_info_->::YouMeProtocol::YouMeVoice_Video_info::Clear();
  clear_has_video_info();
}
const ::YouMeProtocol::YouMeVoice_Video_info& YouMeVoice_Command_Set_User_Video_Info_Notify::video_info() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.video_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_info_ != NULL ? *video_info_ : *default_instance().video_info_;
#else
  return video_info_ != NULL ? *video_info_ : *default_instance_->video_info_;
#endif
}
::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_Command_Set_User_Video_Info_Notify::mutable_video_info() {
  set_has_video_info();
  if (video_info_ == NULL) {
    video_info_ = new ::YouMeProtocol::YouMeVoice_Video_info;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.video_info)
  return video_info_;
}
::YouMeProtocol::YouMeVoice_Video_info* YouMeVoice_Command_Set_User_Video_Info_Notify::release_video_info() {
  clear_has_video_info();
  ::YouMeProtocol::YouMeVoice_Video_info* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
void YouMeVoice_Command_Set_User_Video_Info_Notify::set_allocated_video_info(::YouMeProtocol::YouMeVoice_Video_info* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    set_has_video_info();
  } else {
    clear_has_video_info();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_Set_User_Video_Info_Notify.video_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Media_Info::kVFrameRateFieldNumber;
const int YouMeVoice_Media_Info::kVBitRateFieldNumber;
const int YouMeVoice_Media_Info::kVLostPacketFieldNumber;
const int YouMeVoice_Media_Info::kABitRateFieldNumber;
const int YouMeVoice_Media_Info::kALostPacketFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Media_Info::YouMeVoice_Media_Info()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Media_Info)
}

void YouMeVoice_Media_Info::InitAsDefaultInstance() {
}

YouMeVoice_Media_Info::YouMeVoice_Media_Info(const YouMeVoice_Media_Info& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Media_Info)
}

void YouMeVoice_Media_Info::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  v_frame_rate_ = 0;
  v_bit_rate_ = 0;
  v_lost_packet_ = 0;
  a_bit_rate_ = 0;
  a_lost_packet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Media_Info::~YouMeVoice_Media_Info() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Media_Info)
  SharedDtor();
}

void YouMeVoice_Media_Info::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void YouMeVoice_Media_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Media_Info& YouMeVoice_Media_Info::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Media_Info* YouMeVoice_Media_Info::default_instance_ = NULL;

YouMeVoice_Media_Info* YouMeVoice_Media_Info::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Media_Info* n = new YouMeVoice_Media_Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Media_Info::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Media_Info*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(v_frame_rate_, a_lost_packet_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Media_Info::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Media_Info)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 v_frame_rate = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_frame_rate_)));
          set_has_v_frame_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_v_bit_rate;
        break;
      }

      // optional int32 v_bit_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_v_bit_rate:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_bit_rate_)));
          set_has_v_bit_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_v_lost_packet;
        break;
      }

      // optional int32 v_lost_packet = 3;
      case 3: {
        if (tag == 24) {
         parse_v_lost_packet:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_lost_packet_)));
          set_has_v_lost_packet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_a_bit_rate;
        break;
      }

      // optional int32 a_bit_rate = 4;
      case 4: {
        if (tag == 32) {
         parse_a_bit_rate:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_bit_rate_)));
          set_has_a_bit_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_a_lost_packet;
        break;
      }

      // optional int32 a_lost_packet = 5;
      case 5: {
        if (tag == 40) {
         parse_a_lost_packet:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_lost_packet_)));
          set_has_a_lost_packet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Media_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Media_Info)
  return false;
#undef DO_
}

void YouMeVoice_Media_Info::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Media_Info)
  // optional int32 v_frame_rate = 1;
  if (has_v_frame_rate()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->v_frame_rate(), output);
  }

  // optional int32 v_bit_rate = 2;
  if (has_v_bit_rate()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->v_bit_rate(), output);
  }

  // optional int32 v_lost_packet = 3;
  if (has_v_lost_packet()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->v_lost_packet(), output);
  }

  // optional int32 a_bit_rate = 4;
  if (has_a_bit_rate()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->a_bit_rate(), output);
  }

  // optional int32 a_lost_packet = 5;
  if (has_a_lost_packet()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->a_lost_packet(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Media_Info)
}

int YouMeVoice_Media_Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 v_frame_rate = 1;
    if (has_v_frame_rate()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->v_frame_rate());
    }

    // optional int32 v_bit_rate = 2;
    if (has_v_bit_rate()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->v_bit_rate());
    }

    // optional int32 v_lost_packet = 3;
    if (has_v_lost_packet()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->v_lost_packet());
    }

    // optional int32 a_bit_rate = 4;
    if (has_a_bit_rate()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->a_bit_rate());
    }

    // optional int32 a_lost_packet = 5;
    if (has_a_lost_packet()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->a_lost_packet());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Media_Info::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Media_Info*>(&from));
}

void YouMeVoice_Media_Info::MergeFrom(const YouMeVoice_Media_Info& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v_frame_rate()) {
      set_v_frame_rate(from.v_frame_rate());
    }
    if (from.has_v_bit_rate()) {
      set_v_bit_rate(from.v_bit_rate());
    }
    if (from.has_v_lost_packet()) {
      set_v_lost_packet(from.v_lost_packet());
    }
    if (from.has_a_bit_rate()) {
      set_a_bit_rate(from.a_bit_rate());
    }
    if (from.has_a_lost_packet()) {
      set_a_lost_packet(from.a_lost_packet());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Media_Info::CopyFrom(const YouMeVoice_Media_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Media_Info::IsInitialized() const {

  return true;
}

void YouMeVoice_Media_Info::Swap(YouMeVoice_Media_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Media_Info::InternalSwap(YouMeVoice_Media_Info* other) {
  std::swap(v_frame_rate_, other->v_frame_rate_);
  std::swap(v_bit_rate_, other->v_bit_rate_);
  std::swap(v_lost_packet_, other->v_lost_packet_);
  std::swap(a_bit_rate_, other->a_bit_rate_);
  std::swap(a_lost_packet_, other->a_lost_packet_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Media_Info::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Media_Info";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Media_Info

// optional int32 v_frame_rate = 1;
bool YouMeVoice_Media_Info::has_v_frame_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Media_Info::set_has_v_frame_rate() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Media_Info::clear_has_v_frame_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Media_Info::clear_v_frame_rate() {
  v_frame_rate_ = 0;
  clear_has_v_frame_rate();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::v_frame_rate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.v_frame_rate)
  return v_frame_rate_;
}
 void YouMeVoice_Media_Info::set_v_frame_rate(::youmecommon::protobuf::int32 value) {
  set_has_v_frame_rate();
  v_frame_rate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.v_frame_rate)
}

// optional int32 v_bit_rate = 2;
bool YouMeVoice_Media_Info::has_v_bit_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Media_Info::set_has_v_bit_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Media_Info::clear_has_v_bit_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Media_Info::clear_v_bit_rate() {
  v_bit_rate_ = 0;
  clear_has_v_bit_rate();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::v_bit_rate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.v_bit_rate)
  return v_bit_rate_;
}
 void YouMeVoice_Media_Info::set_v_bit_rate(::youmecommon::protobuf::int32 value) {
  set_has_v_bit_rate();
  v_bit_rate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.v_bit_rate)
}

// optional int32 v_lost_packet = 3;
bool YouMeVoice_Media_Info::has_v_lost_packet() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Media_Info::set_has_v_lost_packet() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Media_Info::clear_has_v_lost_packet() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Media_Info::clear_v_lost_packet() {
  v_lost_packet_ = 0;
  clear_has_v_lost_packet();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::v_lost_packet() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.v_lost_packet)
  return v_lost_packet_;
}
 void YouMeVoice_Media_Info::set_v_lost_packet(::youmecommon::protobuf::int32 value) {
  set_has_v_lost_packet();
  v_lost_packet_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.v_lost_packet)
}

// optional int32 a_bit_rate = 4;
bool YouMeVoice_Media_Info::has_a_bit_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Media_Info::set_has_a_bit_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Media_Info::clear_has_a_bit_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Media_Info::clear_a_bit_rate() {
  a_bit_rate_ = 0;
  clear_has_a_bit_rate();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::a_bit_rate() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.a_bit_rate)
  return a_bit_rate_;
}
 void YouMeVoice_Media_Info::set_a_bit_rate(::youmecommon::protobuf::int32 value) {
  set_has_a_bit_rate();
  a_bit_rate_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.a_bit_rate)
}

// optional int32 a_lost_packet = 5;
bool YouMeVoice_Media_Info::has_a_lost_packet() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Media_Info::set_has_a_lost_packet() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Media_Info::clear_has_a_lost_packet() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Media_Info::clear_a_lost_packet() {
  a_lost_packet_ = 0;
  clear_has_a_lost_packet();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Media_Info::a_lost_packet() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Media_Info.a_lost_packet)
  return a_lost_packet_;
}
 void YouMeVoice_Media_Info::set_a_lost_packet(::youmecommon::protobuf::int32 value) {
  set_has_a_lost_packet();
  a_lost_packet_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Media_Info.a_lost_packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_BussReport_Req::kHeadFieldNumber;
const int YouMeVoice_Command_BussReport_Req::kSessionidFieldNumber;
const int YouMeVoice_Command_BussReport_Req::kVideoInfoFieldNumber;
const int YouMeVoice_Command_BussReport_Req::kBusinessInfosFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_BussReport_Req::YouMeVoice_Command_BussReport_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
}

void YouMeVoice_Command_BussReport_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  video_info_ = const_cast< ::YouMeProtocol::YouMeVoice_Media_Info*>(
      ::YouMeProtocol::YouMeVoice_Media_Info::internal_default_instance());
#else
  video_info_ = const_cast< ::YouMeProtocol::YouMeVoice_Media_Info*>(&::YouMeProtocol::YouMeVoice_Media_Info::default_instance());
#endif
}

YouMeVoice_Command_BussReport_Req::YouMeVoice_Command_BussReport_Req(const YouMeVoice_Command_BussReport_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
}

void YouMeVoice_Command_BussReport_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  video_info_ = NULL;
  business_infos_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_BussReport_Req::~YouMeVoice_Command_BussReport_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
  SharedDtor();
}

void YouMeVoice_Command_BussReport_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  business_infos_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
    delete video_info_;
  }
}

void YouMeVoice_Command_BussReport_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_BussReport_Req& YouMeVoice_Command_BussReport_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_BussReport_Req* YouMeVoice_Command_BussReport_Req::default_instance_ = NULL;

YouMeVoice_Command_BussReport_Req* YouMeVoice_Command_BussReport_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_BussReport_Req* n = new YouMeVoice_Command_BussReport_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_BussReport_Req::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_video_info()) {
      if (video_info_ != NULL) video_info_->::YouMeProtocol::YouMeVoice_Media_Info::Clear();
    }
    if (has_business_infos()) {
      business_infos_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_BussReport_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_video_info;
        break;
      }

      // optional .YouMeProtocol.YouMeVoice_Media_Info video_info = 3;
      case 3: {
        if (tag == 26) {
         parse_video_info:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_business_infos;
        break;
      }

      // optional string business_infos = 99;
      case 99: {
        if (tag == 794) {
         parse_business_infos:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_business_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
  return false;
#undef DO_
}

void YouMeVoice_Command_BussReport_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // optional .YouMeProtocol.YouMeVoice_Media_Info video_info = 3;
  if (has_video_info()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->video_info_, output);
  }

  // optional string business_infos = 99;
  if (has_business_infos()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      99, this->business_infos(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_BussReport_Req)
}

int YouMeVoice_Command_BussReport_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_BussReport_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .YouMeProtocol.YouMeVoice_Media_Info video_info = 3;
    if (has_video_info()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->video_info_);
    }

    // optional string business_infos = 99;
    if (has_business_infos()) {
      total_size += 2 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->business_infos());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_BussReport_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_BussReport_Req*>(&from));
}

void YouMeVoice_Command_BussReport_Req::MergeFrom(const YouMeVoice_Command_BussReport_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_video_info()) {
      mutable_video_info()->::YouMeProtocol::YouMeVoice_Media_Info::MergeFrom(from.video_info());
    }
    if (from.has_business_infos()) {
      set_has_business_infos();
      business_infos_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.business_infos_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_BussReport_Req::CopyFrom(const YouMeVoice_Command_BussReport_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_BussReport_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_BussReport_Req::Swap(YouMeVoice_Command_BussReport_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_BussReport_Req::InternalSwap(YouMeVoice_Command_BussReport_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(video_info_, other->video_info_);
  business_infos_.Swap(&other->business_infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_BussReport_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_BussReport_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_BussReport_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Command_BussReport_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_BussReport_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_BussReport_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_BussReport_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Command_BussReport_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_BussReport_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Command_BussReport_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_BussReport_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_BussReport_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_BussReport_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_BussReport_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_BussReport_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_BussReport_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_BussReport_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_BussReport_Req.sessionid)
}

// optional .YouMeProtocol.YouMeVoice_Media_Info video_info = 3;
bool YouMeVoice_Command_BussReport_Req::has_video_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Command_BussReport_Req::set_has_video_info() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Command_BussReport_Req::clear_has_video_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Command_BussReport_Req::clear_video_info() {
  if (video_info_ != NULL) video_info_->::YouMeProtocol::YouMeVoice_Media_Info::Clear();
  clear_has_video_info();
}
const ::YouMeProtocol::YouMeVoice_Media_Info& YouMeVoice_Command_BussReport_Req::video_info() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.video_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return video_info_ != NULL ? *video_info_ : *default_instance().video_info_;
#else
  return video_info_ != NULL ? *video_info_ : *default_instance_->video_info_;
#endif
}
::YouMeProtocol::YouMeVoice_Media_Info* YouMeVoice_Command_BussReport_Req::mutable_video_info() {
  set_has_video_info();
  if (video_info_ == NULL) {
    video_info_ = new ::YouMeProtocol::YouMeVoice_Media_Info;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Req.video_info)
  return video_info_;
}
::YouMeProtocol::YouMeVoice_Media_Info* YouMeVoice_Command_BussReport_Req::release_video_info() {
  clear_has_video_info();
  ::YouMeProtocol::YouMeVoice_Media_Info* temp = video_info_;
  video_info_ = NULL;
  return temp;
}
void YouMeVoice_Command_BussReport_Req::set_allocated_video_info(::YouMeProtocol::YouMeVoice_Media_Info* video_info) {
  delete video_info_;
  video_info_ = video_info;
  if (video_info) {
    set_has_video_info();
  } else {
    clear_has_video_info();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Req.video_info)
}

// optional string business_infos = 99;
bool YouMeVoice_Command_BussReport_Req::has_business_infos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Command_BussReport_Req::set_has_business_infos() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Command_BussReport_Req::clear_has_business_infos() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Command_BussReport_Req::clear_business_infos() {
  business_infos_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_business_infos();
}
 const ::std::string& YouMeVoice_Command_BussReport_Req::business_infos() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
  return business_infos_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_BussReport_Req::set_business_infos(const ::std::string& value) {
  set_has_business_infos();
  business_infos_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}
 void YouMeVoice_Command_BussReport_Req::set_business_infos(const char* value) {
  set_has_business_infos();
  business_infos_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}
 void YouMeVoice_Command_BussReport_Req::set_business_infos(const char* value, size_t size) {
  set_has_business_infos();
  business_infos_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}
 ::std::string* YouMeVoice_Command_BussReport_Req::mutable_business_infos() {
  set_has_business_infos();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
  return business_infos_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Command_BussReport_Req::release_business_infos() {
  clear_has_business_infos();
  return business_infos_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Command_BussReport_Req::set_allocated_business_infos(::std::string* business_infos) {
  if (business_infos != NULL) {
    set_has_business_infos();
  } else {
    clear_has_business_infos();
  }
  business_infos_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), business_infos);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Req.business_infos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Command_BussReport_Rsp::kHeadFieldNumber;
const int YouMeVoice_Command_BussReport_Rsp::kSessionidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Command_BussReport_Rsp::YouMeVoice_Command_BussReport_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
}

void YouMeVoice_Command_BussReport_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Command_BussReport_Rsp::YouMeVoice_Command_BussReport_Rsp(const YouMeVoice_Command_BussReport_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
}

void YouMeVoice_Command_BussReport_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Command_BussReport_Rsp::~YouMeVoice_Command_BussReport_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
  SharedDtor();
}

void YouMeVoice_Command_BussReport_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Command_BussReport_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Command_BussReport_Rsp& YouMeVoice_Command_BussReport_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Command_BussReport_Rsp* YouMeVoice_Command_BussReport_Rsp::default_instance_ = NULL;

YouMeVoice_Command_BussReport_Rsp* YouMeVoice_Command_BussReport_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Command_BussReport_Rsp* n = new YouMeVoice_Command_BussReport_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Command_BussReport_Rsp::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Command_BussReport_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Command_BussReport_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp)
}

int YouMeVoice_Command_BussReport_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  return total_size;
}
int YouMeVoice_Command_BussReport_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Command_BussReport_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Command_BussReport_Rsp*>(&from));
}

void YouMeVoice_Command_BussReport_Rsp::MergeFrom(const YouMeVoice_Command_BussReport_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Command_BussReport_Rsp::CopyFrom(const YouMeVoice_Command_BussReport_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Command_BussReport_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Command_BussReport_Rsp::Swap(YouMeVoice_Command_BussReport_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Command_BussReport_Rsp::InternalSwap(YouMeVoice_Command_BussReport_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Command_BussReport_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Command_BussReport_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Command_BussReport_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Command_BussReport_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Command_BussReport_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Command_BussReport_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Command_BussReport_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Command_BussReport_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_BussReport_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Command_BussReport_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Command_BussReport_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Command_BussReport_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Command_BussReport_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Command_BussReport_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Command_BussReport_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Command_BussReport_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Command_BussReport_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Command_BussReport_Rsp.sessionid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_SetPushSingle_Req::kHeadFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Req::kSessionidFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Req::kChannelidFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Req::kUserIdFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Req::kPushUrlFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_SetPushSingle_Req::YouMeVoice_Video_SetPushSingle_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
}

void YouMeVoice_Video_SetPushSingle_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Video_SetPushSingle_Req::YouMeVoice_Video_SetPushSingle_Req(const YouMeVoice_Video_SetPushSingle_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
}

void YouMeVoice_Video_SetPushSingle_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  push_url_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_SetPushSingle_Req::~YouMeVoice_Video_SetPushSingle_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
  SharedDtor();
}

void YouMeVoice_Video_SetPushSingle_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  push_url_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_SetPushSingle_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_SetPushSingle_Req& YouMeVoice_Video_SetPushSingle_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_SetPushSingle_Req* YouMeVoice_Video_SetPushSingle_Req::default_instance_ = NULL;

YouMeVoice_Video_SetPushSingle_Req* YouMeVoice_Video_SetPushSingle_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_SetPushSingle_Req* n = new YouMeVoice_Video_SetPushSingle_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_SetPushSingle_Req::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_push_url()) {
      push_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_SetPushSingle_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_push_url;
        break;
      }

      // required string push_url = 5;
      case 5: {
        if (tag == 42) {
         parse_push_url:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
  return false;
#undef DO_
}

void YouMeVoice_Video_SetPushSingle_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // required string push_url = 5;
  if (has_push_url()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->push_url(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req)
}

int YouMeVoice_Video_SetPushSingle_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_user_id()) {
    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_push_url()) {
    // required string push_url = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->push_url());
  }

  return total_size;
}
int YouMeVoice_Video_SetPushSingle_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required string push_url = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->push_url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_SetPushSingle_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_SetPushSingle_Req*>(&from));
}

void YouMeVoice_Video_SetPushSingle_Req::MergeFrom(const YouMeVoice_Video_SetPushSingle_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_push_url()) {
      set_has_push_url();
      push_url_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.push_url_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_SetPushSingle_Req::CopyFrom(const YouMeVoice_Video_SetPushSingle_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_SetPushSingle_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_SetPushSingle_Req::Swap(YouMeVoice_Video_SetPushSingle_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_SetPushSingle_Req::InternalSwap(YouMeVoice_Video_SetPushSingle_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  user_id_.Swap(&other->user_id_);
  push_url_.Swap(&other->push_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_SetPushSingle_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_SetPushSingle_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Video_SetPushSingle_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Video_SetPushSingle_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushSingle_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushSingle_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_SetPushSingle_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_SetPushSingle_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushSingle_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_SetPushSingle_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_SetPushSingle_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_SetPushSingle_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}
 void YouMeVoice_Video_SetPushSingle_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}
 void YouMeVoice_Video_SetPushSingle_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.channelid)
}

// required string user_id = 4;
bool YouMeVoice_Video_SetPushSingle_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Video_SetPushSingle_Req::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}
 void YouMeVoice_Video_SetPushSingle_Req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}
 void YouMeVoice_Video_SetPushSingle_Req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Req::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.user_id)
}

// required string push_url = 5;
bool YouMeVoice_Video_SetPushSingle_Req::has_push_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Req::set_has_push_url() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_has_push_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_SetPushSingle_Req::clear_push_url() {
  push_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_push_url();
}
 const ::std::string& YouMeVoice_Video_SetPushSingle_Req::push_url() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
  return push_url_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Req::set_push_url(const ::std::string& value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}
 void YouMeVoice_Video_SetPushSingle_Req::set_push_url(const char* value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}
 void YouMeVoice_Video_SetPushSingle_Req::set_push_url(const char* value, size_t size) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Req::mutable_push_url() {
  set_has_push_url();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
  return push_url_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Req::release_push_url() {
  clear_has_push_url();
  return push_url_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Req::set_allocated_push_url(::std::string* push_url) {
  if (push_url != NULL) {
    set_has_push_url();
  } else {
    clear_has_push_url();
  }
  push_url_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), push_url);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Req.push_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_SetPushSingle_Rsp::kHeadFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Rsp::kChannelidFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Rsp::kUserIdFieldNumber;
const int YouMeVoice_Video_SetPushSingle_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_SetPushSingle_Rsp::YouMeVoice_Video_SetPushSingle_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
}

void YouMeVoice_Video_SetPushSingle_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_SetPushSingle_Rsp::YouMeVoice_Video_SetPushSingle_Rsp(const YouMeVoice_Video_SetPushSingle_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
}

void YouMeVoice_Video_SetPushSingle_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_SetPushSingle_Rsp::~YouMeVoice_Video_SetPushSingle_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
  SharedDtor();
}

void YouMeVoice_Video_SetPushSingle_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_SetPushSingle_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_SetPushSingle_Rsp& YouMeVoice_Video_SetPushSingle_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_SetPushSingle_Rsp* YouMeVoice_Video_SetPushSingle_Rsp::default_instance_ = NULL;

YouMeVoice_Video_SetPushSingle_Rsp* YouMeVoice_Video_SetPushSingle_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_SetPushSingle_Rsp* n = new YouMeVoice_Video_SetPushSingle_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_SetPushSingle_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_SetPushSingle_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, result_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_SetPushSingle_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // required int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Video_SetPushSingle_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // required int32 result = 5;
  if (has_result()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp)
}

int YouMeVoice_Video_SetPushSingle_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_user_id()) {
    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_result()) {
    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int YouMeVoice_Video_SetPushSingle_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_SetPushSingle_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_SetPushSingle_Rsp*>(&from));
}

void YouMeVoice_Video_SetPushSingle_Rsp::MergeFrom(const YouMeVoice_Video_SetPushSingle_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_SetPushSingle_Rsp::CopyFrom(const YouMeVoice_Video_SetPushSingle_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_SetPushSingle_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_SetPushSingle_Rsp::Swap(YouMeVoice_Video_SetPushSingle_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_SetPushSingle_Rsp::InternalSwap(YouMeVoice_Video_SetPushSingle_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  user_id_.Swap(&other->user_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_SetPushSingle_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_SetPushSingle_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_SetPushSingle_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_SetPushSingle_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushSingle_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushSingle_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_SetPushSingle_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_SetPushSingle_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushSingle_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_SetPushSingle_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_SetPushSingle_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.channelid)
}

// required string user_id = 4;
bool YouMeVoice_Video_SetPushSingle_Rsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Rsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Video_SetPushSingle_Rsp::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushSingle_Rsp::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.user_id)
}

// required int32 result = 5;
bool YouMeVoice_Video_SetPushSingle_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_SetPushSingle_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_SetPushSingle_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushSingle_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.result)
  return result_;
}
 void YouMeVoice_Video_SetPushSingle_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushSingle_Rsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_RemovePushSingle_Req::kHeadFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Req::kSessionidFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Req::kChannelidFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Req::kUserIdFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_RemovePushSingle_Req::YouMeVoice_Video_RemovePushSingle_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
}

void YouMeVoice_Video_RemovePushSingle_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Video_RemovePushSingle_Req::YouMeVoice_Video_RemovePushSingle_Req(const YouMeVoice_Video_RemovePushSingle_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
}

void YouMeVoice_Video_RemovePushSingle_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_RemovePushSingle_Req::~YouMeVoice_Video_RemovePushSingle_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
  SharedDtor();
}

void YouMeVoice_Video_RemovePushSingle_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_RemovePushSingle_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_RemovePushSingle_Req& YouMeVoice_Video_RemovePushSingle_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_RemovePushSingle_Req* YouMeVoice_Video_RemovePushSingle_Req::default_instance_ = NULL;

YouMeVoice_Video_RemovePushSingle_Req* YouMeVoice_Video_RemovePushSingle_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_RemovePushSingle_Req* n = new YouMeVoice_Video_RemovePushSingle_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_RemovePushSingle_Req::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_RemovePushSingle_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
  return false;
#undef DO_
}

void YouMeVoice_Video_RemovePushSingle_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req)
}

int YouMeVoice_Video_RemovePushSingle_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_user_id()) {
    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  return total_size;
}
int YouMeVoice_Video_RemovePushSingle_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_RemovePushSingle_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_RemovePushSingle_Req*>(&from));
}

void YouMeVoice_Video_RemovePushSingle_Req::MergeFrom(const YouMeVoice_Video_RemovePushSingle_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_RemovePushSingle_Req::CopyFrom(const YouMeVoice_Video_RemovePushSingle_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_RemovePushSingle_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_RemovePushSingle_Req::Swap(YouMeVoice_Video_RemovePushSingle_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_RemovePushSingle_Req::InternalSwap(YouMeVoice_Video_RemovePushSingle_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  user_id_.Swap(&other->user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_RemovePushSingle_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_RemovePushSingle_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Video_RemovePushSingle_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Video_RemovePushSingle_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_RemovePushSingle_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_RemovePushSingle_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_RemovePushSingle_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_RemovePushSingle_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_RemovePushSingle_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_RemovePushSingle_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_RemovePushSingle_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.channelid)
}

// required string user_id = 4;
bool YouMeVoice_Video_RemovePushSingle_Req::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Req::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_RemovePushSingle_Req::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Video_RemovePushSingle_Req::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Req::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Req::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Req::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Req.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_RemovePushSingle_Rsp::kHeadFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Rsp::kChannelidFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Rsp::kUserIdFieldNumber;
const int YouMeVoice_Video_RemovePushSingle_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_RemovePushSingle_Rsp::YouMeVoice_Video_RemovePushSingle_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
}

void YouMeVoice_Video_RemovePushSingle_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_RemovePushSingle_Rsp::YouMeVoice_Video_RemovePushSingle_Rsp(const YouMeVoice_Video_RemovePushSingle_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
}

void YouMeVoice_Video_RemovePushSingle_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_RemovePushSingle_Rsp::~YouMeVoice_Video_RemovePushSingle_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
  SharedDtor();
}

void YouMeVoice_Video_RemovePushSingle_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_RemovePushSingle_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_RemovePushSingle_Rsp& YouMeVoice_Video_RemovePushSingle_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_RemovePushSingle_Rsp* YouMeVoice_Video_RemovePushSingle_Rsp::default_instance_ = NULL;

YouMeVoice_Video_RemovePushSingle_Rsp* YouMeVoice_Video_RemovePushSingle_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_RemovePushSingle_Rsp* n = new YouMeVoice_Video_RemovePushSingle_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_RemovePushSingle_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_RemovePushSingle_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, result_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_user_id()) {
      user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_RemovePushSingle_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // required string user_id = 4;
      case 4: {
        if (tag == 34) {
         parse_user_id:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // required int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Video_RemovePushSingle_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string user_id = 4;
  if (has_user_id()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  // required int32 result = 5;
  if (has_result()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp)
}

int YouMeVoice_Video_RemovePushSingle_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_user_id()) {
    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  if (has_result()) {
    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int YouMeVoice_Video_RemovePushSingle_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string user_id = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());

    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_RemovePushSingle_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_RemovePushSingle_Rsp*>(&from));
}

void YouMeVoice_Video_RemovePushSingle_Rsp::MergeFrom(const YouMeVoice_Video_RemovePushSingle_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_user_id()) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_RemovePushSingle_Rsp::CopyFrom(const YouMeVoice_Video_RemovePushSingle_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_RemovePushSingle_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_RemovePushSingle_Rsp::Swap(YouMeVoice_Video_RemovePushSingle_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_RemovePushSingle_Rsp::InternalSwap(YouMeVoice_Video_RemovePushSingle_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  user_id_.Swap(&other->user_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_RemovePushSingle_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_RemovePushSingle_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_RemovePushSingle_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_RemovePushSingle_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_RemovePushSingle_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_RemovePushSingle_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_RemovePushSingle_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_RemovePushSingle_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_RemovePushSingle_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_RemovePushSingle_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.channelid)
}

// required string user_id = 4;
bool YouMeVoice_Video_RemovePushSingle_Rsp::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_id();
}
 const ::std::string& YouMeVoice_Video_RemovePushSingle_Rsp::user_id() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
  return user_id_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_user_id(const ::std::string& value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_user_id(const char* value) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  user_id_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::mutable_user_id() {
  set_has_user_id();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
  return user_id_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_RemovePushSingle_Rsp::release_user_id() {
  clear_has_user_id();
  return user_id_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    set_has_user_id();
  } else {
    clear_has_user_id();
  }
  user_id_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.user_id)
}

// required int32 result = 5;
bool YouMeVoice_Video_RemovePushSingle_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_RemovePushSingle_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_RemovePushSingle_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.result)
  return result_;
}
 void YouMeVoice_Video_RemovePushSingle_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_RemovePushSingle_Rsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_SetPushMix_Req::kHeadFieldNumber;
const int YouMeVoice_Video_SetPushMix_Req::kSessionidFieldNumber;
const int YouMeVoice_Video_SetPushMix_Req::kChannelidFieldNumber;
const int YouMeVoice_Video_SetPushMix_Req::kPrimaryUseridFieldNumber;
const int YouMeVoice_Video_SetPushMix_Req::kPushUrlFieldNumber;
const int YouMeVoice_Video_SetPushMix_Req::kVideoWidthFieldNumber;
const int YouMeVoice_Video_SetPushMix_Req::kVideoHeightFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_SetPushMix_Req::YouMeVoice_Video_SetPushMix_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
}

void YouMeVoice_Video_SetPushMix_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Video_SetPushMix_Req::YouMeVoice_Video_SetPushMix_Req(const YouMeVoice_Video_SetPushMix_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
}

void YouMeVoice_Video_SetPushMix_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  push_url_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  video_width_ = 0;
  video_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_SetPushMix_Req::~YouMeVoice_Video_SetPushMix_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
  SharedDtor();
}

void YouMeVoice_Video_SetPushMix_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  primary_userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  push_url_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_SetPushMix_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_SetPushMix_Req& YouMeVoice_Video_SetPushMix_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_SetPushMix_Req* YouMeVoice_Video_SetPushMix_Req::default_instance_ = NULL;

YouMeVoice_Video_SetPushMix_Req* YouMeVoice_Video_SetPushMix_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_SetPushMix_Req* n = new YouMeVoice_Video_SetPushMix_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_SetPushMix_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_SetPushMix_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(sessionid_, video_width_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_primary_userid()) {
      primary_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_push_url()) {
      push_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    video_height_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_SetPushMix_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_primary_userid;
        break;
      }

      // required string primary_userid = 4;
      case 4: {
        if (tag == 34) {
         parse_primary_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_primary_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_push_url;
        break;
      }

      // required string push_url = 5;
      case 5: {
        if (tag == 42) {
         parse_push_url:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_url()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_video_width;
        break;
      }

      // optional int32 video_width = 6;
      case 6: {
        if (tag == 48) {
         parse_video_width:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_width_)));
          set_has_video_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_video_height;
        break;
      }

      // optional int32 video_height = 7;
      case 7: {
        if (tag == 56) {
         parse_video_height:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_height_)));
          set_has_video_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
  return false;
#undef DO_
}

void YouMeVoice_Video_SetPushMix_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string primary_userid = 4;
  if (has_primary_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->primary_userid(), output);
  }

  // required string push_url = 5;
  if (has_push_url()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->push_url(), output);
  }

  // optional int32 video_width = 6;
  if (has_video_width()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->video_width(), output);
  }

  // optional int32 video_height = 7;
  if (has_video_height()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->video_height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req)
}

int YouMeVoice_Video_SetPushMix_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_primary_userid()) {
    // required string primary_userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->primary_userid());
  }

  if (has_push_url()) {
    // required string push_url = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->push_url());
  }

  return total_size;
}
int YouMeVoice_Video_SetPushMix_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string primary_userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->primary_userid());

    // required string push_url = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->push_url());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[5 / 32] & 96u) {
    // optional int32 video_width = 6;
    if (has_video_width()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->video_width());
    }

    // optional int32 video_height = 7;
    if (has_video_height()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->video_height());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_SetPushMix_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_SetPushMix_Req*>(&from));
}

void YouMeVoice_Video_SetPushMix_Req::MergeFrom(const YouMeVoice_Video_SetPushMix_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_primary_userid()) {
      set_has_primary_userid();
      primary_userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.primary_userid_);
    }
    if (from.has_push_url()) {
      set_has_push_url();
      push_url_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.push_url_);
    }
    if (from.has_video_width()) {
      set_video_width(from.video_width());
    }
    if (from.has_video_height()) {
      set_video_height(from.video_height());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_SetPushMix_Req::CopyFrom(const YouMeVoice_Video_SetPushMix_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_SetPushMix_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_SetPushMix_Req::Swap(YouMeVoice_Video_SetPushMix_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_SetPushMix_Req::InternalSwap(YouMeVoice_Video_SetPushMix_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  primary_userid_.Swap(&other->primary_userid_);
  push_url_.Swap(&other->push_url_);
  std::swap(video_width_, other->video_width_);
  std::swap(video_height_, other->video_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_SetPushMix_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_SetPushMix_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_SetPushMix_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Video_SetPushMix_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Video_SetPushMix_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushMix_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_SetPushMix_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_SetPushMix_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_SetPushMix_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_SetPushMix_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_SetPushMix_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_SetPushMix_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}
 void YouMeVoice_Video_SetPushMix_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}
 void YouMeVoice_Video_SetPushMix_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}
 ::std::string* YouMeVoice_Video_SetPushMix_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushMix_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.channelid)
}

// required string primary_userid = 4;
bool YouMeVoice_Video_SetPushMix_Req::has_primary_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_primary_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_primary_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_primary_userid() {
  primary_userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_primary_userid();
}
 const ::std::string& YouMeVoice_Video_SetPushMix_Req::primary_userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
  return primary_userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Req::set_primary_userid(const ::std::string& value) {
  set_has_primary_userid();
  primary_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}
 void YouMeVoice_Video_SetPushMix_Req::set_primary_userid(const char* value) {
  set_has_primary_userid();
  primary_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}
 void YouMeVoice_Video_SetPushMix_Req::set_primary_userid(const char* value, size_t size) {
  set_has_primary_userid();
  primary_userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}
 ::std::string* YouMeVoice_Video_SetPushMix_Req::mutable_primary_userid() {
  set_has_primary_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
  return primary_userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushMix_Req::release_primary_userid() {
  clear_has_primary_userid();
  return primary_userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Req::set_allocated_primary_userid(::std::string* primary_userid) {
  if (primary_userid != NULL) {
    set_has_primary_userid();
  } else {
    clear_has_primary_userid();
  }
  primary_userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), primary_userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.primary_userid)
}

// required string push_url = 5;
bool YouMeVoice_Video_SetPushMix_Req::has_push_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_push_url() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_push_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_push_url() {
  push_url_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_push_url();
}
 const ::std::string& YouMeVoice_Video_SetPushMix_Req::push_url() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
  return push_url_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Req::set_push_url(const ::std::string& value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}
 void YouMeVoice_Video_SetPushMix_Req::set_push_url(const char* value) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}
 void YouMeVoice_Video_SetPushMix_Req::set_push_url(const char* value, size_t size) {
  set_has_push_url();
  push_url_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}
 ::std::string* YouMeVoice_Video_SetPushMix_Req::mutable_push_url() {
  set_has_push_url();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
  return push_url_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushMix_Req::release_push_url() {
  clear_has_push_url();
  return push_url_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Req::set_allocated_push_url(::std::string* push_url) {
  if (push_url != NULL) {
    set_has_push_url();
  } else {
    clear_has_push_url();
  }
  push_url_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), push_url);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.push_url)
}

// optional int32 video_width = 6;
bool YouMeVoice_Video_SetPushMix_Req::has_video_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_video_width() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_video_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_video_width() {
  video_width_ = 0;
  clear_has_video_width();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Req::video_width() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_width)
  return video_width_;
}
 void YouMeVoice_Video_SetPushMix_Req::set_video_width(::youmecommon::protobuf::int32 value) {
  set_has_video_width();
  video_width_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_width)
}

// optional int32 video_height = 7;
bool YouMeVoice_Video_SetPushMix_Req::has_video_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Video_SetPushMix_Req::set_has_video_height() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_has_video_height() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Video_SetPushMix_Req::clear_video_height() {
  video_height_ = 0;
  clear_has_video_height();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Req::video_height() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_height)
  return video_height_;
}
 void YouMeVoice_Video_SetPushMix_Req::set_video_height(::youmecommon::protobuf::int32 value) {
  set_has_video_height();
  video_height_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Req.video_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_SetPushMix_Rsp::kHeadFieldNumber;
const int YouMeVoice_Video_SetPushMix_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Video_SetPushMix_Rsp::kChannelidFieldNumber;
const int YouMeVoice_Video_SetPushMix_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_SetPushMix_Rsp::YouMeVoice_Video_SetPushMix_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
}

void YouMeVoice_Video_SetPushMix_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_SetPushMix_Rsp::YouMeVoice_Video_SetPushMix_Rsp(const YouMeVoice_Video_SetPushMix_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
}

void YouMeVoice_Video_SetPushMix_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_SetPushMix_Rsp::~YouMeVoice_Video_SetPushMix_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
  SharedDtor();
}

void YouMeVoice_Video_SetPushMix_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_SetPushMix_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_SetPushMix_Rsp& YouMeVoice_Video_SetPushMix_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_SetPushMix_Rsp* YouMeVoice_Video_SetPushMix_Rsp::default_instance_ = NULL;

YouMeVoice_Video_SetPushMix_Rsp* YouMeVoice_Video_SetPushMix_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_SetPushMix_Rsp* n = new YouMeVoice_Video_SetPushMix_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_SetPushMix_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_SetPushMix_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, result_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_SetPushMix_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required int32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Video_SetPushMix_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required int32 result = 4;
  if (has_result()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp)
}

int YouMeVoice_Video_SetPushMix_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_result()) {
    // required int32 result = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int YouMeVoice_Video_SetPushMix_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required int32 result = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_SetPushMix_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_SetPushMix_Rsp*>(&from));
}

void YouMeVoice_Video_SetPushMix_Rsp::MergeFrom(const YouMeVoice_Video_SetPushMix_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_SetPushMix_Rsp::CopyFrom(const YouMeVoice_Video_SetPushMix_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_SetPushMix_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_SetPushMix_Rsp::Swap(YouMeVoice_Video_SetPushMix_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_SetPushMix_Rsp::InternalSwap(YouMeVoice_Video_SetPushMix_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_SetPushMix_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_SetPushMix_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_SetPushMix_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_SetPushMix_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_SetPushMix_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushMix_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_SetPushMix_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_SetPushMix_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_SetPushMix_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_SetPushMix_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_SetPushMix_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_SetPushMix_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_SetPushMix_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_SetPushMix_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}
 void YouMeVoice_Video_SetPushMix_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}
 void YouMeVoice_Video_SetPushMix_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}
 ::std::string* YouMeVoice_Video_SetPushMix_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_SetPushMix_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_SetPushMix_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.channelid)
}

// required int32 result = 4;
bool YouMeVoice_Video_SetPushMix_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_SetPushMix_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_SetPushMix_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_SetPushMix_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.result)
  return result_;
}
 void YouMeVoice_Video_SetPushMix_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_SetPushMix_Rsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_ClearPushMix_Req::kHeadFieldNumber;
const int YouMeVoice_Video_ClearPushMix_Req::kSessionidFieldNumber;
const int YouMeVoice_Video_ClearPushMix_Req::kChannelidFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_ClearPushMix_Req::YouMeVoice_Video_ClearPushMix_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
}

void YouMeVoice_Video_ClearPushMix_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Video_ClearPushMix_Req::YouMeVoice_Video_ClearPushMix_Req(const YouMeVoice_Video_ClearPushMix_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
}

void YouMeVoice_Video_ClearPushMix_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_ClearPushMix_Req::~YouMeVoice_Video_ClearPushMix_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
  SharedDtor();
}

void YouMeVoice_Video_ClearPushMix_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_ClearPushMix_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_ClearPushMix_Req& YouMeVoice_Video_ClearPushMix_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_ClearPushMix_Req* YouMeVoice_Video_ClearPushMix_Req::default_instance_ = NULL;

YouMeVoice_Video_ClearPushMix_Req* YouMeVoice_Video_ClearPushMix_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_ClearPushMix_Req* n = new YouMeVoice_Video_ClearPushMix_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_ClearPushMix_Req::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_ClearPushMix_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
  return false;
#undef DO_
}

void YouMeVoice_Video_ClearPushMix_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req)
}

int YouMeVoice_Video_ClearPushMix_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  return total_size;
}
int YouMeVoice_Video_ClearPushMix_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_ClearPushMix_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_ClearPushMix_Req*>(&from));
}

void YouMeVoice_Video_ClearPushMix_Req::MergeFrom(const YouMeVoice_Video_ClearPushMix_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_ClearPushMix_Req::CopyFrom(const YouMeVoice_Video_ClearPushMix_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_ClearPushMix_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_ClearPushMix_Req::Swap(YouMeVoice_Video_ClearPushMix_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_ClearPushMix_Req::InternalSwap(YouMeVoice_Video_ClearPushMix_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_ClearPushMix_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_ClearPushMix_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Video_ClearPushMix_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_ClearPushMix_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_ClearPushMix_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Video_ClearPushMix_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_ClearPushMix_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_ClearPushMix_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_ClearPushMix_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_ClearPushMix_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_ClearPushMix_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_ClearPushMix_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_ClearPushMix_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_ClearPushMix_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_ClearPushMix_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_ClearPushMix_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_ClearPushMix_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_ClearPushMix_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_ClearPushMix_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}
 void YouMeVoice_Video_ClearPushMix_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}
 void YouMeVoice_Video_ClearPushMix_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}
 ::std::string* YouMeVoice_Video_ClearPushMix_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_ClearPushMix_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_ClearPushMix_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Req.channelid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_ClearPushMix_Rsp::kHeadFieldNumber;
const int YouMeVoice_Video_ClearPushMix_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Video_ClearPushMix_Rsp::kChannelidFieldNumber;
const int YouMeVoice_Video_ClearPushMix_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_ClearPushMix_Rsp::YouMeVoice_Video_ClearPushMix_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
}

void YouMeVoice_Video_ClearPushMix_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_ClearPushMix_Rsp::YouMeVoice_Video_ClearPushMix_Rsp(const YouMeVoice_Video_ClearPushMix_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
}

void YouMeVoice_Video_ClearPushMix_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_ClearPushMix_Rsp::~YouMeVoice_Video_ClearPushMix_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
  SharedDtor();
}

void YouMeVoice_Video_ClearPushMix_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_ClearPushMix_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_ClearPushMix_Rsp& YouMeVoice_Video_ClearPushMix_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_ClearPushMix_Rsp* YouMeVoice_Video_ClearPushMix_Rsp::default_instance_ = NULL;

YouMeVoice_Video_ClearPushMix_Rsp* YouMeVoice_Video_ClearPushMix_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_ClearPushMix_Rsp* n = new YouMeVoice_Video_ClearPushMix_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_ClearPushMix_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_ClearPushMix_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(sessionid_, result_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_ClearPushMix_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // required int32 result = 4;
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Video_ClearPushMix_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required int32 result = 4;
  if (has_result()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp)
}

int YouMeVoice_Video_ClearPushMix_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_result()) {
    // required int32 result = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int YouMeVoice_Video_ClearPushMix_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required int32 result = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_ClearPushMix_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_ClearPushMix_Rsp*>(&from));
}

void YouMeVoice_Video_ClearPushMix_Rsp::MergeFrom(const YouMeVoice_Video_ClearPushMix_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_ClearPushMix_Rsp::CopyFrom(const YouMeVoice_Video_ClearPushMix_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_ClearPushMix_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_ClearPushMix_Rsp::Swap(YouMeVoice_Video_ClearPushMix_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_ClearPushMix_Rsp::InternalSwap(YouMeVoice_Video_ClearPushMix_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_ClearPushMix_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_ClearPushMix_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_ClearPushMix_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_ClearPushMix_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_ClearPushMix_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_ClearPushMix_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_ClearPushMix_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_ClearPushMix_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_ClearPushMix_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_ClearPushMix_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_ClearPushMix_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_ClearPushMix_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_ClearPushMix_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}
 void YouMeVoice_Video_ClearPushMix_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}
 void YouMeVoice_Video_ClearPushMix_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}
 ::std::string* YouMeVoice_Video_ClearPushMix_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_ClearPushMix_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_ClearPushMix_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.channelid)
}

// required int32 result = 4;
bool YouMeVoice_Video_ClearPushMix_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_ClearPushMix_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_ClearPushMix_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_ClearPushMix_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.result)
  return result_;
}
 void YouMeVoice_Video_ClearPushMix_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_ClearPushMix_Rsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_AddPushMixUser_Req::kHeadFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kSessionidFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kChannelidFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kUseridFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kXFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kYFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kZFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kVideoWidthFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Req::kVideoHeightFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_AddPushMixUser_Req::YouMeVoice_Video_AddPushMixUser_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
}

void YouMeVoice_Video_AddPushMixUser_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Video_AddPushMixUser_Req::YouMeVoice_Video_AddPushMixUser_Req(const YouMeVoice_Video_AddPushMixUser_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
}

void YouMeVoice_Video_AddPushMixUser_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  z_ = 0;
  video_width_ = 0;
  video_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_AddPushMixUser_Req::~YouMeVoice_Video_AddPushMixUser_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
  SharedDtor();
}

void YouMeVoice_Video_AddPushMixUser_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_AddPushMixUser_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_AddPushMixUser_Req& YouMeVoice_Video_AddPushMixUser_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_AddPushMixUser_Req* YouMeVoice_Video_AddPushMixUser_Req::default_instance_ = NULL;

YouMeVoice_Video_AddPushMixUser_Req* YouMeVoice_Video_AddPushMixUser_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_AddPushMixUser_Req* n = new YouMeVoice_Video_AddPushMixUser_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_AddPushMixUser_Req::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_AddPushMixUser_Req*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(sessionid_, x_);
    ZR_(y_, video_width_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  video_height_ = 0;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_AddPushMixUser_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (tag == 34) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // required int32 x = 5;
      case 5: {
        if (tag == 40) {
         parse_x:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // required int32 y = 6;
      case 6: {
        if (tag == 48) {
         parse_y:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_z;
        break;
      }

      // required int32 z = 7;
      case 7: {
        if (tag == 56) {
         parse_z:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_video_width;
        break;
      }

      // required int32 video_width = 8;
      case 8: {
        if (tag == 64) {
         parse_video_width:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_width_)));
          set_has_video_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_video_height;
        break;
      }

      // required int32 video_height = 9;
      case 9: {
        if (tag == 72) {
         parse_video_height:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_height_)));
          set_has_video_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
  return false;
#undef DO_
}

void YouMeVoice_Video_AddPushMixUser_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userid(), output);
  }

  // required int32 x = 5;
  if (has_x()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->x(), output);
  }

  // required int32 y = 6;
  if (has_y()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->y(), output);
  }

  // required int32 z = 7;
  if (has_z()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(7, this->z(), output);
  }

  // required int32 video_width = 8;
  if (has_video_width()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(8, this->video_width(), output);
  }

  // required int32 video_height = 9;
  if (has_video_height()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(9, this->video_height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req)
}

int YouMeVoice_Video_AddPushMixUser_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_userid()) {
    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_x()) {
    // required int32 x = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_z()) {
    // required int32 z = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->z());
  }

  if (has_video_width()) {
    // required int32 video_width = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->video_width());
  }

  if (has_video_height()) {
    // required int32 video_height = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->video_height());
  }

  return total_size;
}
int YouMeVoice_Video_AddPushMixUser_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 x = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 6;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 z = 7;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->z());

    // required int32 video_width = 8;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->video_width());

    // required int32 video_height = 9;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->video_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_AddPushMixUser_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_AddPushMixUser_Req*>(&from));
}

void YouMeVoice_Video_AddPushMixUser_Req::MergeFrom(const YouMeVoice_Video_AddPushMixUser_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_video_width()) {
      set_video_width(from.video_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_video_height()) {
      set_video_height(from.video_height());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_AddPushMixUser_Req::CopyFrom(const YouMeVoice_Video_AddPushMixUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_AddPushMixUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_AddPushMixUser_Req::Swap(YouMeVoice_Video_AddPushMixUser_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_AddPushMixUser_Req::InternalSwap(YouMeVoice_Video_AddPushMixUser_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  userid_.Swap(&other->userid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(video_width_, other->video_width_);
  std::swap(video_height_, other->video_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_AddPushMixUser_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_AddPushMixUser_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Video_AddPushMixUser_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Video_AddPushMixUser_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_AddPushMixUser_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_AddPushMixUser_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_AddPushMixUser_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_AddPushMixUser_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_AddPushMixUser_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.channelid)
}

// required string userid = 4;
bool YouMeVoice_Video_AddPushMixUser_Req::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Video_AddPushMixUser_Req::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Req::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Req::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.userid)
}

// required int32 x = 5;
bool YouMeVoice_Video_AddPushMixUser_Req::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::x() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.x)
  return x_;
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_x(::youmecommon::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.x)
}

// required int32 y = 6;
bool YouMeVoice_Video_AddPushMixUser_Req::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::y() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.y)
  return y_;
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_y(::youmecommon::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.y)
}

// required int32 z = 7;
bool YouMeVoice_Video_AddPushMixUser_Req::has_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_z() {
  _has_bits_[0] |= 0x00000040u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_z() {
  _has_bits_[0] &= ~0x00000040u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_z() {
  z_ = 0;
  clear_has_z();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::z() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.z)
  return z_;
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_z(::youmecommon::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.z)
}

// required int32 video_width = 8;
bool YouMeVoice_Video_AddPushMixUser_Req::has_video_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_video_width() {
  _has_bits_[0] |= 0x00000080u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_video_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_video_width() {
  video_width_ = 0;
  clear_has_video_width();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::video_width() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_width)
  return video_width_;
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_video_width(::youmecommon::protobuf::int32 value) {
  set_has_video_width();
  video_width_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_width)
}

// required int32 video_height = 9;
bool YouMeVoice_Video_AddPushMixUser_Req::has_video_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Req::set_has_video_height() {
  _has_bits_[0] |= 0x00000100u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_has_video_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void YouMeVoice_Video_AddPushMixUser_Req::clear_video_height() {
  video_height_ = 0;
  clear_has_video_height();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Req::video_height() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_height)
  return video_height_;
}
 void YouMeVoice_Video_AddPushMixUser_Req::set_video_height(::youmecommon::protobuf::int32 value) {
  set_has_video_height();
  video_height_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Req.video_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_AddPushMixUser_Rsp::kHeadFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Rsp::kChannelidFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Rsp::kUseridFieldNumber;
const int YouMeVoice_Video_AddPushMixUser_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_AddPushMixUser_Rsp::YouMeVoice_Video_AddPushMixUser_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
}

void YouMeVoice_Video_AddPushMixUser_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_AddPushMixUser_Rsp::YouMeVoice_Video_AddPushMixUser_Rsp(const YouMeVoice_Video_AddPushMixUser_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
}

void YouMeVoice_Video_AddPushMixUser_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_AddPushMixUser_Rsp::~YouMeVoice_Video_AddPushMixUser_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
  SharedDtor();
}

void YouMeVoice_Video_AddPushMixUser_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_AddPushMixUser_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_AddPushMixUser_Rsp& YouMeVoice_Video_AddPushMixUser_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_AddPushMixUser_Rsp* YouMeVoice_Video_AddPushMixUser_Rsp::default_instance_ = NULL;

YouMeVoice_Video_AddPushMixUser_Rsp* YouMeVoice_Video_AddPushMixUser_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_AddPushMixUser_Rsp* n = new YouMeVoice_Video_AddPushMixUser_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_AddPushMixUser_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_AddPushMixUser_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, result_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_AddPushMixUser_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (tag == 34) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // required int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Video_AddPushMixUser_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userid(), output);
  }

  // required int32 result = 5;
  if (has_result()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp)
}

int YouMeVoice_Video_AddPushMixUser_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_userid()) {
    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_result()) {
    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int YouMeVoice_Video_AddPushMixUser_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_AddPushMixUser_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_AddPushMixUser_Rsp*>(&from));
}

void YouMeVoice_Video_AddPushMixUser_Rsp::MergeFrom(const YouMeVoice_Video_AddPushMixUser_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_AddPushMixUser_Rsp::CopyFrom(const YouMeVoice_Video_AddPushMixUser_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_AddPushMixUser_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_AddPushMixUser_Rsp::Swap(YouMeVoice_Video_AddPushMixUser_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_AddPushMixUser_Rsp::InternalSwap(YouMeVoice_Video_AddPushMixUser_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  userid_.Swap(&other->userid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_AddPushMixUser_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_AddPushMixUser_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_AddPushMixUser_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_AddPushMixUser_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_AddPushMixUser_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_AddPushMixUser_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_AddPushMixUser_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_AddPushMixUser_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_AddPushMixUser_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.channelid)
}

// required string userid = 4;
bool YouMeVoice_Video_AddPushMixUser_Rsp::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Video_AddPushMixUser_Rsp::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_AddPushMixUser_Rsp::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.userid)
}

// required int32 result = 5;
bool YouMeVoice_Video_AddPushMixUser_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_AddPushMixUser_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_AddPushMixUser_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.result)
  return result_;
}
 void YouMeVoice_Video_AddPushMixUser_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_AddPushMixUser_Rsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_DelPushMixUser_Req::kHeadFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Req::kSessionidFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Req::kChannelidFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Req::kUseridFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_DelPushMixUser_Req::YouMeVoice_Video_DelPushMixUser_Req()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
}

void YouMeVoice_Video_DelPushMixUser_Req::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

YouMeVoice_Video_DelPushMixUser_Req::YouMeVoice_Video_DelPushMixUser_Req(const YouMeVoice_Video_DelPushMixUser_Req& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
}

void YouMeVoice_Video_DelPushMixUser_Req::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_DelPushMixUser_Req::~YouMeVoice_Video_DelPushMixUser_Req() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
  SharedDtor();
}

void YouMeVoice_Video_DelPushMixUser_Req::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_DelPushMixUser_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_DelPushMixUser_Req& YouMeVoice_Video_DelPushMixUser_Req::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_DelPushMixUser_Req* YouMeVoice_Video_DelPushMixUser_Req::default_instance_ = NULL;

YouMeVoice_Video_DelPushMixUser_Req* YouMeVoice_Video_DelPushMixUser_Req::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_DelPushMixUser_Req* n = new YouMeVoice_Video_DelPushMixUser_Req;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_DelPushMixUser_Req::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    sessionid_ = 0;
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_DelPushMixUser_Req::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (tag == 34) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
  return false;
#undef DO_
}

void YouMeVoice_Video_DelPushMixUser_Req::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req)
}

int YouMeVoice_Video_DelPushMixUser_Req::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_userid()) {
    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  return total_size;
}
int YouMeVoice_Video_DelPushMixUser_Req::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_DelPushMixUser_Req::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_DelPushMixUser_Req*>(&from));
}

void YouMeVoice_Video_DelPushMixUser_Req::MergeFrom(const YouMeVoice_Video_DelPushMixUser_Req& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_DelPushMixUser_Req::CopyFrom(const YouMeVoice_Video_DelPushMixUser_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_DelPushMixUser_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_DelPushMixUser_Req::Swap(YouMeVoice_Video_DelPushMixUser_Req* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_DelPushMixUser_Req::InternalSwap(YouMeVoice_Video_DelPushMixUser_Req* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_DelPushMixUser_Req::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_DelPushMixUser_Req

// required .YouMeProtocol.PacketHead head = 1;
bool YouMeVoice_Video_DelPushMixUser_Req::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Req::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& YouMeVoice_Video_DelPushMixUser_Req::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_DelPushMixUser_Req::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.head)
  return head_;
}
::YouMeProtocol::PacketHead* YouMeVoice_Video_DelPushMixUser_Req::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_DelPushMixUser_Req::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_DelPushMixUser_Req::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Req::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_DelPushMixUser_Req::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_DelPushMixUser_Req::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Req::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_DelPushMixUser_Req::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Req::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Req::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.channelid)
}

// required string userid = 4;
bool YouMeVoice_Video_DelPushMixUser_Req::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Req::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_DelPushMixUser_Req::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Video_DelPushMixUser_Req::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Req::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Req::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Req::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Req.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_DelPushMixUser_Rsp::kHeadFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Rsp::kSessionidFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Rsp::kChannelidFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Rsp::kUseridFieldNumber;
const int YouMeVoice_Video_DelPushMixUser_Rsp::kResultFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_DelPushMixUser_Rsp::YouMeVoice_Video_DelPushMixUser_Rsp()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
}

void YouMeVoice_Video_DelPushMixUser_Rsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_DelPushMixUser_Rsp::YouMeVoice_Video_DelPushMixUser_Rsp(const YouMeVoice_Video_DelPushMixUser_Rsp& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
}

void YouMeVoice_Video_DelPushMixUser_Rsp::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  sessionid_ = 0;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_DelPushMixUser_Rsp::~YouMeVoice_Video_DelPushMixUser_Rsp() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
  SharedDtor();
}

void YouMeVoice_Video_DelPushMixUser_Rsp::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_DelPushMixUser_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_DelPushMixUser_Rsp& YouMeVoice_Video_DelPushMixUser_Rsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_DelPushMixUser_Rsp* YouMeVoice_Video_DelPushMixUser_Rsp::default_instance_ = NULL;

YouMeVoice_Video_DelPushMixUser_Rsp* YouMeVoice_Video_DelPushMixUser_Rsp::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_DelPushMixUser_Rsp* n = new YouMeVoice_Video_DelPushMixUser_Rsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_DelPushMixUser_Rsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<YouMeVoice_Video_DelPushMixUser_Rsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(sessionid_, result_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_DelPushMixUser_Rsp::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // required int32 sessionid = 2;
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_channelid;
        break;
      }

      // required string channelid = 3;
      case 3: {
        if (tag == 26) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }

      // required string userid = 4;
      case 4: {
        if (tag == 34) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // required int32 result = 5;
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
  return false;
#undef DO_
}

void YouMeVoice_Video_DelPushMixUser_Rsp::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required int32 sessionid = 2;
  if (has_sessionid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(2, this->sessionid(), output);
  }

  // required string channelid = 3;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channelid(), output);
  }

  // required string userid = 4;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->userid(), output);
  }

  // required int32 result = 5;
  if (has_result()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(5, this->result(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp)
}

int YouMeVoice_Video_DelPushMixUser_Rsp::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_sessionid()) {
    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  if (has_channelid()) {
    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_userid()) {
    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_result()) {
    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int YouMeVoice_Video_DelPushMixUser_Rsp::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required int32 sessionid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());

    // required string channelid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string userid = 4;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required int32 result = 5;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_DelPushMixUser_Rsp::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_DelPushMixUser_Rsp*>(&from));
}

void YouMeVoice_Video_DelPushMixUser_Rsp::MergeFrom(const YouMeVoice_Video_DelPushMixUser_Rsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_DelPushMixUser_Rsp::CopyFrom(const YouMeVoice_Video_DelPushMixUser_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_DelPushMixUser_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_DelPushMixUser_Rsp::Swap(YouMeVoice_Video_DelPushMixUser_Rsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_DelPushMixUser_Rsp::InternalSwap(YouMeVoice_Video_DelPushMixUser_Rsp* other) {
  std::swap(head_, other->head_);
  std::swap(sessionid_, other->sessionid_);
  channelid_.Swap(&other->channelid_);
  userid_.Swap(&other->userid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_DelPushMixUser_Rsp::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_DelPushMixUser_Rsp

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_DelPushMixUser_Rsp::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_DelPushMixUser_Rsp::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_DelPushMixUser_Rsp::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_DelPushMixUser_Rsp::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.head)
}

// required int32 sessionid = 2;
bool YouMeVoice_Video_DelPushMixUser_Rsp::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_sessionid() {
  sessionid_ = 0;
  clear_has_sessionid();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_DelPushMixUser_Rsp::sessionid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.sessionid)
  return sessionid_;
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_sessionid(::youmecommon::protobuf::int32 value) {
  set_has_sessionid();
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.sessionid)
}

// required string channelid = 3;
bool YouMeVoice_Video_DelPushMixUser_Rsp::has_channelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_channelid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_DelPushMixUser_Rsp::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.channelid)
}

// required string userid = 4;
bool YouMeVoice_Video_DelPushMixUser_Rsp::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Video_DelPushMixUser_Rsp::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_DelPushMixUser_Rsp::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.userid)
}

// required int32 result = 5;
bool YouMeVoice_Video_DelPushMixUser_Rsp::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void YouMeVoice_Video_DelPushMixUser_Rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::youmecommon::protobuf::int32 YouMeVoice_Video_DelPushMixUser_Rsp::result() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.result)
  return result_;
}
 void YouMeVoice_Video_DelPushMixUser_Rsp::set_result(::youmecommon::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_DelPushMixUser_Rsp.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int YouMeVoice_Video_OtherSetPushMix_Notify::kHeadFieldNumber;
const int YouMeVoice_Video_OtherSetPushMix_Notify::kChannelidFieldNumber;
const int YouMeVoice_Video_OtherSetPushMix_Notify::kUseridFieldNumber;
#endif  // !_MSC_VER

YouMeVoice_Video_OtherSetPushMix_Notify::YouMeVoice_Video_OtherSetPushMix_Notify()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
}

void YouMeVoice_Video_OtherSetPushMix_Notify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(
      ::YouMeProtocol::ServerPacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::ServerPacketHead*>(&::YouMeProtocol::ServerPacketHead::default_instance());
#endif
}

YouMeVoice_Video_OtherSetPushMix_Notify::YouMeVoice_Video_OtherSetPushMix_Notify(const YouMeVoice_Video_OtherSetPushMix_Notify& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
}

void YouMeVoice_Video_OtherSetPushMix_Notify::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  channelid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YouMeVoice_Video_OtherSetPushMix_Notify::~YouMeVoice_Video_OtherSetPushMix_Notify() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
  SharedDtor();
}

void YouMeVoice_Video_OtherSetPushMix_Notify::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void YouMeVoice_Video_OtherSetPushMix_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const YouMeVoice_Video_OtherSetPushMix_Notify& YouMeVoice_Video_OtherSetPushMix_Notify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_serverlogin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_serverlogin_2eproto();
#endif
  return *default_instance_;
}

YouMeVoice_Video_OtherSetPushMix_Notify* YouMeVoice_Video_OtherSetPushMix_Notify::default_instance_ = NULL;

YouMeVoice_Video_OtherSetPushMix_Notify* YouMeVoice_Video_OtherSetPushMix_Notify::New(::youmecommon::protobuf::Arena* arena) const {
  YouMeVoice_Video_OtherSetPushMix_Notify* n = new YouMeVoice_Video_OtherSetPushMix_Notify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YouMeVoice_Video_OtherSetPushMix_Notify::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
    }
    if (has_channelid()) {
      channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool YouMeVoice_Video_OtherSetPushMix_Notify::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.ServerPacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channelid;
        break;
      }

      // required string channelid = 2;
      case 2: {
        if (tag == 18) {
         parse_channelid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }

      // required string userid = 3;
      case 3: {
        if (tag == 26) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
  return false;
#undef DO_
}

void YouMeVoice_Video_OtherSetPushMix_Notify::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
  // required .YouMeProtocol.ServerPacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required string channelid = 2;
  if (has_channelid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channelid(), output);
  }

  // required string userid = 3;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify)
}

int YouMeVoice_Video_OtherSetPushMix_Notify::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_channelid()) {
    // required string channelid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());
  }

  if (has_userid()) {
    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  return total_size;
}
int YouMeVoice_Video_OtherSetPushMix_Notify::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.ServerPacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required string channelid = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->channelid());

    // required string userid = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YouMeVoice_Video_OtherSetPushMix_Notify::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const YouMeVoice_Video_OtherSetPushMix_Notify*>(&from));
}

void YouMeVoice_Video_OtherSetPushMix_Notify::MergeFrom(const YouMeVoice_Video_OtherSetPushMix_Notify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::ServerPacketHead::MergeFrom(from.head());
    }
    if (from.has_channelid()) {
      set_has_channelid();
      channelid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.channelid_);
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void YouMeVoice_Video_OtherSetPushMix_Notify::CopyFrom(const YouMeVoice_Video_OtherSetPushMix_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YouMeVoice_Video_OtherSetPushMix_Notify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void YouMeVoice_Video_OtherSetPushMix_Notify::Swap(YouMeVoice_Video_OtherSetPushMix_Notify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YouMeVoice_Video_OtherSetPushMix_Notify::InternalSwap(YouMeVoice_Video_OtherSetPushMix_Notify* other) {
  std::swap(head_, other->head_);
  channelid_.Swap(&other->channelid_);
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string YouMeVoice_Video_OtherSetPushMix_Notify::GetTypeName() const {
  return "YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YouMeVoice_Video_OtherSetPushMix_Notify

// required .YouMeProtocol.ServerPacketHead head = 1;
bool YouMeVoice_Video_OtherSetPushMix_Notify::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::ServerPacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::ServerPacketHead& YouMeVoice_Video_OtherSetPushMix_Notify::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_OtherSetPushMix_Notify::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::ServerPacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.head)
  return head_;
}
::YouMeProtocol::ServerPacketHead* YouMeVoice_Video_OtherSetPushMix_Notify::release_head() {
  clear_has_head();
  ::YouMeProtocol::ServerPacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::set_allocated_head(::YouMeProtocol::ServerPacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.head)
}

// required string channelid = 2;
bool YouMeVoice_Video_OtherSetPushMix_Notify::has_channelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::set_has_channelid() {
  _has_bits_[0] |= 0x00000002u;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000002u;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channelid();
}
 const ::std::string& YouMeVoice_Video_OtherSetPushMix_Notify::channelid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
  return channelid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_channelid(const ::std::string& value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_channelid(const char* value) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_channelid(const char* value, size_t size) {
  set_has_channelid();
  channelid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}
 ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::mutable_channelid() {
  set_has_channelid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
  return channelid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::release_channelid() {
  clear_has_channelid();
  return channelid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_allocated_channelid(::std::string* channelid) {
  if (channelid != NULL) {
    set_has_channelid();
  } else {
    clear_has_channelid();
  }
  channelid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.channelid)
}

// required string userid = 3;
bool YouMeVoice_Video_OtherSetPushMix_Notify::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
void YouMeVoice_Video_OtherSetPushMix_Notify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& YouMeVoice_Video_OtherSetPushMix_Notify::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}
 ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* YouMeVoice_Video_OtherSetPushMix_Notify::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void YouMeVoice_Video_OtherSetPushMix_Notify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.YouMeVoice_Video_OtherSetPushMix_Notify.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

// @@protoc_insertion_point(global_scope)
