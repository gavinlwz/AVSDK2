// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uploadlog.proto

#ifndef PROTOBUF_uploadlog_2eproto__INCLUDED
#define PROTOBUF_uploadlog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace YouMeProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_uploadlog_2eproto();
void protobuf_AssignDesc_uploadlog_2eproto();
void protobuf_ShutdownFile_uploadlog_2eproto();

class UploadLog;

enum UploadType {
  UploadType_SDKValidFail = 1,
  UploadType_RedirectFail = 2,
  UploadType_JoinRoomFail = 4,
  UploadType_HeartFail = 8,
  UploadType_Notify = 16
};
bool UploadType_IsValid(int value);
const UploadType UploadType_MIN = UploadType_SDKValidFail;
const UploadType UploadType_MAX = UploadType_Notify;
const int UploadType_ARRAYSIZE = UploadType_MAX + 1;

// ===================================================================

class UploadLog : public ::youmecommon::protobuf::MessageLite {
 public:
  UploadLog();
  virtual ~UploadLog();

  UploadLog(const UploadLog& from);

  inline UploadLog& operator=(const UploadLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_.GetNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  inline ::std::string* mutable_unknown_fields() {
    return _unknown_fields_.MutableNoArena(
        &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  }

  static const UploadLog& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UploadLog* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UploadLog* other);

  // implements Message ----------------------------------------------

  inline UploadLog* New() const { return New(NULL); }

  UploadLog* New(::youmecommon::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::youmecommon::protobuf::MessageLite& from);
  void CopyFrom(const UploadLog& from);
  void MergeFrom(const UploadLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::youmecommon::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::youmecommon::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadLog* other);
  private:
  inline ::youmecommon::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::youmecommon::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .YouMeProtocol.PacketHead head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::YouMeProtocol::PacketHead& head() const;
  ::YouMeProtocol::PacketHead* mutable_head();
  ::YouMeProtocol::PacketHead* release_head();
  void set_allocated_head(::YouMeProtocol::PacketHead* head);

  // required int32 filelen = 2;
  bool has_filelen() const;
  void clear_filelen();
  static const int kFilelenFieldNumber = 2;
  ::youmecommon::protobuf::int32 filelen() const;
  void set_filelen(::youmecommon::protobuf::int32 value);

  // optional string md5 = 3;
  bool has_md5() const;
  void clear_md5();
  static const int kMd5FieldNumber = 3;
  const ::std::string& md5() const;
  void set_md5(const ::std::string& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  ::std::string* mutable_md5();
  ::std::string* release_md5();
  void set_allocated_md5(::std::string* md5);

  // optional .YouMeProtocol.UploadType upType = 4;
  bool has_uptype() const;
  void clear_uptype();
  static const int kUpTypeFieldNumber = 4;
  ::YouMeProtocol::UploadType uptype() const;
  void set_uptype(::YouMeProtocol::UploadType value);

  // optional int32 errorcode = 5;
  bool has_errorcode() const;
  void clear_errorcode();
  static const int kErrorcodeFieldNumber = 5;
  ::youmecommon::protobuf::int32 errorcode() const;
  void set_errorcode(::youmecommon::protobuf::int32 value);

  // optional string userid = 6;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 6;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:YouMeProtocol.UploadLog)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_filelen();
  inline void clear_has_filelen();
  inline void set_has_md5();
  inline void clear_has_md5();
  inline void set_has_uptype();
  inline void clear_has_uptype();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_userid();
  inline void clear_has_userid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::youmecommon::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::youmecommon::protobuf::Arena* _arena_ptr_;

  ::youmecommon::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::YouMeProtocol::PacketHead* head_;
  ::youmecommon::protobuf::internal::ArenaStringPtr md5_;
  ::youmecommon::protobuf::int32 filelen_;
  int uptype_;
  ::youmecommon::protobuf::internal::ArenaStringPtr userid_;
  ::youmecommon::protobuf::int32 errorcode_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_uploadlog_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_uploadlog_2eproto();
  #endif
  friend void protobuf_AssignDesc_uploadlog_2eproto();
  friend void protobuf_ShutdownFile_uploadlog_2eproto();

  void InitAsDefaultInstance();
  static UploadLog* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadLog

// required .YouMeProtocol.PacketHead head = 1;
inline bool UploadLog::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadLog::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadLog::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadLog::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
inline const ::YouMeProtocol::PacketHead& UploadLog::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.UploadLog.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
inline ::YouMeProtocol::PacketHead* UploadLog::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.UploadLog.head)
  return head_;
}
inline ::YouMeProtocol::PacketHead* UploadLog::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
inline void UploadLog::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.UploadLog.head)
}

// required int32 filelen = 2;
inline bool UploadLog::has_filelen() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadLog::set_has_filelen() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadLog::clear_has_filelen() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadLog::clear_filelen() {
  filelen_ = 0;
  clear_has_filelen();
}
inline ::youmecommon::protobuf::int32 UploadLog::filelen() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.UploadLog.filelen)
  return filelen_;
}
inline void UploadLog::set_filelen(::youmecommon::protobuf::int32 value) {
  set_has_filelen();
  filelen_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.UploadLog.filelen)
}

// optional string md5 = 3;
inline bool UploadLog::has_md5() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadLog::set_has_md5() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadLog::clear_has_md5() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadLog::clear_md5() {
  md5_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_md5();
}
inline const ::std::string& UploadLog::md5() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.UploadLog.md5)
  return md5_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadLog::set_md5(const ::std::string& value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.UploadLog.md5)
}
inline void UploadLog::set_md5(const char* value) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.UploadLog.md5)
}
inline void UploadLog::set_md5(const char* value, size_t size) {
  set_has_md5();
  md5_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.UploadLog.md5)
}
inline ::std::string* UploadLog::mutable_md5() {
  set_has_md5();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.UploadLog.md5)
  return md5_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadLog::release_md5() {
  clear_has_md5();
  return md5_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadLog::set_allocated_md5(::std::string* md5) {
  if (md5 != NULL) {
    set_has_md5();
  } else {
    clear_has_md5();
  }
  md5_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.UploadLog.md5)
}

// optional .YouMeProtocol.UploadType upType = 4;
inline bool UploadLog::has_uptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadLog::set_has_uptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadLog::clear_has_uptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadLog::clear_uptype() {
  uptype_ = 1;
  clear_has_uptype();
}
inline ::YouMeProtocol::UploadType UploadLog::uptype() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.UploadLog.upType)
  return static_cast< ::YouMeProtocol::UploadType >(uptype_);
}
inline void UploadLog::set_uptype(::YouMeProtocol::UploadType value) {
  assert(::YouMeProtocol::UploadType_IsValid(value));
  set_has_uptype();
  uptype_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.UploadLog.upType)
}

// optional int32 errorcode = 5;
inline bool UploadLog::has_errorcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UploadLog::set_has_errorcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UploadLog::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UploadLog::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::youmecommon::protobuf::int32 UploadLog::errorcode() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.UploadLog.errorcode)
  return errorcode_;
}
inline void UploadLog::set_errorcode(::youmecommon::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.UploadLog.errorcode)
}

// optional string userid = 6;
inline bool UploadLog::has_userid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UploadLog::set_has_userid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UploadLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UploadLog::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& UploadLog::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.UploadLog.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadLog::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.UploadLog.userid)
}
inline void UploadLog::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.UploadLog.userid)
}
inline void UploadLog::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.UploadLog.userid)
}
inline ::std::string* UploadLog::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.UploadLog.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadLog::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadLog::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.UploadLog.userid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

#ifndef SWIG
namespace youmecommon {
namespace protobuf {

template <> struct is_proto_enum< ::YouMeProtocol::UploadType> : ::youmecommon::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace youmecommon
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uploadlog_2eproto__INCLUDED
