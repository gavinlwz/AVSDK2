// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YouMeServerValidProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YouMeServerValidProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeProtocol {

void protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto() {
  delete ServerValid::default_instance_;
  delete RedirectInfo::default_instance_;
  delete ServerValidResponse::default_instance_;
  delete GetRedirectRequest::default_instance_;
  delete GetRedirectResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_YouMeServerValidProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YouMeProtocol::protobuf_AddDesc_common_2eproto();
  ServerValid::default_instance_ = new ServerValid();
  RedirectInfo::default_instance_ = new RedirectInfo();
  ServerValidResponse::default_instance_ = new ServerValidResponse();
  GetRedirectRequest::default_instance_ = new GetRedirectRequest();
  GetRedirectResponse::default_instance_ = new GetRedirectResponse();
  ServerValid::default_instance_->InitAsDefaultInstance();
  RedirectInfo::default_instance_->InitAsDefaultInstance();
  ServerValidResponse::default_instance_->InitAsDefaultInstance();
  GetRedirectRequest::default_instance_->InitAsDefaultInstance();
  GetRedirectResponse::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_YouMeServerValidProtocol_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_YouMeServerValidProtocol_2eproto_once_);
void protobuf_AddDesc_YouMeServerValidProtocol_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_YouMeServerValidProtocol_2eproto_once_,
                 &protobuf_AddDesc_YouMeServerValidProtocol_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_YouMeServerValidProtocol_2eproto {
  StaticDescriptorInitializer_YouMeServerValidProtocol_2eproto() {
    protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
  }
} static_descriptor_initializer_YouMeServerValidProtocol_2eproto_;
#endif
bool Bussiness_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ServerValid::kHeadFieldNumber;
const int ServerValid::kDataFieldNumber;
const int ServerValid::kBussinesFieldNumber;
const int ServerValid::kIdcFieldNumber;
const int ServerValid::kIdcAreaFieldNumber;
#endif  // !_MSC_VER

ServerValid::ServerValid()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.ServerValid)
}

void ServerValid::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

ServerValid::ServerValid(const ServerValid& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.ServerValid)
}

void ServerValid::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  data_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  bussines_ = 1;
  idc_ = 0u;
  idc_area_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerValid::~ServerValid() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.ServerValid)
  SharedDtor();
}

void ServerValid::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  idc_area_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void ServerValid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerValid& ServerValid::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#endif
  return *default_instance_;
}

ServerValid* ServerValid::default_instance_ = NULL;

ServerValid* ServerValid::New(::youmecommon::protobuf::Arena* arena) const {
  ServerValid* n = new ServerValid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerValid::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    bussines_ = 1;
    idc_ = 0u;
    if (has_idc_area()) {
      idc_area_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerValid::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.ServerValid)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bussines;
        break;
      }

      // required .YouMeProtocol.Bussiness bussines = 3;
      case 3: {
        if (tag == 24) {
         parse_bussines:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeProtocol::Bussiness_IsValid(value)) {
            set_bussines(static_cast< ::YouMeProtocol::Bussiness >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_idc;
        break;
      }

      // optional uint32 idc = 4;
      case 4: {
        if (tag == 32) {
         parse_idc:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idc_)));
          set_has_idc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_idc_area;
        break;
      }

      // optional string idc_area = 5;
      case 5: {
        if (tag == 42) {
         parse_idc_area:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idc_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.ServerValid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.ServerValid)
  return false;
#undef DO_
}

void ServerValid::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.ServerValid)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // required .YouMeProtocol.Bussiness bussines = 3;
  if (has_bussines()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bussines(), output);
  }

  // optional uint32 idc = 4;
  if (has_idc()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idc(), output);
  }

  // optional string idc_area = 5;
  if (has_idc_area()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->idc_area(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.ServerValid)
}

int ServerValid::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_bussines()) {
    // required .YouMeProtocol.Bussiness bussines = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->bussines());
  }

  return total_size;
}
int ServerValid::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .YouMeProtocol.Bussiness bussines = 3;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->bussines());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 24u) {
    // optional uint32 idc = 4;
    if (has_idc()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
          this->idc());
    }

    // optional string idc_area = 5;
    if (has_idc_area()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->idc_area());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerValid::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ServerValid*>(&from));
}

void ServerValid::MergeFrom(const ServerValid& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_bussines()) {
      set_bussines(from.bussines());
    }
    if (from.has_idc()) {
      set_idc(from.idc());
    }
    if (from.has_idc_area()) {
      set_has_idc_area();
      idc_area_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.idc_area_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerValid::CopyFrom(const ServerValid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerValid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void ServerValid::Swap(ServerValid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerValid::InternalSwap(ServerValid* other) {
  std::swap(head_, other->head_);
  data_.Swap(&other->data_);
  std::swap(bussines_, other->bussines_);
  std::swap(idc_, other->idc_);
  idc_area_.Swap(&other->idc_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerValid::GetTypeName() const {
  return "YouMeProtocol.ServerValid";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerValid

// required .YouMeProtocol.PacketHead head = 1;
bool ServerValid::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerValid::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerValid::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerValid::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& ServerValid::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* ServerValid::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValid.head)
  return head_;
}
::YouMeProtocol::PacketHead* ServerValid::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void ServerValid::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValid.head)
}

// required bytes data = 2;
bool ServerValid::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerValid::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerValid::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerValid::clear_data() {
  data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ServerValid::data() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.data)
  return data_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerValid::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.data)
}
 void ServerValid::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.ServerValid.data)
}
 void ServerValid::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.ServerValid.data)
}
 ::std::string* ServerValid::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValid.data)
  return data_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerValid::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerValid::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValid.data)
}

// required .YouMeProtocol.Bussiness bussines = 3;
bool ServerValid::has_bussines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerValid::set_has_bussines() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerValid::clear_has_bussines() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerValid::clear_bussines() {
  bussines_ = 1;
  clear_has_bussines();
}
 ::YouMeProtocol::Bussiness ServerValid::bussines() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.bussines)
  return static_cast< ::YouMeProtocol::Bussiness >(bussines_);
}
 void ServerValid::set_bussines(::YouMeProtocol::Bussiness value) {
  assert(::YouMeProtocol::Bussiness_IsValid(value));
  set_has_bussines();
  bussines_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.bussines)
}

// optional uint32 idc = 4;
bool ServerValid::has_idc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerValid::set_has_idc() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerValid::clear_has_idc() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerValid::clear_idc() {
  idc_ = 0u;
  clear_has_idc();
}
 ::youmecommon::protobuf::uint32 ServerValid::idc() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.idc)
  return idc_;
}
 void ServerValid::set_idc(::youmecommon::protobuf::uint32 value) {
  set_has_idc();
  idc_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.idc)
}

// optional string idc_area = 5;
bool ServerValid::has_idc_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerValid::set_has_idc_area() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerValid::clear_has_idc_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerValid::clear_idc_area() {
  idc_area_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idc_area();
}
 const ::std::string& ServerValid::idc_area() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValid.idc_area)
  return idc_area_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerValid::set_idc_area(const ::std::string& value) {
  set_has_idc_area();
  idc_area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValid.idc_area)
}
 void ServerValid::set_idc_area(const char* value) {
  set_has_idc_area();
  idc_area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.ServerValid.idc_area)
}
 void ServerValid::set_idc_area(const char* value, size_t size) {
  set_has_idc_area();
  idc_area_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.ServerValid.idc_area)
}
 ::std::string* ServerValid::mutable_idc_area() {
  set_has_idc_area();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValid.idc_area)
  return idc_area_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerValid::release_idc_area() {
  clear_has_idc_area();
  return idc_area_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerValid::set_allocated_idc_area(::std::string* idc_area) {
  if (idc_area != NULL) {
    set_has_idc_area();
  } else {
    clear_has_idc_area();
  }
  idc_area_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), idc_area);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValid.idc_area)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RedirectInfo::kHostFieldNumber;
const int RedirectInfo::kPortFieldNumber;
#endif  // !_MSC_VER

RedirectInfo::RedirectInfo()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.RedirectInfo)
}

void RedirectInfo::InitAsDefaultInstance() {
}

RedirectInfo::RedirectInfo(const RedirectInfo& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.RedirectInfo)
}

void RedirectInfo::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedirectInfo::~RedirectInfo() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.RedirectInfo)
  SharedDtor();
}

void RedirectInfo::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RedirectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RedirectInfo& RedirectInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#endif
  return *default_instance_;
}

RedirectInfo* RedirectInfo::default_instance_ = NULL;

RedirectInfo* RedirectInfo::New(::youmecommon::protobuf::Arena* arena) const {
  RedirectInfo* n = new RedirectInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedirectInfo::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_host()) {
      host_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RedirectInfo::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.RedirectInfo)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::uint32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.RedirectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.RedirectInfo)
  return false;
#undef DO_
}

void RedirectInfo::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.RedirectInfo)
  // required string host = 1;
  if (has_host()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.RedirectInfo)
}

int RedirectInfo::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_host()) {
    // required string host = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
int RedirectInfo::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string host = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
        this->host());

    // required uint32 port = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedirectInfo::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const RedirectInfo*>(&from));
}

void RedirectInfo::MergeFrom(const RedirectInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_has_host();
      host_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void RedirectInfo::CopyFrom(const RedirectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RedirectInfo::Swap(RedirectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedirectInfo::InternalSwap(RedirectInfo* other) {
  host_.Swap(&other->host_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RedirectInfo::GetTypeName() const {
  return "YouMeProtocol.RedirectInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedirectInfo

// required string host = 1;
bool RedirectInfo::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RedirectInfo::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void RedirectInfo::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void RedirectInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
 const ::std::string& RedirectInfo::host() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.RedirectInfo.host)
  return host_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RedirectInfo::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.RedirectInfo.host)
}
 void RedirectInfo::set_host(const char* value) {
  set_has_host();
  host_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.RedirectInfo.host)
}
 void RedirectInfo::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.RedirectInfo.host)
}
 ::std::string* RedirectInfo::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.RedirectInfo.host)
  return host_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RedirectInfo::release_host() {
  clear_has_host();
  return host_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RedirectInfo::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.RedirectInfo.host)
}

// required uint32 port = 2;
bool RedirectInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RedirectInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void RedirectInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void RedirectInfo::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::youmecommon::protobuf::uint32 RedirectInfo::port() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.RedirectInfo.port)
  return port_;
}
 void RedirectInfo::set_port(::youmecommon::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.RedirectInfo.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerValidResponse::kStatusFieldNumber;
const int ServerValidResponse::kDataFieldNumber;
const int ServerValidResponse::kConfigurationsFieldNumber;
const int ServerValidResponse::kTimeoutFieldNumber;
const int ServerValidResponse::kRedirectInfoListFieldNumber;
const int ServerValidResponse::kGetRedirectFlagFieldNumber;
#endif  // !_MSC_VER

ServerValidResponse::ServerValidResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.ServerValidResponse)
}

void ServerValidResponse::InitAsDefaultInstance() {
}

ServerValidResponse::ServerValidResponse(const ServerValidResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.ServerValidResponse)
}

void ServerValidResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  data_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
  get_redirect_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerValidResponse::~ServerValidResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.ServerValidResponse)
  SharedDtor();
}

void ServerValidResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerValidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerValidResponse& ServerValidResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#endif
  return *default_instance_;
}

ServerValidResponse* ServerValidResponse::default_instance_ = NULL;

ServerValidResponse* ServerValidResponse::New(::youmecommon::protobuf::Arena* arena) const {
  ServerValidResponse* n = new ServerValidResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerValidResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerValidResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 43u) {
    ZR_(status_, timeout_);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    get_redirect_flag_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  configurations_.Clear();
  redirect_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerValidResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.ServerValidResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_configurations;
        break;
      }

      // repeated .YouMeProtocol.NameValue configurations = 3;
      case 3: {
        if (tag == 26) {
         parse_configurations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_configurations:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_configurations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 4;
      case 4: {
        if (tag == 32) {
         parse_timeout:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_redirect_info_list;
        break;
      }

      // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 5;
      case 5: {
        if (tag == 42) {
         parse_redirect_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_redirect_info_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_redirect_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_redirect_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_get_redirect_flag;
        break;
      }

      // optional int32 get_redirect_flag = 6;
      case 6: {
        if (tag == 48) {
         parse_get_redirect_flag:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &get_redirect_flag_)));
          set_has_get_redirect_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.ServerValidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.ServerValidResponse)
  return false;
#undef DO_
}

void ServerValidResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.ServerValidResponse)
  // required int32 status = 1;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // repeated .YouMeProtocol.NameValue configurations = 3;
  for (unsigned int i = 0, n = this->configurations_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->configurations(i), output);
  }

  // optional int32 timeout = 4;
  if (has_timeout()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }

  // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 5;
  for (unsigned int i = 0, n = this->redirect_info_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->redirect_info_list(i), output);
  }

  // optional int32 get_redirect_flag = 6;
  if (has_get_redirect_flag()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(6, this->get_redirect_flag(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.ServerValidResponse)
}

int ServerValidResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_status()) {
    // required int32 status = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int ServerValidResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 status = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required bytes data = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 40u) {
    // optional int32 timeout = 4;
    if (has_timeout()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional int32 get_redirect_flag = 6;
    if (has_get_redirect_flag()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->get_redirect_flag());
    }

  }
  // repeated .YouMeProtocol.NameValue configurations = 3;
  total_size += 1 * this->configurations_size();
  for (int i = 0; i < this->configurations_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configurations(i));
  }

  // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 5;
  total_size += 1 * this->redirect_info_list_size();
  for (int i = 0; i < this->redirect_info_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redirect_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerValidResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const ServerValidResponse*>(&from));
}

void ServerValidResponse::MergeFrom(const ServerValidResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  configurations_.MergeFrom(from.configurations_);
  redirect_info_list_.MergeFrom(from.redirect_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_get_redirect_flag()) {
      set_get_redirect_flag(from.get_redirect_flag());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerValidResponse::CopyFrom(const ServerValidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerValidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->configurations())) return false;
  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->redirect_info_list())) return false;
  return true;
}

void ServerValidResponse::Swap(ServerValidResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerValidResponse::InternalSwap(ServerValidResponse* other) {
  std::swap(status_, other->status_);
  data_.Swap(&other->data_);
  configurations_.UnsafeArenaSwap(&other->configurations_);
  std::swap(timeout_, other->timeout_);
  redirect_info_list_.UnsafeArenaSwap(&other->redirect_info_list_);
  std::swap(get_redirect_flag_, other->get_redirect_flag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerValidResponse::GetTypeName() const {
  return "YouMeProtocol.ServerValidResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerValidResponse

// required int32 status = 1;
bool ServerValidResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerValidResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerValidResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerValidResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 ServerValidResponse::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.status)
  return status_;
}
 void ServerValidResponse::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.status)
}

// required bytes data = 2;
bool ServerValidResponse::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerValidResponse::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerValidResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerValidResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ServerValidResponse::data() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.data)
  return data_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerValidResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.data)
}
 void ServerValidResponse::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.ServerValidResponse.data)
}
 void ServerValidResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.ServerValidResponse.data)
}
 ::std::string* ServerValidResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValidResponse.data)
  return data_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerValidResponse::release_data() {
  clear_has_data();
  return data_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerValidResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.ServerValidResponse.data)
}

// repeated .YouMeProtocol.NameValue configurations = 3;
int ServerValidResponse::configurations_size() const {
  return configurations_.size();
}
void ServerValidResponse::clear_configurations() {
  configurations_.Clear();
}
const ::YouMeProtocol::NameValue& ServerValidResponse::configurations(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_.Get(index);
}
::YouMeProtocol::NameValue* ServerValidResponse::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_.Mutable(index);
}
::YouMeProtocol::NameValue* ServerValidResponse::add_configurations() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue >*
ServerValidResponse::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.ServerValidResponse.configurations)
  return &configurations_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::NameValue >&
ServerValidResponse::configurations() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.ServerValidResponse.configurations)
  return configurations_;
}

// optional int32 timeout = 4;
bool ServerValidResponse::has_timeout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerValidResponse::set_has_timeout() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerValidResponse::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerValidResponse::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
 ::youmecommon::protobuf::int32 ServerValidResponse::timeout() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.timeout)
  return timeout_;
}
 void ServerValidResponse::set_timeout(::youmecommon::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.timeout)
}

// repeated .YouMeProtocol.RedirectInfo redirect_info_list = 5;
int ServerValidResponse::redirect_info_list_size() const {
  return redirect_info_list_.size();
}
void ServerValidResponse::clear_redirect_info_list() {
  redirect_info_list_.Clear();
}
const ::YouMeProtocol::RedirectInfo& ServerValidResponse::redirect_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_.Get(index);
}
::YouMeProtocol::RedirectInfo* ServerValidResponse::mutable_redirect_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_.Mutable(index);
}
::YouMeProtocol::RedirectInfo* ServerValidResponse::add_redirect_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >*
ServerValidResponse::mutable_redirect_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return &redirect_info_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >&
ServerValidResponse::redirect_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.ServerValidResponse.redirect_info_list)
  return redirect_info_list_;
}

// optional int32 get_redirect_flag = 6;
bool ServerValidResponse::has_get_redirect_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerValidResponse::set_has_get_redirect_flag() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerValidResponse::clear_has_get_redirect_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerValidResponse::clear_get_redirect_flag() {
  get_redirect_flag_ = 0;
  clear_has_get_redirect_flag();
}
 ::youmecommon::protobuf::int32 ServerValidResponse::get_redirect_flag() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.ServerValidResponse.get_redirect_flag)
  return get_redirect_flag_;
}
 void ServerValidResponse::set_get_redirect_flag(::youmecommon::protobuf::int32 value) {
  set_has_get_redirect_flag();
  get_redirect_flag_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.ServerValidResponse.get_redirect_flag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRedirectRequest::kHeadFieldNumber;
const int GetRedirectRequest::kIdcAreaFieldNumber;
#endif  // !_MSC_VER

GetRedirectRequest::GetRedirectRequest()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.GetRedirectRequest)
}

void GetRedirectRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

GetRedirectRequest::GetRedirectRequest(const GetRedirectRequest& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.GetRedirectRequest)
}

void GetRedirectRequest::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRedirectRequest::~GetRedirectRequest() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.GetRedirectRequest)
  SharedDtor();
}

void GetRedirectRequest::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void GetRedirectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRedirectRequest& GetRedirectRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#endif
  return *default_instance_;
}

GetRedirectRequest* GetRedirectRequest::default_instance_ = NULL;

GetRedirectRequest* GetRedirectRequest::New(::youmecommon::protobuf::Arena* arena) const {
  GetRedirectRequest* n = new GetRedirectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRedirectRequest::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  }
  idc_area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRedirectRequest::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.GetRedirectRequest)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_idc_area;
        break;
      }

      // repeated string idc_area = 2;
      case 2: {
        if (tag == 18) {
         parse_idc_area:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_idc_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_idc_area;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.GetRedirectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.GetRedirectRequest)
  return false;
#undef DO_
}

void GetRedirectRequest::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.GetRedirectRequest)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // repeated string idc_area = 2;
  for (int i = 0; i < this->idc_area_size(); i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteString(
      2, this->idc_area(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.GetRedirectRequest)
}

int GetRedirectRequest::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  // repeated string idc_area = 2;
  total_size += 1 * this->idc_area_size();
  for (int i = 0; i < this->idc_area_size(); i++) {
    total_size += ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
      this->idc_area(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRedirectRequest::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRedirectRequest*>(&from));
}

void GetRedirectRequest::MergeFrom(const GetRedirectRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  idc_area_.MergeFrom(from.idc_area_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRedirectRequest::CopyFrom(const GetRedirectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRedirectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void GetRedirectRequest::Swap(GetRedirectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRedirectRequest::InternalSwap(GetRedirectRequest* other) {
  std::swap(head_, other->head_);
  idc_area_.UnsafeArenaSwap(&other->idc_area_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRedirectRequest::GetTypeName() const {
  return "YouMeProtocol.GetRedirectRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRedirectRequest

// required .YouMeProtocol.PacketHead head = 1;
bool GetRedirectRequest::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRedirectRequest::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRedirectRequest::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRedirectRequest::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& GetRedirectRequest::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectRequest.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* GetRedirectRequest::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.GetRedirectRequest.head)
  return head_;
}
::YouMeProtocol::PacketHead* GetRedirectRequest::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void GetRedirectRequest::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.GetRedirectRequest.head)
}

// repeated string idc_area = 2;
int GetRedirectRequest::idc_area_size() const {
  return idc_area_.size();
}
void GetRedirectRequest::clear_idc_area() {
  idc_area_.Clear();
}
 const ::std::string& GetRedirectRequest::idc_area(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectRequest.idc_area)
  return idc_area_.Get(index);
}
 ::std::string* GetRedirectRequest::mutable_idc_area(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.GetRedirectRequest.idc_area)
  return idc_area_.Mutable(index);
}
 void GetRedirectRequest::set_idc_area(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:YouMeProtocol.GetRedirectRequest.idc_area)
  idc_area_.Mutable(index)->assign(value);
}
 void GetRedirectRequest::set_idc_area(int index, const char* value) {
  idc_area_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.GetRedirectRequest.idc_area)
}
 void GetRedirectRequest::set_idc_area(int index, const char* value, size_t size) {
  idc_area_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.GetRedirectRequest.idc_area)
}
 ::std::string* GetRedirectRequest::add_idc_area() {
  return idc_area_.Add();
}
 void GetRedirectRequest::add_idc_area(const ::std::string& value) {
  idc_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:YouMeProtocol.GetRedirectRequest.idc_area)
}
 void GetRedirectRequest::add_idc_area(const char* value) {
  idc_area_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:YouMeProtocol.GetRedirectRequest.idc_area)
}
 void GetRedirectRequest::add_idc_area(const char* value, size_t size) {
  idc_area_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:YouMeProtocol.GetRedirectRequest.idc_area)
}
 const ::youmecommon::protobuf::RepeatedPtrField< ::std::string>&
GetRedirectRequest::idc_area() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.GetRedirectRequest.idc_area)
  return idc_area_;
}
 ::youmecommon::protobuf::RepeatedPtrField< ::std::string>*
GetRedirectRequest::mutable_idc_area() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.GetRedirectRequest.idc_area)
  return &idc_area_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetRedirectResponse::kStatusFieldNumber;
const int GetRedirectResponse::kRedirectInfoListFieldNumber;
#endif  // !_MSC_VER

GetRedirectResponse::GetRedirectResponse()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.GetRedirectResponse)
}

void GetRedirectResponse::InitAsDefaultInstance() {
}

GetRedirectResponse::GetRedirectResponse(const GetRedirectResponse& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.GetRedirectResponse)
}

void GetRedirectResponse::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRedirectResponse::~GetRedirectResponse() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.GetRedirectResponse)
  SharedDtor();
}

void GetRedirectResponse::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetRedirectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetRedirectResponse& GetRedirectResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YouMeServerValidProtocol_2eproto();
#endif
  return *default_instance_;
}

GetRedirectResponse* GetRedirectResponse::default_instance_ = NULL;

GetRedirectResponse* GetRedirectResponse::New(::youmecommon::protobuf::Arena* arena) const {
  GetRedirectResponse* n = new GetRedirectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetRedirectResponse::Clear() {
  status_ = 0;
  redirect_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetRedirectResponse::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.GetRedirectResponse)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redirect_info_list;
        break;
      }

      // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 2;
      case 2: {
        if (tag == 18) {
         parse_redirect_info_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_redirect_info_list:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_redirect_info_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_redirect_info_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.GetRedirectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.GetRedirectResponse)
  return false;
#undef DO_
}

void GetRedirectResponse::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.GetRedirectResponse)
  // required int32 status = 1;
  if (has_status()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 2;
  for (unsigned int i = 0, n = this->redirect_info_list_size(); i < n; i++) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->redirect_info_list(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.GetRedirectResponse)
}

int GetRedirectResponse::ByteSize() const {
  int total_size = 0;

  // required int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  // repeated .YouMeProtocol.RedirectInfo redirect_info_list = 2;
  total_size += 1 * this->redirect_info_list_size();
  for (int i = 0; i < this->redirect_info_list_size(); i++) {
    total_size +=
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->redirect_info_list(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRedirectResponse::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const GetRedirectResponse*>(&from));
}

void GetRedirectResponse::MergeFrom(const GetRedirectResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  redirect_info_list_.MergeFrom(from.redirect_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void GetRedirectResponse::CopyFrom(const GetRedirectResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRedirectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::youmecommon::protobuf::internal::AllAreInitialized(this->redirect_info_list())) return false;
  return true;
}

void GetRedirectResponse::Swap(GetRedirectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetRedirectResponse::InternalSwap(GetRedirectResponse* other) {
  std::swap(status_, other->status_);
  redirect_info_list_.UnsafeArenaSwap(&other->redirect_info_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GetRedirectResponse::GetTypeName() const {
  return "YouMeProtocol.GetRedirectResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetRedirectResponse

// required int32 status = 1;
bool GetRedirectResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetRedirectResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void GetRedirectResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetRedirectResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::youmecommon::protobuf::int32 GetRedirectResponse::status() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectResponse.status)
  return status_;
}
 void GetRedirectResponse::set_status(::youmecommon::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.GetRedirectResponse.status)
}

// repeated .YouMeProtocol.RedirectInfo redirect_info_list = 2;
int GetRedirectResponse::redirect_info_list_size() const {
  return redirect_info_list_.size();
}
void GetRedirectResponse::clear_redirect_info_list() {
  redirect_info_list_.Clear();
}
const ::YouMeProtocol::RedirectInfo& GetRedirectResponse::redirect_info_list(int index) const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_.Get(index);
}
::YouMeProtocol::RedirectInfo* GetRedirectResponse::mutable_redirect_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_.Mutable(index);
}
::YouMeProtocol::RedirectInfo* GetRedirectResponse::add_redirect_info_list() {
  // @@protoc_insertion_point(field_add:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_.Add();
}
::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >*
GetRedirectResponse::mutable_redirect_info_list() {
  // @@protoc_insertion_point(field_mutable_list:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return &redirect_info_list_;
}
const ::youmecommon::protobuf::RepeatedPtrField< ::YouMeProtocol::RedirectInfo >&
GetRedirectResponse::redirect_info_list() const {
  // @@protoc_insertion_point(field_list:YouMeProtocol.GetRedirectResponse.redirect_info_list)
  return redirect_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

// @@protoc_insertion_point(global_scope)
