// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: YoumeRunningState.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "YoumeRunningState.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace YouMeProtocol {

void protobuf_ShutdownFile_YoumeRunningState_2eproto() {
  delete DataReportBase::default_instance_;
  delete DataReportReqHead::default_instance_;
  delete DataReport_Response::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_YoumeRunningState_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_YoumeRunningState_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::YouMeProtocol::protobuf_AddDesc_common_2eproto();
  DataReportBase::default_instance_ = new DataReportBase();
  DataReportReqHead::default_instance_ = new DataReportReqHead();
  DataReport_Response::default_instance_ = new DataReport_Response();
  DataReportBase::default_instance_->InitAsDefaultInstance();
  DataReportReqHead::default_instance_->InitAsDefaultInstance();
  DataReport_Response::default_instance_->InitAsDefaultInstance();
  ::youmecommon::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_YoumeRunningState_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_YoumeRunningState_2eproto_once_);
void protobuf_AddDesc_YoumeRunningState_2eproto() {
  ::youmecommon::protobuf::GoogleOnceInit(&protobuf_AddDesc_YoumeRunningState_2eproto_once_,
                 &protobuf_AddDesc_YoumeRunningState_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_YoumeRunningState_2eproto {
  StaticDescriptorInitializer_YoumeRunningState_2eproto() {
    protobuf_AddDesc_YoumeRunningState_2eproto();
  }
} static_descriptor_initializer_YoumeRunningState_2eproto_;
#endif
bool UserEvt_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

bool RecordErrCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 15:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int DataReportBase::kHeadFieldNumber;
const int DataReportBase::kEvtFieldNumber;
const int DataReportBase::kCodeFieldNumber;
const int DataReportBase::kReporttimeFieldNumber;
const int DataReportBase::kUseridFieldNumber;
#endif  // !_MSC_VER

DataReportBase::DataReportBase()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.DataReportBase)
}

void DataReportBase::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(
      ::YouMeProtocol::PacketHead::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::PacketHead*>(&::YouMeProtocol::PacketHead::default_instance());
#endif
}

DataReportBase::DataReportBase(const DataReportBase& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.DataReportBase)
}

void DataReportBase::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  evt_ = 0;
  code_ = 0;
  reporttime_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReportBase::~DataReportBase() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.DataReportBase)
  SharedDtor();
}

void DataReportBase::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void DataReportBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataReportBase& DataReportBase::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YoumeRunningState_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YoumeRunningState_2eproto();
#endif
  return *default_instance_;
}

DataReportBase* DataReportBase::default_instance_ = NULL;

DataReportBase* DataReportBase::New(::youmecommon::protobuf::Arena* arena) const {
  DataReportBase* n = new DataReportBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReportBase::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DataReportBase*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(evt_, reporttime_);
    if (has_head()) {
      if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
    }
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataReportBase::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.DataReportBase)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.PacketHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_evt;
        break;
      }

      // required .YouMeProtocol.UserEvt evt = 2;
      case 2: {
        if (tag == 16) {
         parse_evt:
          int value;
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::YouMeProtocol::UserEvt_IsValid(value)) {
            set_evt(static_cast< ::YouMeProtocol::UserEvt >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional int32 code = 3;
      case 3: {
        if (tag == 24) {
         parse_code:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reporttime;
        break;
      }

      // optional int64 reporttime = 4;
      case 4: {
        if (tag == 32) {
         parse_reporttime:
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int64, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reporttime_)));
          set_has_reporttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_userid;
        break;
      }

      // optional string userid = 5;
      case 5: {
        if (tag == 42) {
         parse_userid:
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.DataReportBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.DataReportBase)
  return false;
#undef DO_
}

void DataReportBase::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.DataReportBase)
  // required .YouMeProtocol.PacketHead head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  // required .YouMeProtocol.UserEvt evt = 2;
  if (has_evt()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->evt(), output);
  }

  // optional int32 code = 3;
  if (has_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // optional int64 reporttime = 4;
  if (has_reporttime()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt64(4, this->reporttime(), output);
  }

  // optional string userid = 5;
  if (has_userid()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->userid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.DataReportBase)
}

int DataReportBase::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_head()) {
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }

  if (has_evt()) {
    // required .YouMeProtocol.UserEvt evt = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evt());
  }

  return total_size;
}
int DataReportBase::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .YouMeProtocol.PacketHead head = 1;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);

    // required .YouMeProtocol.UserEvt evt = 2;
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::EnumSize(this->evt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int64 reporttime = 4;
    if (has_reporttime()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::Int64Size(
          this->reporttime());
    }

    // optional string userid = 5;
    if (has_userid()) {
      total_size += 1 +
        ::youmecommon::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReportBase::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const DataReportBase*>(&from));
}

void DataReportBase::MergeFrom(const DataReportBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::PacketHead::MergeFrom(from.head());
    }
    if (from.has_evt()) {
      set_evt(from.evt());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_reporttime()) {
      set_reporttime(from.reporttime());
    }
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataReportBase::CopyFrom(const DataReportBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReportBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void DataReportBase::Swap(DataReportBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReportBase::InternalSwap(DataReportBase* other) {
  std::swap(head_, other->head_);
  std::swap(evt_, other->evt_);
  std::swap(code_, other->code_);
  std::swap(reporttime_, other->reporttime_);
  userid_.Swap(&other->userid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataReportBase::GetTypeName() const {
  return "YouMeProtocol.DataReportBase";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReportBase

// required .YouMeProtocol.PacketHead head = 1;
bool DataReportBase::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReportBase::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReportBase::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReportBase::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::PacketHead::Clear();
  clear_has_head();
}
const ::YouMeProtocol::PacketHead& DataReportBase::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReportBase.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::PacketHead* DataReportBase::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::PacketHead;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.DataReportBase.head)
  return head_;
}
::YouMeProtocol::PacketHead* DataReportBase::release_head() {
  clear_has_head();
  ::YouMeProtocol::PacketHead* temp = head_;
  head_ = NULL;
  return temp;
}
void DataReportBase::set_allocated_head(::YouMeProtocol::PacketHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.DataReportBase.head)
}

// required .YouMeProtocol.UserEvt evt = 2;
bool DataReportBase::has_evt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataReportBase::set_has_evt() {
  _has_bits_[0] |= 0x00000002u;
}
void DataReportBase::clear_has_evt() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataReportBase::clear_evt() {
  evt_ = 0;
  clear_has_evt();
}
 ::YouMeProtocol::UserEvt DataReportBase::evt() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReportBase.evt)
  return static_cast< ::YouMeProtocol::UserEvt >(evt_);
}
 void DataReportBase::set_evt(::YouMeProtocol::UserEvt value) {
  assert(::YouMeProtocol::UserEvt_IsValid(value));
  set_has_evt();
  evt_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.DataReportBase.evt)
}

// optional int32 code = 3;
bool DataReportBase::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataReportBase::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
void DataReportBase::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataReportBase::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::youmecommon::protobuf::int32 DataReportBase::code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReportBase.code)
  return code_;
}
 void DataReportBase::set_code(::youmecommon::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.DataReportBase.code)
}

// optional int64 reporttime = 4;
bool DataReportBase::has_reporttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataReportBase::set_has_reporttime() {
  _has_bits_[0] |= 0x00000008u;
}
void DataReportBase::clear_has_reporttime() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataReportBase::clear_reporttime() {
  reporttime_ = GOOGLE_LONGLONG(0);
  clear_has_reporttime();
}
 ::youmecommon::protobuf::int64 DataReportBase::reporttime() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReportBase.reporttime)
  return reporttime_;
}
 void DataReportBase::set_reporttime(::youmecommon::protobuf::int64 value) {
  set_has_reporttime();
  reporttime_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.DataReportBase.reporttime)
}

// optional string userid = 5;
bool DataReportBase::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataReportBase::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
void DataReportBase::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataReportBase::clear_userid() {
  userid_.ClearToEmptyNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& DataReportBase::userid() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReportBase.userid)
  return userid_.GetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReportBase::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:YouMeProtocol.DataReportBase.userid)
}
 void DataReportBase::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:YouMeProtocol.DataReportBase.userid)
}
 void DataReportBase::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:YouMeProtocol.DataReportBase.userid)
}
 ::std::string* DataReportBase::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.DataReportBase.userid)
  return userid_.MutableNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DataReportBase::release_userid() {
  clear_has_userid();
  return userid_.ReleaseNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DataReportBase::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.DataReportBase.userid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DataReportReqHead::kHeadFieldNumber;
#endif  // !_MSC_VER

DataReportReqHead::DataReportReqHead()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.DataReportReqHead)
}

void DataReportReqHead::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  head_ = const_cast< ::YouMeProtocol::DataReportBase*>(
      ::YouMeProtocol::DataReportBase::internal_default_instance());
#else
  head_ = const_cast< ::YouMeProtocol::DataReportBase*>(&::YouMeProtocol::DataReportBase::default_instance());
#endif
}

DataReportReqHead::DataReportReqHead(const DataReportReqHead& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.DataReportReqHead)
}

void DataReportReqHead::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReportReqHead::~DataReportReqHead() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.DataReportReqHead)
  SharedDtor();
}

void DataReportReqHead::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete head_;
  }
}

void DataReportReqHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataReportReqHead& DataReportReqHead::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YoumeRunningState_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YoumeRunningState_2eproto();
#endif
  return *default_instance_;
}

DataReportReqHead* DataReportReqHead::default_instance_ = NULL;

DataReportReqHead* DataReportReqHead::New(::youmecommon::protobuf::Arena* arena) const {
  DataReportReqHead* n = new DataReportReqHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReportReqHead::Clear() {
  if (has_head()) {
    if (head_ != NULL) head_->::YouMeProtocol::DataReportBase::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataReportReqHead::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.DataReportReqHead)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .YouMeProtocol.DataReportBase head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::youmecommon::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.DataReportReqHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.DataReportReqHead)
  return false;
#undef DO_
}

void DataReportReqHead::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.DataReportReqHead)
  // required .YouMeProtocol.DataReportBase head = 1;
  if (has_head()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->head_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.DataReportReqHead)
}

int DataReportReqHead::ByteSize() const {
  int total_size = 0;

  // required .YouMeProtocol.DataReportBase head = 1;
  if (has_head()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->head_);
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReportReqHead::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const DataReportReqHead*>(&from));
}

void DataReportReqHead::MergeFrom(const DataReportReqHead& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::YouMeProtocol::DataReportBase::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataReportReqHead::CopyFrom(const DataReportReqHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReportReqHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_head()) {
    if (!this->head_->IsInitialized()) return false;
  }
  return true;
}

void DataReportReqHead::Swap(DataReportReqHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReportReqHead::InternalSwap(DataReportReqHead* other) {
  std::swap(head_, other->head_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataReportReqHead::GetTypeName() const {
  return "YouMeProtocol.DataReportReqHead";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReportReqHead

// required .YouMeProtocol.DataReportBase head = 1;
bool DataReportReqHead::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReportReqHead::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReportReqHead::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReportReqHead::clear_head() {
  if (head_ != NULL) head_->::YouMeProtocol::DataReportBase::Clear();
  clear_has_head();
}
const ::YouMeProtocol::DataReportBase& DataReportReqHead::head() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReportReqHead.head)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return head_ != NULL ? *head_ : *default_instance().head_;
#else
  return head_ != NULL ? *head_ : *default_instance_->head_;
#endif
}
::YouMeProtocol::DataReportBase* DataReportReqHead::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::YouMeProtocol::DataReportBase;
  }
  // @@protoc_insertion_point(field_mutable:YouMeProtocol.DataReportReqHead.head)
  return head_;
}
::YouMeProtocol::DataReportBase* DataReportReqHead::release_head() {
  clear_has_head();
  ::YouMeProtocol::DataReportBase* temp = head_;
  head_ = NULL;
  return temp;
}
void DataReportReqHead::set_allocated_head(::YouMeProtocol::DataReportBase* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:YouMeProtocol.DataReportReqHead.head)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DataReport_Response::kCodeFieldNumber;
#endif  // !_MSC_VER

DataReport_Response::DataReport_Response()
  : ::youmecommon::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:YouMeProtocol.DataReport_Response)
}

void DataReport_Response::InitAsDefaultInstance() {
}

DataReport_Response::DataReport_Response(const DataReport_Response& from)
  : ::youmecommon::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:YouMeProtocol.DataReport_Response)
}

void DataReport_Response::SharedCtor() {
  ::youmecommon::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataReport_Response::~DataReport_Response() {
  // @@protoc_insertion_point(destructor:YouMeProtocol.DataReport_Response)
  SharedDtor();
}

void DataReport_Response::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DataReport_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DataReport_Response& DataReport_Response::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_YoumeRunningState_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_YoumeRunningState_2eproto();
#endif
  return *default_instance_;
}

DataReport_Response* DataReport_Response::default_instance_ = NULL;

DataReport_Response* DataReport_Response::New(::youmecommon::protobuf::Arena* arena) const {
  DataReport_Response* n = new DataReport_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataReport_Response::Clear() {
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::youmecommon::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataReport_Response::MergePartialFromCodedStream(
    ::youmecommon::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::youmecommon::protobuf::uint32 tag;
  ::youmecommon::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::youmecommon::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:YouMeProtocol.DataReport_Response)
  for (;;) {
    ::std::pair< ::youmecommon::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::youmecommon::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::youmecommon::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::youmecommon::protobuf::int32, ::youmecommon::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::youmecommon::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::youmecommon::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::youmecommon::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:YouMeProtocol.DataReport_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:YouMeProtocol.DataReport_Response)
  return false;
#undef DO_
}

void DataReport_Response::SerializeWithCachedSizes(
    ::youmecommon::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:YouMeProtocol.DataReport_Response)
  // required int32 code = 1;
  if (has_code()) {
    ::youmecommon::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:YouMeProtocol.DataReport_Response)
}

int DataReport_Response::ByteSize() const {
  int total_size = 0;

  // required int32 code = 1;
  if (has_code()) {
    total_size += 1 +
      ::youmecommon::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataReport_Response::CheckTypeAndMergeFrom(
    const ::youmecommon::protobuf::MessageLite& from) {
  MergeFrom(*::youmecommon::protobuf::down_cast<const DataReport_Response*>(&from));
}

void DataReport_Response::MergeFrom(const DataReport_Response& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void DataReport_Response::CopyFrom(const DataReport_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataReport_Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DataReport_Response::Swap(DataReport_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataReport_Response::InternalSwap(DataReport_Response* other) {
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DataReport_Response::GetTypeName() const {
  return "YouMeProtocol.DataReport_Response";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataReport_Response

// required int32 code = 1;
bool DataReport_Response::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataReport_Response::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void DataReport_Response::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataReport_Response::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::youmecommon::protobuf::int32 DataReport_Response::code() const {
  // @@protoc_insertion_point(field_get:YouMeProtocol.DataReport_Response.code)
  return code_;
}
 void DataReport_Response::set_code(::youmecommon::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:YouMeProtocol.DataReport_Response.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace YouMeProtocol

// @@protoc_insertion_point(global_scope)
